e9228b6d51 owen.wen 2021-08-24

AOS-680: add PROD vbmeta.img support in uboot

1. built with product public key when uboot feature(in uboot.mk) contains "prod"
   otherwise built with demo public key

2. if fuse closed or not allow error(fastboot flashing lock) and verify fail
   then stop booting

Change-Id: I3f9e8cd22c32d0947fb4db2676d61d871930a243

diff --git a/Makefile b/Makefile
index 5a901e69eb..bbe8b0a165 100644
--- a/Makefile
+++ b/Makefile
@@ -731,6 +731,11 @@ include scripts/Makefile.extrawarn
 ifeq (1,$(USERDEBUG))
 KBUILD_CFLAGS += -D__USERDEBUG__
 endif
+
+ifeq (prod,$(AVB_PUBKEY))
+KBUILD_CFLAGS += -D__IDT_AVB_PUBKEY_PROD__
+endif
+
 # Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments
 KBUILD_CPPFLAGS += $(KCPPFLAGS)
 KBUILD_AFLAGS += $(KAFLAGS)
diff --git a/include/idtech_public_key.h b/include/idtech_public_key.h
index 3ed8024f7c..166cdcdc9d 100644
--- a/include/idtech_public_key.h
+++ b/include/idtech_public_key.h
@@ -1,7 +1,7 @@
 #ifndef __IDTECH_PUBLIC_KEY_H_
 #define __IDTECH_PUBLIC_KEY_H_
 
-unsigned char idtech_public_key[] = {
+static unsigned char idtech_demo_public_key[] = {
 0x00,0x00,0x08,0x00,0xff,0xde,0xfb,0x9f,0xb9,0x96,0x1d,0xc7,
 0x8a,0xe2,0x65,0x48,0x78,0x5b,0x98,0xa3,0xbd,0x8a,0x27,0xd0,
 0xc1,0x6e,0x84,0xef,0x4e,0xb4,0xe0,0x24,0x06,0x8e,0x6d,0x76,
@@ -48,4 +48,50 @@ unsigned char idtech_public_key[] = {
 0x91,0x37,0x77,0x8c
 };
 
+static unsigned char idtech_prod_public_key[] = {
+0x00,0x00,0x08,0x00,0x74,0x1d,0x96,0x25,0xba,0x01,0x31,0xe6,
+0xf8,0xa1,0xee,0xea,0xf8,0x2e,0x6e,0x10,0xea,0x53,0x4b,0x76,
+0xba,0x4d,0xee,0x0c,0x2b,0xb5,0x02,0x87,0xc2,0x72,0x81,0x5a,
+0x63,0x8a,0x75,0x39,0xb3,0x60,0xbd,0x25,0xf8,0xc2,0x9d,0x65,
+0xc5,0xa2,0x73,0x7b,0x96,0x6a,0xa6,0x99,0xd1,0x1c,0x85,0x61,
+0x6e,0x05,0xe7,0xd9,0x6b,0xd2,0xd7,0x84,0x5f,0xc4,0x40,0x89,
+0x85,0xc8,0xd7,0x03,0x4a,0x3a,0x46,0xe4,0xa0,0x09,0xbc,0xb5,
+0xb9,0x33,0x14,0x44,0x55,0xef,0x36,0x93,0x55,0x10,0xc2,0x60,
+0x6d,0xda,0xed,0xdf,0xc1,0x2d,0xb2,0x4e,0x88,0xc3,0xa1,0xf1,
+0x5e,0x40,0xfc,0x36,0xa7,0xab,0xb9,0x47,0xc5,0x9a,0xf7,0xf1,
+0x34,0x46,0x7c,0x82,0xba,0x3a,0x70,0x6d,0x3f,0x56,0xd1,0xd8,
+0xda,0x7d,0x56,0x63,0xf6,0x01,0x08,0x01,0x09,0x69,0x48,0x24,
+0x83,0x80,0x10,0xe7,0x1b,0xcc,0x1b,0x31,0x26,0x64,0xaa,0x98,
+0xf2,0x2e,0x6f,0x24,0xac,0xcf,0x7a,0x0e,0x87,0x15,0x74,0xa1,
+0xc9,0x8d,0x2e,0x98,0x60,0x02,0x5f,0x70,0x12,0xfb,0xec,0xd3,
+0x7e,0xad,0xd6,0x5d,0x7b,0x3c,0x6c,0x09,0xe2,0x27,0x5b,0xd8,
+0xf0,0xf6,0xe6,0x05,0xe7,0x57,0x69,0xc3,0x98,0x8e,0x65,0x1a,
+0x9d,0x77,0x2f,0x86,0xde,0x0a,0x08,0x97,0x9d,0x76,0xe7,0xc2,
+0x4b,0x63,0x64,0xb0,0x66,0x53,0x55,0xbe,0x5c,0xe2,0xd7,0x0c,
+0xfd,0x8c,0xc2,0x3e,0x87,0x62,0xdd,0x8e,0x83,0xee,0xd1,0x68,
+0xc3,0xd0,0xbb,0x87,0xfd,0x45,0xf5,0x0e,0xc1,0xcb,0xa9,0xef,
+0x4c,0x21,0x51,0x92,0xbc,0x7e,0x71,0x3a,0x3c,0x39,0x6a,0x53,
+0x87,0x45,0x93,0x33,0x18,0xa8,0x45,0x38,0x61,0xac,0x01,0xda,
+0x25,0x8e,0x74,0x37,0x4a,0x6b,0x8a,0x70,0xb6,0xac,0x82,0xbf,
+0x11,0x9a,0x92,0xc2,0x0e,0xff,0x4f,0x84,0x4f,0x81,0x15,0x7d,
+0x60,0x50,0x36,0x13,0x8a,0x4c,0x30,0xe6,0xaf,0xa8,0x0f,0xc4,
+0x87,0x7a,0xb5,0xeb,0x40,0x91,0xca,0x23,0x0b,0xa3,0x2c,0x1c,
+0x53,0x13,0x3a,0x94,0xf0,0x3d,0x3c,0xc3,0x45,0xf5,0xb5,0xf5,
+0x4a,0x4f,0x76,0x3b,0x13,0xf8,0xf8,0x61,0xd6,0x1a,0x37,0x0b,
+0x50,0x09,0x20,0x5d,0xd2,0x04,0x1f,0xce,0x9c,0x63,0x1a,0x5f,
+0xff,0x3a,0x49,0x35,0x07,0x62,0x60,0x17,0x50,0x21,0xda,0x99,
+0xf5,0x50,0x70,0x56,0xa2,0x6b,0x49,0xa4,0xdd,0xe6,0x70,0x52,
+0xac,0x0d,0xa2,0xf6,0xea,0x6a,0x3a,0x02,0x65,0x76,0x6b,0xa3,
+0x2a,0xb6,0xa6,0x7e,0x37,0x7f,0xbd,0x14,0xa5,0x66,0xfc,0x30,
+0x74,0x5c,0x6b,0x5b,0xd0,0x53,0x89,0x0e,0x82,0x8e,0xee,0x35,
+0x39,0x5a,0xa7,0x64,0x5d,0x7f,0x83,0xe2,0xcb,0x8a,0x86,0x16,
+0x02,0x94,0xa5,0xe0,0x81,0x48,0xa7,0x79,0x55,0x8d,0x6e,0x69,
+0x6f,0x83,0xd4,0xfb,0x5b,0x45,0xaf,0xa5,0x51,0xab,0xf9,0xf4,
+0x2a,0x86,0x2e,0x3c,0x48,0x5d,0x51,0x59,0x94,0x5d,0xcf,0x13,
+0xdf,0x71,0x5c,0x2d,0xcf,0xe8,0x83,0x33,0x43,0xe1,0x4e,0x00,
+0x32,0x4d,0x40,0x07,0x34,0xae,0x1e,0x0f,0x21,0xff,0xff,0x26,
+0x5e,0xd2,0xbd,0x8e,0x89,0x11,0xc4,0x7f,0xe5,0x78,0xa3,0x1e,
+0xbc,0x0f,0xee,0x8d,0x3a,0x8a,0x5b,0x23,0x50,0xfd,0x3a,0x41,
+0x6e,0xee,0x43,0xc1
+};
 #endif
diff --git a/lib/avb/fsl/fsl_avb.c b/lib/avb/fsl/fsl_avb.c
index f4797f1eea..9ccbf4ccc9 100644
--- a/lib/avb/fsl/fsl_avb.c
+++ b/lib/avb/fsl/fsl_avb.c
@@ -17,7 +17,7 @@
 #include "debug.h"
 #include "trusty/avb.h"
 #ifndef CONFIG_LOAD_KEY_FROM_RPMB
-#include "fsl_public_key.h"
+#include "idtech_public_key.h"
 #endif
 #include "fsl_atx_attributes.h"
 
@@ -559,6 +559,17 @@ fail:
 }
 #endif /* CONFIG_AVB_ATX */
 
+#ifndef CONFIG_LOAD_KEY_FROM_RPMB
+// public key depends on build time bootloader feature flavor
+// bootloader with prod feature keyword build with prod key
+// bootloader with demo feature keyword build with demo key
+#ifdef __IDT_AVB_PUBKEY_PROD__
+	unsigned char* idt_public_key = idtech_prod_public_key;
+#else
+	unsigned char* idt_public_key = idtech_demo_public_key;
+#endif
+#endif
+
 #ifdef AVB_RPMB
 /* Checks if the given public key used to sign the 'vbmeta'
  * partition is trusted. Boot loaders typically compare this with
@@ -595,7 +606,7 @@ AvbIOResult fsl_validate_vbmeta_public_key_rpmb(AvbOps* ops,
 	if (memcmp(public_key_buf, public_key_data, public_key_length)) {
 #else
 	/* match given public key */
-	if (memcmp(fsl_public_key, public_key_data, public_key_length)) {
+	if (memcmp(idt_public_key, public_key_data, public_key_length)) {
 #endif
 		ERR("public key not match
");
 		return AVB_IO_RESULT_OK;
@@ -814,7 +825,7 @@ AvbIOResult fsl_validate_vbmeta_public_key_rpmb(AvbOps* ops,
 	assert(ops != NULL && out_is_trusted != NULL);
 
 	/* match given public key */
-	if (memcmp(fsl_public_key, public_key_data, public_key_length)) {
+	if (memcmp(idt_public_key, public_key_data, public_key_length)) {
 		ERR("public key not match
");
 		*out_is_trusted = false;
 	} else
diff --git a/lib/libavb/avb_slot_verify.c b/lib/libavb/avb_slot_verify.c
index 8ce008de5a..4d61bcb8e2 100644
--- a/lib/libavb/avb_slot_verify.c
+++ b/lib/libavb/avb_slot_verify.c
@@ -14,6 +14,7 @@
 #include "avb_util.h"
 #include "avb_vbmeta_image.h"
 #include "avb_version.h"
+#include <asm/mach-imx/hab.h>
 #include <log.h>
 #include <malloc.h>
 #include <memalign.h>
@@ -21,15 +22,6 @@
 #include "trusty/hwcrypto.h"
 #endif
 
-#if defined(CONFIG_IDT_VALID_AVBKEY)
-#include "idtech_public_key.h"
-uint8_t* expect_pubkey = idtech_public_key;
-size_t expect_pubkey_size = sizeof(idtech_public_key);
-#else
-uint8_t* expect_pubkey = NULL;
-size_t expect_pubkey_size = 0;
-#endif
-
 /* Maximum number of partitions that can be loaded with avb_slot_verify(). */
 #define MAX_NUMBER_OF_LOADED_PARTITIONS 32
 
@@ -857,7 +849,8 @@ static AvbSlotVerifyResult load_and_verify_vbmeta(
                    "partition descriptor.
",
                    NULL);
         ret = AVB_SLOT_VERIFY_RESULT_ERROR_PUBLIC_KEY_REJECTED;
-        if (!allow_verification_error) {
+        // if fuse closed or not allow error, then stop booting
+        if (!allow_verification_error || imx_hab_is_enabled()) {
           goto out;
         }
       }
@@ -909,7 +902,8 @@ static AvbSlotVerifyResult load_and_verify_vbmeta(
                    ": Public key used to sign data rejected.
",
                    NULL);
         ret = AVB_SLOT_VERIFY_RESULT_ERROR_PUBLIC_KEY_REJECTED;
-        if (!allow_verification_error) {
+        // if fuse closed or not allow error, then stop booting
+        if (!allow_verification_error || imx_hab_is_enabled()) {
           goto out;
         }
       }
@@ -1544,8 +1538,8 @@ AvbSlotVerifyResult avb_slot_verify(AvbOps* ops,
                                  0 /* rollback_index_location */,
                                  "vbmeta",
                                  avb_strlen("vbmeta"),
-                                 expect_pubkey /* expected_public_key */,
-                                 expect_pubkey_size /* expected_public_key_length */,
+                                 NULL /* expected_public_key */,
+                                 0 /* expected_public_key_length */,
                                  slot_data,
                                  &algorithm_type,
                                  additional_cmdline_subst);
