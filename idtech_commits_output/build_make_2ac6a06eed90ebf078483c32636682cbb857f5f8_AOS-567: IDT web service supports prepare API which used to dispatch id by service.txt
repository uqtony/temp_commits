2ac6a06ee max.yang 2021-03-31

AOS-567: IDT web service supports prepare API which used to dispatch id by service

  socketID was a random number generated by otatools, now the web service
  support a PREPARE API for dual login and dispatch unique socketID, the
  rest of signing requests use the socketID to map connections on service side

Change-Id: I4436e729d2ff4dde798ba85565cafaad9eaa1ec5

diff --git a/tools/releasetools/idt_sign_target_files_ca.py b/tools/releasetools/idt_sign_target_files_ca.py
index f7414a9b6..cc839462b 100644
--- a/tools/releasetools/idt_sign_target_files_ca.py
+++ b/tools/releasetools/idt_sign_target_files_ca.py
@@ -18,7 +18,7 @@ from xml.etree import ElementTree
 from distutils.spawn import find_executable
 
 # VERSION: Android Ver.Major.Minor
-OTATOOL_VERSION = "11.01.001"
+OTATOOL_VERSION = "11.01.002"
 
 WS = idt_web_service.web_service()
 idt_key_map = {}
diff --git a/tools/releasetools/idt_web_service.py b/tools/releasetools/idt_web_service.py
index 535c68d42..c6e24dc7f 100644
--- a/tools/releasetools/idt_web_service.py
+++ b/tools/releasetools/idt_web_service.py
@@ -10,14 +10,15 @@ class web_service(object):
 
   def __init__(self):
     # init for signing parameters
-    self.HOST_URL = "http://demo.idtechweb.com:8751/"
-    self.SIGN_API = "api/sign/apk"
-    self.AUTH_API = "api/auth/login"
+    self.HOST_URL    = "http://demo.idtechweb.com:8751/"
+    self.AUTH_API    = "api/auth/login"
+    self.PREPARE_API = "api/sign/prepare"
+    self.SIGN_API    = "api/sign/apk"
     self.WSCA = "ANDROID PKI"
     self.WSHS = "1"
     self.WSRG = "4"
     self.WSZA = "1"
-    self.socket_id = str(random.randint(1, 10000))
+    self.socket_id = None
 
     # init for dual login
     self.user1   = None
@@ -84,19 +85,15 @@ class web_service(object):
                     "user2": { "username" : self.user2,
                                "password" : self.passwd2
                              },
-                    "rt": "SYS_Release",
-                    "rf": "3132333435363738", # hex of "12345678"
-                    "ca": self.WSCA,
-                    "hs": self.WSHS,
-                    "rg": self.WSRG,
-                    "za": self.WSZA,
-                    "socketId": self.socket_id
                  }
 
-    res = self.send_request(self.HOST_URL + self.SIGN_API, json.dumps(reg_body), reg_header)
+    res = self.send_request(self.HOST_URL + self.PREPARE_API, json.dumps(reg_body), reg_header)
     if res.json()["isSuccess"] is False:
       raise RuntimeError("Fail to create connections: {}".format(res.json()["msg"]))
 
+    # Got socket id from server, use it as connection id
+    self.socket_id = res.json()["data"]["socketId"]
+
     # Clear passwd once regist success
     self.user1 = None
     self.passwd1 = None
