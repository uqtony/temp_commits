8686387e1b Arthur Chen 2020-10-21

AOS-364: Make idt rotation being generic.

    - this feature is compatible with dcss & lcdif in i.mx8mq,
    lcdif in i.mx8mn.
    - available to any display probed by video_link.
    - remove HW flip function for dcss only.
    - clean framebuffer for idt_red_warning.

Change-Id: Id4af0027a09421122ca1e4f18c03e029f58fb6e5

diff --git a/cmd/bmp.c b/cmd/bmp.c
index eea112cd3f..853677a91b 100644
--- a/cmd/bmp.c
+++ b/cmd/bmp.c
@@ -21,11 +21,9 @@
 #include <video.h>
 #include <video_link.h>
 #include <asm/byteorder.h>
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 #include <persist_idt.h>
-#include <asm/io.h>
-#define IMX8MQ_DCSS_DPR_FRAME_CTRL0		0x32e18070
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 
 static int bmp_info (ulong addr);
 
@@ -119,13 +117,6 @@ static int do_bmp_display(cmd_tbl_t * cmdtp, int flag, int argc, char * const ar
 {
 	ulong addr;
 	int x = 0, y = 0;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-	int line_size = 0;
-	bool rotate = false;
-	struct udevice *dev;
-	char *binfo_rotate;
-	int degree, ret;
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 
 	splash_get_pos(&x, &y);
 
@@ -150,49 +141,7 @@ static int do_bmp_display(cmd_tbl_t * cmdtp, int flag, int argc, char * const ar
 	default:
 		return CMD_RET_USAGE;
 	}
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-	ret = uclass_first_device_err(UCLASS_VIDEO, &dev);
-	if (!ret) {
-		line_size = video_get_xsize(dev);
-		binfo_rotate = get_disp_rotation();
-		if (binfo_rotate != NULL) {
-			degree = (int)simple_strtol(binfo_rotate, NULL, 10);
-			rotate = true;
-			free(binfo_rotate);
-		}
-	} else {
-		printf("splash screen rotation is not support
");
-	}
-	if (rotate) {
-		switch (degree) {
-		case 90:
-			__raw_writel(((line_size * 4) << 16) | BIT(1),
-				     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-			break;
-		case 180:
-			__raw_writel(((line_size * 4) << 16) | BIT(1) | BIT(0),
-				     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-			rotate = false;
-			break;
-		case 270:
-			__raw_writel(((line_size * 4) << 16) | BIT(0),
-				     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-			break;
-		default:
-			__raw_writel(((line_size * 4) << 16),
-				     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-			rotate = false;
-			break;
-		}
-	} else {
-		__raw_writel(((line_size * 4) << 16),
-			     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-	}
-
-	return (bmp_display(addr, x, y, rotate, false));
-#else /* !defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 	return (bmp_display(addr, x, y));
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 }
 
 static cmd_tbl_t cmd_bmp_sub[] = {
@@ -285,11 +234,8 @@ static int bmp_info(ulong addr)
  * Return:      None
  *
  */
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-int bmp_display(ulong addr, int x, int y, bool rotate, bool warning)
-#else /* !defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+
 int bmp_display(ulong addr, int x, int y)
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 {
 #ifdef CONFIG_DM_VIDEO
 	struct udevice *dev;
@@ -326,11 +272,7 @@ int bmp_display(ulong addr, int x, int y)
 		    y == BMP_ALIGN_CENTER)
 			align = true;
 
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-		ret = video_bmp_display(dev, addr, x, y, align, rotate, warning);
-#else /* !defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 		ret = video_bmp_display(dev, addr, x, y, align);
-#endif /* CONFIG_IDT_ROTATION */
 	}
 #elif defined(CONFIG_LCD)
 	ret = lcd_display_bitmap(addr, x, y);
diff --git a/common/splash.c b/common/splash.c
index 9cfdfa4705..8241c839f1 100644
--- a/common/splash.c
+++ b/common/splash.c
@@ -24,11 +24,12 @@
 #include <env.h>
 #include <splash.h>
 #include <lcd.h>
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 #include <persist_idt.h>
 #include <asm/io.h>
-#define IMX8MQ_DCSS_DPR_FRAME_CTRL0		0x32e18070
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#include <image_idt.h>
+#include <stdlib.h>
+#endif /* CONFIG_IDT_ROTATION */
 
 #ifdef CONFIG_IDT_SPLASH_SUPPORT
 #include <mmc.h>
@@ -206,13 +207,12 @@ int splash_display(void)
 	ulong addr;
 	char *s;
 	int x = 0, y = 0, ret;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 	bool rotate = false;
 	char *binfo_rotate;
-	int line_size = 0;
 	struct udevice *dev;
-	int degree;
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+	int degree = 0;
+#endif /* CONFIG_IDT_ROTATION */
 
 	s = env_get("splashimage");
 	if (!s)
@@ -225,49 +225,29 @@ int splash_display(void)
 
 	splash_get_pos(&x, &y);
 
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 	ret = uclass_first_device_err(UCLASS_VIDEO, &dev);
 	if (!ret) {
-		line_size = video_get_xsize(dev);
 		binfo_rotate = get_disp_rotation();
 		if (binfo_rotate != NULL) {
 			degree = (int)simple_strtol(binfo_rotate, NULL, 10);
 			rotate = true;
 			free(binfo_rotate);
 		}
+		idt_image_clear(dev);
 	} else {
 		printf("splash screen rotation is not support
");
 	}
-	if (rotate) {
-		switch (degree) {
-		case 90:
-			__raw_writel(((line_size * 4) << 16) | BIT(1),
-				     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-			break;
-		case 180:
-			__raw_writel(((line_size * 4) << 16) | BIT(1) | BIT(0),
-				     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-			rotate = false;
-			break;
-		case 270:
-			__raw_writel(((line_size * 4) << 16) | BIT(0),
-				     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-			break;
-		default:
-			__raw_writel(((line_size * 4) << 16),
-				     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-			rotate = false;
-			break;
-		}
-	} else {
-		__raw_writel(((line_size * 4) << 16),
-			     IMX8MQ_DCSS_DPR_FRAME_CTRL0);
-	}
+	ret = bmp_display(addr, x, y);
+
+	if (rotate)
+		idt_image_rotate(dev, degree);
+	else
+		idt_image_sync(dev);
 
-	ret = bmp_display(addr, x, y, rotate, false);
-#else /* !defined(CONFIG_IDT_ROTATION) || !defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#else /* !CONFIG_IDT_ROTATION */
 	ret = bmp_display(addr, x, y);
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 	/* Skip banner output on video console if the logo is not at 0,0 */
 	if (x || y)
 		goto end;
diff --git a/drivers/fastboot/fb_fsl/fastboot_lock_unlock.c b/drivers/fastboot/fb_fsl/fastboot_lock_unlock.c
index ae5a9bb5d7..e2a51386f2 100644
--- a/drivers/fastboot/fb_fsl/fastboot_lock_unlock.c
+++ b/drivers/fastboot/fb_fsl/fastboot_lock_unlock.c
@@ -41,10 +41,10 @@
 #include "video_font_data.h"
 #endif
 
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 #include <image_idt.h>
 #include <persist_idt.h>
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 
 int fastboot_flash_find_index(const char *name);
 
@@ -565,8 +565,8 @@ int display_lock(FbLockState lock, int verify) {
 
 }
 
-#if defined(CONFIG_AVB_WARNING_LOGO) && defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-int idt_display_unlock_warning()
+#if defined(CONFIG_AVB_WARNING_LOGO) && defined(CONFIG_IDT_ROTATION)
+int idt_display_unlock_warning(void)
 {
 	int ret;
 	struct udevice *dev;
@@ -578,19 +578,19 @@ int idt_display_unlock_warning()
 	binfo_rotate = get_disp_rotation();
 	if (binfo_rotate != NULL) {
 		degree = (int)simple_strtol(binfo_rotate, NULL, 10);
-		free(binfo_rotate);
+		free((void *)binfo_rotate);
 	}
 
 	ret = uclass_first_device_err(UCLASS_VIDEO, &dev);
 	if (!ret) {
 		/* clear screen first */
 		idt_image_clear(dev);
+		idt_fb_clear(video_get_xsize(dev)*video_get_ysize(dev)*4);
 		width = (video_get_xsize(dev)/2) - IDT_WARNING_OFFSET_X;
 		height = (video_get_ysize(dev)/2) - IDT_WARNING_OFFSET_Y;
 		/* Draw the orange warning bmp logo */
 		ret = bmp_display((ulong)orange_warning_bmp_bitmap,
-					width, height,
-					false, true);
+				  width, height);
 		/* Show warning text. */
 		if (uclass_first_device_err(UCLASS_VIDEO_CONSOLE, &dev)) {
 			printf("no text console device found!
");
@@ -632,30 +632,24 @@ int idt_display_unlock_warning()
 		return -1;
 	}
 }
-#endif /* defined(CONFIG_AVB_WARNING_LOGO) && defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* defined(CONFIG_AVB_WARNING_LOGO) && defined(CONFIG_IDT_ROTATION) */
 
 #ifdef CONFIG_AVB_WARNING_LOGO
 int display_unlock_warning(void) {
 	int ret;
 	struct udevice *dev;
 
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 	return idt_display_unlock_warning();
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 
 	ret = uclass_first_device_err(UCLASS_VIDEO, &dev);
 	if (!ret) {
 		/* clear screen first */
 		video_clear(dev);
 		/* Draw the orange warning bmp logo */
-#ifdef CONFIG_IDT_ROTATION
-		ret = bmp_display((ulong)orange_warning_bmp_bitmap,
-					CONFIG_AVB_WARNING_LOGO_COLS, CONFIG_AVB_WARNING_LOGO_ROWS,
-					false, false);
-#else /* !CONFIG_IDT_ROTATION */
 		ret = bmp_display((ulong)orange_warning_bmp_bitmap,
 					CONFIG_AVB_WARNING_LOGO_COLS, CONFIG_AVB_WARNING_LOGO_ROWS);
-#endif /* CONFIG_IDT_ROTATION */
 
 		/* Show warning text. */
 		if (uclass_first_device_err(UCLASS_VIDEO_CONSOLE, &dev)) {
diff --git a/drivers/fastboot/fb_fsl/fastboot_lock_unlock.h b/drivers/fastboot/fb_fsl/fastboot_lock_unlock.h
index 94a9f48347..4403568f72 100644
--- a/drivers/fastboot/fb_fsl/fastboot_lock_unlock.h
+++ b/drivers/fastboot/fb_fsl/fastboot_lock_unlock.h
@@ -70,9 +70,9 @@ void set_fastboot_lock_disable(void);
 
 int display_lock(FbLockState lock, int verify);
 
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-int idt_display_unlock_warning();
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#if defined(CONFIG_IDT_ROTATION)
+int idt_display_unlock_warning(void);
+#endif /* CONFIG_IDT_ROTATION */
 int display_unlock_warning(void);
 
 bool valid_tos(void);
diff --git a/drivers/video/video-uclass.c b/drivers/video/video-uclass.c
index 6aa30312f1..c68d670530 100644
--- a/drivers/video/video-uclass.c
+++ b/drivers/video/video-uclass.c
@@ -17,9 +17,9 @@
 #ifdef CONFIG_SANDBOX
 #include <asm/sdl.h>
 #endif
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 #include <image_idt.h>
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 
 /*
  * Theory of operation:
@@ -238,9 +238,9 @@ static int video_post_probe(struct udevice *dev)
 		priv->line_length = priv->xsize * VNBYTES(priv->bpix);
 
 	priv->fb_size = priv->line_length * priv->ysize;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 	ret = idt_fb_init(priv->fb_size);
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 
 	/* Set up colors  */
 	video_set_default_colors(dev, false);
@@ -270,12 +270,12 @@ static int video_post_probe(struct udevice *dev)
 		snprintf(drv, sizeof(drv), "vidconsole%d", priv->rot);
 	}
 
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 	if (ret >= 0) {
 		target_fb = priv->fb;
 		priv->fb = idt_fb;
 	}
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 
 	str = strdup(name);
 	if (!str)
diff --git a/drivers/video/video_bmp.c b/drivers/video/video_bmp.c
index 002c4beb28..3537a6bf16 100644
--- a/drivers/video/video_bmp.c
+++ b/drivers/video/video_bmp.c
@@ -11,9 +11,6 @@
 #include <video.h>
 #include <watchdog.h>
 #include <asm/unaligned.h>
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-#include <image_idt.h>
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 #ifdef CONFIG_VIDEO_BMP_RLE8
 #define BMP_RLE8_ESCAPE		0
 #define BMP_RLE8_EOL		0
@@ -186,13 +183,8 @@ static void video_set_cmap(struct udevice *dev,
 		cte++;
 	}
 }
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
-		      bool align, bool rotate, bool warning)
-#else /* !defined(CONFIG_IDT_ROTATION) || !defined(CONFIG_VIDEO_IMX8M_DCSS) */
 int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 		      bool align)
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 {
 	struct video_priv *priv = dev_get_uclass_priv(dev);
 	ushort *cmap_base = NULL;
@@ -206,9 +198,6 @@ int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 	unsigned colours, bpix, bmp_bpix;
 	struct bmp_color_table_entry *palette;
 	int hdr_size;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-	uchar *idt_bmap = NULL;
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 
 	if (!bmp || !(bmp->header.signature[0] == 'B' &&
 	    bmp->header.signature[1] == 'M')) {
@@ -275,10 +264,6 @@ int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 		height = priv->ysize - y;
 
 	bmap = (uchar *)bmp + get_unaligned_le32(&bmp->header.data_offset);
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-	if ((!warning) && (target_fb))
-		priv->fb = target_fb;
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 	fb = (uchar *)(priv->fb +
 		(y + height - 1) * priv->line_length + x * bpix / 8);
 
@@ -313,56 +298,24 @@ int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 
 		for (i = 0; i < height; ++i) {
 			WATCHDOG_RESET();
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-			idt_bmap = bmap;
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 			for (j = 0; j < width; j++) {
 				if (bpix == 8 || bpix == 1) {
 					fb_put_byte(&fb, &bmap);
 				} else if (bpix == 16) {
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-					if (rotate) {
-						*(uint16_t *)fb = cmap_base[*idt_bmap];
-						idt_bmap += height;
-					} else {
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-						*(uint16_t *)fb = cmap_base[*bmap];
-						bmap++;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-					}
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+					*(uint16_t *)fb = cmap_base[*bmap];
+					bmap++;
 					fb += sizeof(uint16_t) / sizeof(*fb);
 				} else if (bpix == 24) {
 					/* Only support big endian */
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-					if (rotate) {
-						cte = &palette[*idt_bmap];
-						idt_bmap += height;
-					} else {
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-						cte = &palette[*bmap];
-						bmap++;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-					}
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-
+					cte = &palette[*bmap];
+					bmap++;
 					*(fb++) = cte->red;
 					*(fb++) = cte->green;
 					*(fb++) = cte->blue;
 				} else if (bpix == 32) {
 					/* Only support big endian */
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-					if (rotate) {
-						cte = &palette[*idt_bmap];
-						idt_bmap += height;
-					} else {
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-						cte = &palette[*bmap];
-						bmap++;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-					}
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-
+					cte = &palette[*bmap];
+					bmap++;
 					*(fb++) = cte->blue;
 					*(fb++) = cte->green;
 					*(fb++) = cte->red;
@@ -370,11 +323,6 @@ int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 				}
 
 			}
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-			if (rotate)
-				bmap++;		/* y -> x */
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-
 			bmap += (padded_width - width);
 			fb -= byte_width + priv->line_length;
 		}
@@ -390,24 +338,11 @@ int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 			bmap += (padded_width - width) * 2;
 			fb -= width * 2 + priv->line_length;
 		}
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-		if (rotate)
-			printf("Not support 90 or 270 degree rotation.
");
-
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 		break;
 #endif /* CONFIG_BMP_16BPP */
 #if defined(CONFIG_BMP_24BPP)
 	case 24:
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-		if (rotate && (bpix == 16))
-			printf("Not support 90 or 270 degree rotation.
");
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-
 		for (i = 0; i < height; ++i) {
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-			idt_bmap = bmap;
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 			for (j = 0; j < width; j++) {
 				if (bpix == 16) {
 					/* 16bit 555RGB format */
@@ -417,32 +352,12 @@ int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 					bmap += 3;
 					fb += 2;
 				} else {
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-					if (rotate) {
-						*(fb++) = *(idt_bmap++);
-						*(fb++) = *(idt_bmap++);
-						*(fb++) = *(idt_bmap++);
-						*(fb++) = 0;
-					} else {
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-						*(fb++) = *(bmap++);
-						*(fb++) = *(bmap++);
-						*(fb++) = *(bmap++);
-						*(fb++) = 0;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-					}
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+					*(fb++) = *(bmap++);
+					*(fb++) = *(bmap++);
+					*(fb++) = *(bmap++);
+					*(fb++) = 0;
 				}
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-				if (rotate)
-					idt_bmap += (height - 1)*3; /* x -> y */
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 			}
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-			if (rotate)
-				bmap += 3;		/* y -> x */
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-
 			fb -= priv->line_length + (width) * (bpix / 8);
 			bmap += (padded_width - width) * 3;
 		}
@@ -451,33 +366,12 @@ int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 #if defined(CONFIG_BMP_32BPP)
 	case 32:
 		for (i = 0; i < height; ++i) {
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-			idt_bmap = bmap;
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 			for (j = 0; j < width; j++) {
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-				if (rotate) {
-					*(fb++) = *(idt_bmap++);
-					*(fb++) = *(idt_bmap++);
-					*(fb++) = *(idt_bmap++);
-					*(fb++) = *(idt_bmap++);
-				} else {
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
-					*(fb++) = *(bmap++);
-					*(fb++) = *(bmap++);
-					*(fb++) = *(bmap++);
-					*(fb++) = *(bmap++);
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-				}
-				if (rotate)
-					idt_bmap += (height - 1)*4; /* x -> y */
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+				*(fb++) = *(bmap++);
+				*(fb++) = *(bmap++);
+				*(fb++) = *(bmap++);
+				*(fb++) = *(bmap++);
 			}
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-			if (rotate)
-				bmap += 4;		/* y -> x */
-
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 			fb -= priv->line_length + width * (bpix / 8);
 		}
 		break;
@@ -487,10 +381,6 @@ int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 	};
 
 	video_sync(dev, false);
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
-	if ((!warning) && (idt_fb))
-		priv->fb = idt_fb;
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
 
 	return 0;
 }
diff --git a/include/image_idt.h b/include/image_idt.h
index fd582c7e34..0be9886f71 100644
--- a/include/image_idt.h
+++ b/include/image_idt.h
@@ -33,6 +33,7 @@ int idt_fb_init(int size);
 void idt_image_sync(struct udevice *dev);
 /* for screen clean with external frame buffer */
 void idt_image_clear(struct udevice *dev);
+void idt_fb_clear(int size);
 /*
  * for screen rotation work with external frame buffer.
  * effect area: middle square created by short side of resolution.
diff --git a/include/lcd.h b/include/lcd.h
index 2e418efd1f..d7bdb40cd3 100644
--- a/include/lcd.h
+++ b/include/lcd.h
@@ -17,11 +17,8 @@
 #include <asm/byteorder.h>
 #endif
 
-#ifdef CONFIG_IDT_ROTATION
-int bmp_display(ulong addr, int x, int y, bool rotate, bool warning);
-#else /* !CONFIG_IDT_ROTATION */
 int bmp_display(ulong addr, int x, int y);
-#endif /* CONFIG_IDT_ROTATION */
+
 struct bmp_image *gunzip_bmp(unsigned long addr, unsigned long *lenp,
 			     void **alloc_addr);
 
diff --git a/include/video.h b/include/video.h
index 11402e4a1e..5badbddb25 100644
--- a/include/video.h
+++ b/include/video.h
@@ -167,13 +167,9 @@ void video_sync_all(void);
  *		- if a coordinate is positive it will be used unchnaged.
  * @return 0 if OK, -ve on error
  */
-#ifdef CONFIG_IDT_ROTATION
-int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
-		      bool align, bool rotate, bool warning);
-#else /* !CONFIG_IDT_ROTATION */
+
 int video_bmp_display(struct udevice *dev, ulong bmp_image, int x, int y,
 		      bool align);
-#endif /* CONFIG_IDT_ROTATION */
 
 /**
  * video_get_xsize() - Get the width of the display in pixels
diff --git a/lib/image_idt/image_idt.c b/lib/image_idt/image_idt.c
index dffa01187b..7b9c5b0732 100644
--- a/lib/image_idt/image_idt.c
+++ b/lib/image_idt/image_idt.c
@@ -60,6 +60,11 @@ void idt_image_clear(struct udevice *dev)
 	}
 }
 
+void idt_fb_clear(int size)
+{
+	memset(idt_fb, 0x0, size);
+}
+
 void idt_image_sync(struct udevice *dev)
 {
 	struct video_priv *priv = dev_get_uclass_priv(dev);
@@ -110,7 +115,6 @@ int idt_raw_y_flip(uchar *target, int size, int base, int degree)
 	uchar *tmp;
 	int i, j, count;
 	int t_count = 0, s_count = 0;
-	int ret = 0;
 
 	tmp = malloc(size);
 	if (!tmp) {
@@ -296,6 +300,5 @@ int idt_image_rotate(struct udevice *dev, int degree)
 		ret = -1;
 	}
 
-image_rotate_out:
 	return ret;
 }
diff --git a/lib/verifiedstate_idt/idt_red_warning.c b/lib/verifiedstate_idt/idt_red_warning.c
index d3da6445aa..893e121b41 100644
--- a/lib/verifiedstate_idt/idt_red_warning.c
+++ b/lib/verifiedstate_idt/idt_red_warning.c
@@ -6,6 +6,7 @@
 #include <linux/delay.h>
 #include <command.h>
 #include <idt_red_warning.h>
+#include <stdlib.h>
 
 #ifdef CONFIG_AVB_WARNING_LOGO
 #include "lcd.h"
@@ -17,19 +18,19 @@
 #include "video_font_data.h"
 #endif
 
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 #include <image_idt.h>
 #include <persist_idt.h>
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 
 void idt_show_red_warning_and_shutdown(void)
 {
 #ifdef CONFIG_AVB_WARNING_LOGO
 	int ret = 0, count = 0;
 	struct udevice *dev;
-	int width = 0;
-	int height = 0;
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+	int width = CONFIG_AVB_WARNING_LOGO_COLS;
+	int height = CONFIG_AVB_WARNING_LOGO_ROWS;
+#ifdef CONFIG_IDT_ROTATION
 	char *binfo_rotate = NULL;
 	int degree = 0;
 
@@ -38,23 +39,21 @@ void idt_show_red_warning_and_shutdown(void)
 		degree = (int)simple_strtol(binfo_rotate, NULL, 10);
 		free(binfo_rotate);
 	}
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 	ret = uclass_first_device_err(UCLASS_VIDEO, &dev);
 	if (!ret) {
 		/* clear screen first */
 		/* Draw the red warning bmp logo */
+#ifdef CONFIG_IDT_ROTATION
 		width = (video_get_xsize(dev)/2) - IDT_WARNING_OFFSET_X;
 		height = (video_get_ysize(dev)/2) - IDT_WARNING_OFFSET_Y;
-#ifdef CONFIG_IDT_ROTATION
 		idt_image_clear(dev);
-		ret = bmp_display((ulong)red_warning_logo_bitmap,
-					width, height,
-					false, true);
+		idt_fb_clear(video_get_xsize(dev)*video_get_ysize(dev)*4);
 #else /* !CONFIG_IDT_ROTATION */
 		video_clear(dev);
-		ret = bmp_display((ulong)red_warning_logo_bitmap,
-					width, height);
 #endif /* CONFIG_IDT_ROTATION */
+		ret = bmp_display((ulong)red_warning_logo_bitmap,
+				  width, height);
 		/* Show warning text. */
 		if (uclass_first_device_err(UCLASS_VIDEO_CONSOLE, &dev)) {
 			printf("no text console device found!
");
@@ -79,11 +78,11 @@ void idt_show_red_warning_and_shutdown(void)
 						height/VIDEO_FONT_HEIGHT + 20);
 		vidconsole_put_string(dev, "PRESS POWER BUTTON TO SHUTDOWN...");
 		/* sync frame buffer */
-#if defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS)
+#ifdef CONFIG_IDT_ROTATION
 		idt_image_rotate(dev->parent, degree);
-#else /* !defined(CONFIG_IDT_ROTATION) || !defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#else /* !CONFIG_IDT_ROTATION */
 		video_sync_all();
-#endif /* defined(CONFIG_IDT_ROTATION) && defined(CONFIG_VIDEO_IMX8M_DCSS) */
+#endif /* CONFIG_IDT_ROTATION */
 	} else {
 		printf("no video device found!
");
 	}
