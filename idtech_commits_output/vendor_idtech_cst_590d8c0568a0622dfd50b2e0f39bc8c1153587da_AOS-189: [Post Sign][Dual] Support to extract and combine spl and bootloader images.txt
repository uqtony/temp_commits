590d8c0 max.yang 2020-05-19

AOS-189: [Post Sign][Dual] Support to extract and combine spl and bootloader images

  Since our signing flow and keys will hold by CA, we need to extract the data from
  "Signed" SPL/bootloader image. Send it to CA, then get corresponding signature back.
  And we replace existing signature/certificate by official one.

  Command for extraction:
    python post_sign_bootloader.py extract_sign_data --image $SPL_SIGNED
      output: spl_csf_tosign, spl_img_tosign
    python post_sign_bootloader.py combine_sign_data --image $BOOTLOADER_SIGNED
      output: fit_csf_tosign, fit_img_tosign

  Command for combine:
    python post_sign_bootloader.py combine_sign_data --image $SPL_SIGNED --sig_spl_csf $SPL_CSFSIG --sig_spl_img $SPL_IMGSIG
    python post_sign_bootloader.py combine_sign_data --image $BOOTLOASDER_SIGNED --sig_fit_csf $BOOTLOADER_CSFSIG --sig_fit_img $BOOTLOADER_IMGSIG
    the output official signed image is the same file as input image, with signature replaced

Change-Id: I5e5a71f75c125ec087d9a8b68cd3029aaf18e3f0

diff --git a/post_sign_bootloader.py b/post_sign_bootloader.py
new file mode 100644
index 0000000..a863456
--- /dev/null
+++ b/post_sign_bootloader.py
@@ -0,0 +1,297 @@
+#!/usr/bin/env python
+
+import os
+import sys
+import subprocess
+import argparse
+import shutil
+
+TMP_HAB_FILE = "hab_tmp"
+is_spl = 0
+is_bootloader = 0
+
+# when you openssl asn1parse the sig0.bin, the offset is at offset 249 + 4(header)
+SIG_OFFSET_IN_CMS = 253
+
+# TODO: This should be replaced to official key once we get it from CA side
+# Currently, we use ./release/crt/{CSF1,IMG1}_1_sha256_2048_65537_v3_usr_crt.der
+OFFICIAL_CSF_CERT = [
+0x30,0x82,0x03,0x4a,0x30,0x82,0x02,0x32,0xa0,0x03,0x02,0x01,
+0x02,0x02,0x04,0x12,0x34,0x56,0x79,0x30,0x0d,0x06,0x09,0x2a,
+0x86,0x48,0x86,0xf7,0x0d,0x01,0x01,0x0b,0x05,0x00,0x30,0x27,
+0x31,0x25,0x30,0x23,0x06,0x03,0x55,0x04,0x03,0x0c,0x1c,0x53,
+0x52,0x4b,0x31,0x5f,0x73,0x68,0x61,0x32,0x35,0x36,0x5f,0x32,
+0x30,0x34,0x38,0x5f,0x36,0x35,0x35,0x33,0x37,0x5f,0x76,0x33,
+0x5f,0x63,0x61,0x30,0x1e,0x17,0x0d,0x31,0x39,0x31,0x30,0x32,
+0x39,0x30,0x33,0x31,0x32,0x31,0x39,0x5a,0x17,0x0d,0x32,0x34,
+0x31,0x30,0x32,0x37,0x30,0x33,0x31,0x32,0x31,0x39,0x5a,0x30,
+0x2a,0x31,0x28,0x30,0x26,0x06,0x03,0x55,0x04,0x03,0x0c,0x1f,
+0x43,0x53,0x46,0x31,0x5f,0x31,0x5f,0x73,0x68,0x61,0x32,0x35,
+0x36,0x5f,0x32,0x30,0x34,0x38,0x5f,0x36,0x35,0x35,0x33,0x37,
+0x5f,0x76,0x33,0x5f,0x75,0x73,0x72,0x30,0x82,0x01,0x22,0x30,
+0x0d,0x06,0x09,0x2a,0x86,0x48,0x86,0xf7,0x0d,0x01,0x01,0x01,
+0x05,0x00,0x03,0x82,0x01,0x0f,0x00,0x30,0x82,0x01,0x0a,0x02,
+0x82,0x01,0x01,0x00,0xb8,0xe3,0xbd,0xb6,0x8d,0xe8,0x6c,0x3a,
+0xc9,0x63,0x21,0x37,0xe6,0x3b,0xe6,0x8f,0x13,0xef,0x44,0x83,
+0x23,0x06,0xd6,0x2b,0x42,0x61,0x93,0xb7,0xec,0xaa,0x93,0xc7,
+0x93,0xce,0x5f,0x44,0xcc,0x08,0x37,0x89,0xa5,0xb1,0xdd,0x23,
+0x89,0x4e,0x42,0x12,0x34,0xba,0x74,0xa3,0x7d,0x98,0x10,0x62,
+0x7e,0xb0,0xca,0x56,0x61,0xc7,0xe7,0x2b,0xb4,0xee,0x6a,0xa7,
+0x16,0x31,0xca,0x26,0x9b,0xad,0xa6,0x53,0x77,0x4f,0xe6,0x3a,
+0xaa,0x7d,0xf5,0xb9,0x66,0xbc,0x9d,0xbd,0x75,0xe8,0xef,0x83,
+0x38,0x5b,0x9f,0xc2,0xae,0xda,0x99,0xd6,0xdb,0xd6,0x93,0xbf,
+0x7e,0x80,0xf2,0xce,0xb9,0x7e,0xa5,0xc3,0xe9,0xc0,0x45,0xf0,
+0x13,0xb6,0x74,0xf4,0x1d,0xf8,0x21,0xbb,0x3c,0xec,0x11,0xca,
+0x34,0x1d,0xdb,0xc0,0x0c,0xd6,0x2b,0x5a,0xdc,0xe9,0xdf,0xdb,
+0x50,0x1a,0x97,0xc1,0xfb,0x43,0x34,0xf3,0x3a,0x43,0x3a,0xe7,
+0xbc,0x9d,0xfa,0x86,0x7d,0x88,0x5b,0x19,0xe8,0x38,0x96,0xa7,
+0xfe,0xf4,0x93,0x5e,0x47,0xac,0x0e,0xc0,0x3b,0x47,0xff,0x64,
+0x91,0xc4,0x6a,0x1b,0xc0,0x13,0x7a,0x1e,0x47,0x0d,0x66,0x77,
+0x25,0x28,0x7b,0xc7,0x58,0xfe,0x6e,0x86,0x9a,0x2e,0xc2,0x4b,
+0xcf,0xac,0x52,0x4d,0x59,0x4b,0x8e,0xbe,0x01,0x83,0x77,0x93,
+0x86,0x29,0x52,0x69,0xc4,0x75,0x43,0x0a,0x8a,0xba,0x94,0xa4,
+0x40,0xc0,0xb0,0xb9,0x9f,0xbd,0xd4,0xb4,0xa0,0xd3,0xa5,0xb0,
+0xd5,0xe1,0x2b,0x36,0x28,0x2b,0xb8,0x05,0xf7,0x48,0xde,0x72,
+0x2e,0x3a,0x08,0xe2,0x5b,0x15,0x5a,0x2f,0x02,0x03,0x01,0x00,
+0x01,0xa3,0x7b,0x30,0x79,0x30,0x09,0x06,0x03,0x55,0x1d,0x13,
+0x04,0x02,0x30,0x00,0x30,0x2c,0x06,0x09,0x60,0x86,0x48,0x01,
+0x86,0xf8,0x42,0x01,0x0d,0x04,0x1f,0x16,0x1d,0x4f,0x70,0x65,
+0x6e,0x53,0x53,0x4c,0x20,0x47,0x65,0x6e,0x65,0x72,0x61,0x74,
+0x65,0x64,0x20,0x43,0x65,0x72,0x74,0x69,0x66,0x69,0x63,0x61,
+0x74,0x65,0x30,0x1d,0x06,0x03,0x55,0x1d,0x0e,0x04,0x16,0x04,
+0x14,0x82,0xdd,0x6b,0x13,0x1a,0xf6,0x98,0xc8,0xac,0x3c,0x9d,
+0x74,0xbc,0x8b,0x2a,0xbc,0x10,0xb7,0x60,0x24,0x30,0x1f,0x06,
+0x03,0x55,0x1d,0x23,0x04,0x18,0x30,0x16,0x80,0x14,0x1b,0x29,
+0x65,0x4b,0x6c,0xba,0x80,0x39,0xfe,0xc5,0x44,0xd8,0x6c,0xd2,
+0xb7,0x27,0x9e,0x6a,0xac,0x32,0x30,0x0d,0x06,0x09,0x2a,0x86,
+0x48,0x86,0xf7,0x0d,0x01,0x01,0x0b,0x05,0x00,0x03,0x82,0x01,
+0x01,0x00,0x6f,0x54,0xb7,0x0b,0xf4,0x9c,0x65,0x31,0xc8,0x92,
+0x08,0x95,0x38,0x0d,0x8e,0x10,0x3d,0x3c,0x7f,0xd1,0x1d,0x57,
+0xb2,0x85,0x0c,0x96,0xf2,0x3c,0x73,0xdb,0xd1,0x66,0x97,0x1a,
+0x35,0xff,0x71,0x70,0x9d,0xe5,0xb3,0x28,0xeb,0x24,0x62,0x65,
+0xb2,0x47,0xde,0x29,0x1f,0x4f,0x6a,0x85,0xd9,0x51,0xf2,0xb2,
+0x4b,0x91,0x18,0x9b,0x1e,0xfc,0xf5,0x09,0x36,0x74,0xa0,0x67,
+0xee,0x1b,0xdb,0xdf,0x79,0x13,0x88,0xa8,0xae,0x86,0x1e,0x87,
+0x7b,0x55,0xb2,0x07,0x15,0xdb,0x42,0x77,0x3a,0x07,0xa7,0x82,
+0x78,0xd4,0xa4,0x30,0x00,0xce,0x3d,0x22,0x72,0xbe,0x71,0x01,
+0x07,0xbf,0x9c,0x2d,0x12,0xdc,0x2b,0x32,0x02,0xf3,0xb9,0x25,
+0x5c,0x80,0x0f,0xc8,0xe7,0x16,0x07,0xfc,0x6e,0xf1,0xd0,0xbf,
+0xf4,0x7a,0x4b,0xa8,0x5f,0x44,0x4b,0x54,0xb3,0x8a,0xc2,0xb8,
+0x63,0x1a,0xe0,0x44,0x16,0x1d,0x9c,0x65,0xfa,0x0c,0x78,0x84,
+0xc6,0x9b,0xba,0x93,0x5d,0x43,0x0f,0xb2,0xfe,0xaf,0xed,0xfc,
+0xfa,0x2d,0xae,0xe0,0xb7,0xa0,0xa9,0xc9,0x4b,0x48,0xe7,0x7f,
+0x1d,0x6e,0xcc,0x9f,0x9c,0x34,0x2a,0x3f,0x2f,0xd7,0x3d,0x0d,
+0x99,0x0b,0x93,0xbb,0x98,0x8e,0x64,0x02,0x7e,0xad,0x5d,0xe4,
+0x44,0x57,0x79,0xab,0x3a,0x6f,0x8d,0x5d,0xf9,0x30,0xc9,0xc7,
+0xc8,0x95,0xda,0x5e,0x71,0xca,0xe3,0x3b,0x1d,0xd0,0x9d,0x3b,
+0xac,0xc8,0x4d,0xac,0x98,0x29,0xfb,0x3a,0xb3,0xc0,0xc6,0xd4,
+0x3e,0xf4,0xf2,0x06,0xc7,0xf9,0xce,0x8a,0x7c,0x09,0x55,0x81,
+0x7a,0x74,0x69,0x9e,0xd4,0x03]
+
+OFFICIAL_IMG_CERT = [
+0x30,0x82,0x03,0x4a,0x30,0x82,0x02,0x32,0xa0,0x03,0x02,0x01,
+0x02,0x02,0x04,0x12,0x34,0x56,0x7a,0x30,0x0d,0x06,0x09,0x2a,
+0x86,0x48,0x86,0xf7,0x0d,0x01,0x01,0x0b,0x05,0x00,0x30,0x27,
+0x31,0x25,0x30,0x23,0x06,0x03,0x55,0x04,0x03,0x0c,0x1c,0x53,
+0x52,0x4b,0x31,0x5f,0x73,0x68,0x61,0x32,0x35,0x36,0x5f,0x32,
+0x30,0x34,0x38,0x5f,0x36,0x35,0x35,0x33,0x37,0x5f,0x76,0x33,
+0x5f,0x63,0x61,0x30,0x1e,0x17,0x0d,0x31,0x39,0x31,0x30,0x32,
+0x39,0x30,0x33,0x31,0x32,0x31,0x39,0x5a,0x17,0x0d,0x32,0x34,
+0x31,0x30,0x32,0x37,0x30,0x33,0x31,0x32,0x31,0x39,0x5a,0x30,
+0x2a,0x31,0x28,0x30,0x26,0x06,0x03,0x55,0x04,0x03,0x0c,0x1f,
+0x49,0x4d,0x47,0x31,0x5f,0x31,0x5f,0x73,0x68,0x61,0x32,0x35,
+0x36,0x5f,0x32,0x30,0x34,0x38,0x5f,0x36,0x35,0x35,0x33,0x37,
+0x5f,0x76,0x33,0x5f,0x75,0x73,0x72,0x30,0x82,0x01,0x22,0x30,
+0x0d,0x06,0x09,0x2a,0x86,0x48,0x86,0xf7,0x0d,0x01,0x01,0x01,
+0x05,0x00,0x03,0x82,0x01,0x0f,0x00,0x30,0x82,0x01,0x0a,0x02,
+0x82,0x01,0x01,0x00,0xc9,0x9f,0x3a,0x2d,0xd1,0xb3,0x18,0x72,
+0xb5,0x34,0xf8,0xdc,0x30,0x8d,0x69,0xae,0x20,0xed,0x11,0xeb,
+0x64,0x9f,0xf6,0xd3,0x58,0x19,0x36,0xe2,0x0a,0xdf,0x05,0xc6,
+0x38,0x9c,0xd9,0xec,0x9c,0x88,0xe4,0x17,0x27,0x53,0xdb,0x4e,
+0xce,0x59,0x9d,0x65,0xd4,0x5d,0x53,0x1b,0x41,0x81,0x3a,0x4f,
+0xf0,0x69,0xf4,0xe6,0x8b,0x02,0x3b,0x4d,0xb0,0xef,0x2e,0xcf,
+0x05,0x76,0xbf,0x55,0x6e,0xd8,0x1e,0xf3,0x63,0x0e,0xcf,0xeb,
+0x8f,0x05,0x6e,0x9e,0x01,0x24,0x4b,0x81,0x8f,0xc7,0x13,0xb0,
+0x51,0x1d,0x61,0x97,0x30,0xec,0x16,0x5d,0xbd,0xbf,0x5c,0x0f,
+0x1c,0xc5,0x49,0xed,0xa0,0xe5,0x3d,0x64,0x98,0x27,0x95,0xe6,
+0x36,0x74,0x46,0xbb,0x2a,0x1a,0x6b,0x0c,0x76,0x47,0xb8,0x4e,
+0xc3,0xc7,0x02,0x6e,0xfa,0x76,0x0e,0x6b,0xa9,0xff,0x17,0xd9,
+0xf1,0xab,0x8d,0xaf,0x0e,0xd5,0x26,0xea,0x63,0x8c,0x06,0xf4,
+0xcb,0x18,0xa4,0x34,0xd1,0xd2,0xdf,0xd7,0xc8,0xc3,0x8c,0x37,
+0x0a,0x11,0x6a,0xcc,0xa1,0x95,0x9f,0x89,0xeb,0xb7,0x4d,0x8b,
+0x19,0x56,0x07,0x82,0xc9,0x98,0x34,0xe2,0xf5,0x64,0xed,0x82,
+0xa3,0xc6,0xd5,0xd2,0x65,0x6b,0x52,0xaa,0x8e,0xa0,0xc7,0x5f,
+0x49,0xee,0xde,0x51,0x2b,0x2e,0x2a,0x1f,0x99,0xc9,0x00,0xf8,
+0x20,0xc8,0x3c,0xc1,0x37,0x48,0x7d,0x24,0x83,0x1a,0x55,0xbb,
+0xdb,0x30,0xf5,0x29,0x4d,0x62,0x99,0xdb,0x36,0xf8,0x1b,0x0a,
+0xc4,0xc0,0xde,0x72,0xab,0x89,0x5f,0x2d,0x34,0x11,0x3e,0xc5,
+0xa4,0xa2,0xc0,0x61,0x91,0x31,0x5c,0x53,0x02,0x03,0x01,0x00,
+0x01,0xa3,0x7b,0x30,0x79,0x30,0x09,0x06,0x03,0x55,0x1d,0x13,
+0x04,0x02,0x30,0x00,0x30,0x2c,0x06,0x09,0x60,0x86,0x48,0x01,
+0x86,0xf8,0x42,0x01,0x0d,0x04,0x1f,0x16,0x1d,0x4f,0x70,0x65,
+0x6e,0x53,0x53,0x4c,0x20,0x47,0x65,0x6e,0x65,0x72,0x61,0x74,
+0x65,0x64,0x20,0x43,0x65,0x72,0x74,0x69,0x66,0x69,0x63,0x61,
+0x74,0x65,0x30,0x1d,0x06,0x03,0x55,0x1d,0x0e,0x04,0x16,0x04,
+0x14,0x6a,0x99,0xec,0x1c,0xd0,0x7f,0x92,0x9a,0xa0,0x2e,0x7f,
+0x20,0x84,0x01,0xbd,0xb2,0xe5,0xfc,0x9d,0x72,0x30,0x1f,0x06,
+0x03,0x55,0x1d,0x23,0x04,0x18,0x30,0x16,0x80,0x14,0x1b,0x29,
+0x65,0x4b,0x6c,0xba,0x80,0x39,0xfe,0xc5,0x44,0xd8,0x6c,0xd2,
+0xb7,0x27,0x9e,0x6a,0xac,0x32,0x30,0x0d,0x06,0x09,0x2a,0x86,
+0x48,0x86,0xf7,0x0d,0x01,0x01,0x0b,0x05,0x00,0x03,0x82,0x01,
+0x01,0x00,0x39,0xec,0xf4,0xdb,0x67,0xa5,0x5a,0x89,0x01,0xa3,
+0x7c,0xd2,0x0c,0x2d,0xa9,0x9c,0xa5,0xfe,0x3c,0x7a,0xb6,0x32,
+0xab,0x29,0x02,0x94,0xad,0xcc,0x8e,0x8c,0x5e,0xe2,0x62,0x8f,
+0xf0,0x68,0x22,0xfe,0xca,0x74,0x8f,0xf8,0x34,0x94,0x08,0xc6,
+0x71,0x91,0x65,0xba,0x75,0x45,0x6f,0x25,0x2b,0x53,0x0d,0xb9,
+0x61,0xbb,0xde,0x60,0xf1,0x6c,0x9c,0xa7,0x6c,0x0d,0x6b,0x1d,
+0x48,0xdf,0xd8,0x97,0x10,0x4b,0x14,0xfb,0xa9,0xb2,0xe2,0xd0,
+0xd6,0x96,0x28,0x09,0x4d,0x14,0x5f,0x81,0xcd,0x9f,0xd8,0x22,
+0x01,0xcf,0xf8,0x4c,0x34,0x44,0x8e,0x26,0x2c,0xaf,0x4d,0x57,
+0x21,0x79,0xb1,0x95,0xbf,0xe8,0x67,0x3d,0x44,0x51,0xcd,0x94,
+0x50,0xcd,0xba,0xe1,0xf3,0xe7,0x11,0x3a,0xcd,0x4e,0xeb,0x8d,
+0x66,0xec,0x5b,0x2b,0x26,0x3c,0xd7,0xf0,0x1e,0xf7,0x35,0x92,
+0xbd,0xe4,0x5c,0x3a,0xc2,0xd0,0xb4,0x58,0xa0,0x66,0x4d,0xd1,
+0xde,0xb0,0x22,0xbf,0x4c,0xf5,0xd9,0x51,0xfc,0xc6,0xc3,0xd6,
+0x5c,0x13,0xe6,0x93,0x31,0xa4,0xe1,0xca,0xd2,0x6f,0x0a,0x9a,
+0xdf,0x7c,0x56,0x65,0x4b,0x88,0x2b,0x28,0x6e,0x44,0x9a,0x43,
+0x49,0x55,0xab,0x87,0xdf,0xfa,0x3d,0x14,0x32,0xb2,0xd1,0xcf,
+0x1e,0xe2,0xc9,0x88,0x53,0x0e,0xcb,0x40,0x3d,0x98,0x47,0x53,
+0xf8,0x32,0x5a,0x45,0x7e,0x88,0x04,0x8d,0xb3,0x17,0x62,0x69,
+0x3e,0xa2,0x2a,0x72,0x9f,0xc5,0xab,0xd0,0x5d,0x8c,0xbf,0xab,
+0x7e,0xe7,0x6e,0xf4,0xe0,0x53,0x71,0x05,0xd0,0x18,0x3a,0xd0,
+0x20,0xb9,0xe6,0x1f,0x90,0xdb]
+
+class offsets(object):
+  sig  = []
+  cert = []
+  def __init__(self, path):
+    with open(path, "r") as f_pout:
+      for line in f_pout:
+        if line.find('Certificate Offset') != -1:
+          x = line.split()
+          self.cert.append(x[0])
+        if line.find('Signature Offset') != -1:
+          x = line.split()
+          self.sig.append(x[0])
+
+class hab_data(object):
+  def __init__(self, name, data):
+    if name == "spl":
+      self.size = 3912
+      self.magic = b'\xd4\x00\x58\x43'
+      self.hab_offset = data.index(self.magic)
+    if name == "fit":
+      self.size = 3928
+      self.magic = b'\xd4\x00\x68\x43'
+      self.hab_offset = data.index(self.magic)
+
+    with open(TMP_HAB_FILE, "wb") as f_tmp:
+      f_tmp.write(data[self.hab_offset : self.hab_offset+self.size])
+
+    if (os.path.isdir('output')):
+      shutil.rmtree('output')
+
+    cmd = ["./release/code/hab_csf_parser/csf_parser", "-d", "-c", TMP_HAB_FILE]
+    print(cmd)
+    p = subprocess.Popen(cmd)
+    p.wait()
+
+    self.parsed_offset = offsets("output/parsed_output.txt")
+    self.hab_name = name
+    self.srk_table_offset = int(self.parsed_offset.cert[0], 16)
+    self.csf_cert_offset  = int(self.parsed_offset.cert[1], 16)
+    self.img_cert_offset  = int(self.parsed_offset.cert[2], 16)
+    self.csf_sig_offset   = int(self.parsed_offset.sig[0], 16) + SIG_OFFSET_IN_CMS
+    self.img_sig_offset   = int(self.parsed_offset.sig[1], 16) + SIG_OFFSET_IN_CMS
+
+  def write_tosign_data(self, key):
+    if key == "csf":
+      sig_path = "output/sig0.bin"
+    if key == "img":
+      sig_path = "output/sig1.bin"
+
+    tosign_fname = self.hab_name + "_" + key + "_tosign"
+    with open(sig_path, "rb") as f_sig, open(tosign_fname, "wb") as f_tosign:
+      f_sig.seek(128)
+      tosign_data = f_sig.read(106)
+      f_tosign.write(b'\x31')
+      f_tosign.write(tosign_data)
+
+def extract_sign_data(args):
+  with open(args.image, "rb") as f_img:
+    data = f_img.read()
+
+  if is_spl:
+    hab_spl = hab_data("spl", data)
+    hab_spl.write_tosign_data("csf")
+    hab_spl.write_tosign_data("img")
+
+  if is_bootloader:
+    hab_fit = hab_data("fit", data)
+    hab_fit.write_tosign_data("csf")
+    hab_fit.write_tosign_data("img")
+
+def write_data(f_tgt, data, offset):
+  f_tgt.seek(offset, 0)
+  f_tgt.write(data)
+
+def combine_sign_data(args):
+  with open(args.image, "rb+") as f_img:
+    data = f_img.read()
+
+    if is_spl:
+      if args.sig_spl_csf is None or args.sig_spl_img is None:
+        raise ValueError('Missing signature for SPL')
+      hab_spl = hab_data("spl", data)
+      with open(args.sig_spl_csf, "rb") as f_csfsig, open(args.sig_spl_img, "rb") as f_imgsig:
+        print('cert csf write into offset:    {}'.format(int(hab_spl.hab_offset) + int(hab_spl.csf_cert_offset)))
+        write_data(f_img, bytearray(OFFICIAL_CSF_CERT),  int(hab_spl.hab_offset) + int(hab_spl.csf_cert_offset))
+        print('sig_spl_csf write into offset: {}'.format(int(hab_spl.hab_offset) + int(hab_spl.csf_sig_offset)))
+        write_data(f_img, f_csfsig.read(),               int(hab_spl.hab_offset) + int(hab_spl.csf_sig_offset))
+        print('cert img write into offset:    {}'.format(int(hab_spl.hab_offset) + int(hab_spl.img_cert_offset)))
+        write_data(f_img, bytearray(OFFICIAL_IMG_CERT),  int(hab_spl.hab_offset) + int(hab_spl.img_cert_offset))
+        print('sig_spl_img write into offset: {}'.format(int(hab_spl.hab_offset) + int(hab_spl.img_sig_offset)))
+        write_data(f_img, f_imgsig.read(),               int(hab_spl.hab_offset) + int(hab_spl.img_sig_offset))
+
+    if is_bootloader:
+      if args.sig_fit_csf is None or args.sig_fit_img is None:
+        raise ValueError('Missing signature for bootloader')
+      hab_fit = hab_data("fit", data)
+      with open(args.sig_fit_csf, "rb") as f_csfsig, open(args.sig_fit_img, "rb") as f_imgsig:
+        print('cert csf write into offset:    {}'.format(int(hab_fit.hab_offset) + int(hab_fit.csf_cert_offset)))
+        write_data(f_img, bytearray(OFFICIAL_CSF_CERT),  int(hab_fit.hab_offset) + int(hab_fit.csf_cert_offset))
+        print('sig_fit_csf write into offset: {}'.format(int(hab_fit.hab_offset) + int(hab_fit.csf_sig_offset)))
+        write_data(f_img, f_csfsig.read(),               int(hab_fit.hab_offset) + int(hab_fit.csf_sig_offset))
+        print('cert img write into offset:    {}'.format(int(hab_fit.hab_offset) + int(hab_fit.img_cert_offset)))
+        write_data(f_img, bytearray(OFFICIAL_IMG_CERT),  int(hab_fit.hab_offset) + int(hab_fit.img_cert_offset))
+        print('sig_fit_img write into offset: {}'.format(int(hab_fit.hab_offset) + int(hab_fit.img_sig_offset)))
+        write_data(f_img, f_imgsig.read(),               int(hab_fit.hab_offset) + int(hab_fit.img_sig_offset))
+
+def main(argv):
+  global is_spl
+  global is_bootloader
+
+  parser = argparse.ArgumentParser()
+  subparsers = parser.add_subparsers(title='subcommands')
+  sub_parser = subparsers.add_parser('extract_sign_data', help='Extract CMS SignedAttr files for CA server')
+  sub_parser.add_argument('--image', help='Inputed signed image', required=True)
+  sub_parser.set_defaults(func=extract_sign_data)
+
+  sub_parser = subparsers.add_parser('combine_sign_data', help='Replace certificate/signature into image')
+  sub_parser.add_argument('--image', help='Inputed signed image', required=True)
+  sub_parser.add_argument('--sig_spl_csf', help='Inputed SPL CSF signature get from CA Server', required=False)
+  sub_parser.add_argument('--sig_spl_img', help='Inputed SPL IMG signature get from CA Server', required=False)
+  sub_parser.add_argument('--sig_fit_csf', help='Inputed Bootloader CSF signature get from CA Server', required=False)
+  sub_parser.add_argument('--sig_fit_img', help='Inputed Bootloader FIT signature get from CA Server', required=False)
+  sub_parser.set_defaults(func=combine_sign_data)
+
+  args = parser.parse_args(argv)
+  if os.path.basename(args.image).startswith("spl"):
+    is_spl = 1
+  if os.path.basename(args.image).startswith("bootloader"):
+    is_bootloader = 1
+
+  args.func(args)
+
+if __name__ == '__main__':
+  main(sys.argv[1:])
