8a0b444 George.Huang 2020-09-03

AOS-321: imx8m: align mem_info.img size to 1MB

Align mem_info.img size with partition size will help
clean-up the tail of this partition, and is not necessary
to erase partiton before flashing it.

mem_info partition size is defined in:
  device/idtech/common/partition/device-partitions-14.4GB-ab.bpt
  device/idtech/common/partition/device-partitions-14.4GB-ab-dual-bootloader.bpt

Change-Id: Ifc80e9df28c45956847ec4850223db19d475f957

diff --git a/generate_meminfo.py b/generate_meminfo.py
index bc4508a..69a0d84 100644
--- a/generate_meminfo.py
+++ b/generate_meminfo.py
@@ -66,7 +66,7 @@ struct dram_timing_info {
 
 #TODO find a way to update this, .o will be erased once we perform next u-boot build
 DRAM_TIMING_DATA = [['board_info-a300_evt-0_devboard_evt-1_ktc2g.img', '../../nxp-opensource/uboot-imx/board/freescale/imx8mq_a300/ddr/lpddr4_timing_2g.c', './a300-lpddr4_timing_2g.o'],
-                    ['board_info-imx8mq_evt-0_evk_evk-0_mic3g.img', '../../nxp-opensource/uboot-imx/board/freescale/imx8mq_evk/lpddr4_timing.c', './mq-evk-lpddr4_timing.o'],
+                    ['board_info-imx8mq_evt-0_evk_evk-0_mic3g.img', '../../nxp-opensource/uboot-imx/board/freescale/imx8mq_evk/ddr/lpddr4_timing.c', './mq-evk-lpddr4_timing.o'],
                     ['board_info-a100_evt-0_devboard_evt-0_ktc2g.img', '../../nxp-opensource/uboot-imx/board/freescale/imx8mn_a100/lpddr4_timing.c', './a100-lpddr4_timing.o'],
                     ['board_info-imx8mn_evt-0_evk_evk-0_mic2g.img', '../../nxp-opensource/uboot-imx/board/freescale/imx8mn_evk/ddr4_timing.c', './mn-evk-ddr4_timing.o'],
                     ['board_info-imx8mp_evt-0_evk_evk-0_mic6g.img', '../../nxp-opensource/uboot-imx/board/freescale/imx8mp_evk/lpddr4_timing.c', './mp-evk-lpddr4_timing.o'],
@@ -260,6 +260,7 @@ def make_meminfo_obj(dram_code, dram_obj, mm_size_k):
 def main(argv):
   mem_root_hdr = struct.pack('I', len(DRAM_TIMING_DATA))
   mem_root_body = bytearray()
+  mem_root_tail = bytearray()
   offset = 2 # first 2 blocks for root header
 
   m_txt = open("./mem_info.txt", "w")
@@ -292,9 +293,14 @@ def main(argv):
 
   m_txt.close()
 
+  # padding the tail to 1MByte
+  padding = int(BLOCK_SIZE*2048 - len(mem_root_hdr) - len(mem_root_body))
+  mem_root_tail += struct.pack(str(padding) + 'x')
+
   with open("./mem_info.img", "w") as f:
     f.write(mem_root_hdr)
     f.write(mem_root_body)
+    f.write(mem_root_tail)
 
 if __name__ == '__main__':
   main(sys.argv[1:])
