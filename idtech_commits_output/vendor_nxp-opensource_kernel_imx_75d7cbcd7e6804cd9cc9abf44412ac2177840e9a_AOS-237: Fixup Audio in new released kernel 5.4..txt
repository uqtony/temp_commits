75d7cbcd7e68 Arthur Chen 2020-07-06

AOS-237: Fixup Audio in new released kernel 5.4.

    - enable sound support in DTS.
    - change drivers boot order form that "imx-rt5640" is early than "rt5640"
    to be that "rt5640" is early than "imx-rt5640".
    - patch imx-rt5640 for linux kernel 5.4.

Change-Id: I1159ca6c0775f4504d2896964fc4b463c14e96cc

diff --git a/arch/arm64/boot/dts/freescale/idt_a300_evt-0_devboard_evt-0.dtsi b/arch/arm64/boot/dts/freescale/idt_a300_evt-0_devboard_evt-0.dtsi
index 043efe086c21..f29ccb4d57f9 100644
--- a/arch/arm64/boot/dts/freescale/idt_a300_evt-0_devboard_evt-0.dtsi
+++ b/arch/arm64/boot/dts/freescale/idt_a300_evt-0_devboard_evt-0.dtsi
@@ -142,7 +142,7 @@ sound-rt5640 {
 			"Line Out", "LOUTR",
 			"MICBIAS1", "Headphone Mic",
 			"IN2P", "MICBIAS1";
-		status = "disabled"; /* TODO: Change to "okay" once driver will be fixed */
+		status = "okay";
 	};
 
 	resmem: reserved-memory {
diff --git a/sound/soc/codecs/rt5640.c b/sound/soc/codecs/rt5640.c
index dd52b892bf0f..15b71f003b87 100644
--- a/sound/soc/codecs/rt5640.c
+++ b/sound/soc/codecs/rt5640.c
@@ -2886,12 +2886,14 @@ static int rt5640_i2c_probe(struct i2c_client *i2c,
 				GFP_KERNEL);
 	if (NULL == rt5640)
 		return -ENOMEM;
+
 	i2c_set_clientdata(i2c, rt5640);
 
 	if (i2c->dev.of_node) {
 		ret = rt5640_parse_dt(rt5640, i2c->dev.of_node);
 		if (ret)
 			return ret;
+
 	} else
 		rt5640->ldo1_en = -EINVAL;
 
@@ -2964,7 +2966,6 @@ static int rt5640_i2c_probe(struct i2c_client *i2c,
 static struct i2c_driver rt5640_i2c_driver = {
 	.driver = {
 		.name = "rt5640",
-		.probe_type = PROBE_PREFER_ASYNCHRONOUS,
 		.acpi_match_table = ACPI_PTR(rt5640_acpi_match),
 		.of_match_table = of_match_ptr(rt5640_of_match),
 	},
diff --git a/sound/soc/fsl/imx-rt5640.c b/sound/soc/fsl/imx-rt5640.c
index d719a089a199..c9c389d5d966 100644
--- a/sound/soc/fsl/imx-rt5640.c
+++ b/sound/soc/fsl/imx-rt5640.c
@@ -16,6 +16,8 @@
 #include <linux/slab.h>
 #include <linux/gpio/consumer.h>
 #include <linux/of_device.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
 #include <sound/soc.h>
 #include <sound/pcm_params.h>
 #include <sound/pcm.h>
@@ -298,6 +300,7 @@ static int imx_rt5640_probe(struct platform_device *pdev)
 	struct platform_device *cpu_pdev;
 	struct device_node *asrc_np = NULL;
 	struct platform_device *asrc_pdev = NULL;
+	struct snd_soc_dai_link_component *comp;
 	int ret;
 	u32 width;
 
@@ -305,6 +308,12 @@ static int imx_rt5640_probe(struct platform_device *pdev)
 	if (!priv)
 		return -ENOMEM;
 
+	comp = devm_kzalloc(&pdev->dev, 3 * sizeof(*comp), GFP_KERNEL);
+	if (!comp) {
+		ret = -ENOMEM;
+		goto fail;
+	}
+
 	cpu_np = of_parse_phandle(pdev->dev.of_node, "audio-cpu", 0);
 	if (!cpu_np) {
 		dev_err(&pdev->dev, "audio dai phandle missing or invalid
");
@@ -335,15 +344,24 @@ static int imx_rt5640_probe(struct platform_device *pdev)
 	if (of_find_property(pdev->dev.of_node, "fsl,tdm", NULL))
 		priv->tdm_mode = true;
 
-	priv->dai[0].name = "rt5640",
-	priv->dai[0].stream_name = "Audio",
-	priv->dai[0].codecs->dai_name = "rt5640-aif1",
+	priv->dai[0].cpus	= &comp[0];
+	priv->dai[0].codecs	= &comp[1];
+	priv->dai[0].platforms	= &comp[2];
+	priv->dai[0].num_cpus	= 1;
+	priv->dai[0].num_codecs	= 1;
+	priv->dai[0].num_platforms	= 1;
+	priv->dai[0].name = "rt5640";
+	priv->dai[0].stream_name = "Audio";
+	priv->dai[0].codecs->dai_name = "rt5640-aif1";
 	priv->dai[0].ops = &imx_aif_ops,
 	priv->dai[0].codecs->of_node = codec_np;
+	priv->dai[0].cpus->of_node = cpu_np;
 	priv->dai[0].cpus->dai_name = dev_name(&cpu_pdev->dev);
 	priv->dai[0].platforms->of_node = cpu_np;
 	priv->dai[0].dpcm_playback = 1;
 	priv->dai[0].dpcm_capture = 1;
+	priv->dai[0].dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			       SND_SOC_DAIFMT_CBM_CFM;
 	priv->card.dai_link = &priv->dai[0];
 	priv->card.num_links = 1;
 	priv->card.dapm_routes = audio_map;
@@ -408,6 +426,7 @@ static int imx_rt5640_probe(struct platform_device *pdev)
 	if (ret)
 		goto fail;
 
+	platform_set_drvdata(pdev, &priv->card);
 	snd_soc_card_set_drvdata(&priv->card, priv);
 
 	ret = devm_snd_soc_register_card(&pdev->dev, &priv->card);
@@ -441,7 +460,25 @@ static struct platform_driver imx_rt5640_driver = {
 	},
 	.probe = imx_rt5640_probe,
 };
-module_platform_driver(imx_rt5640_driver);
+
+static struct platform_driver * const imx_codec_drivers[] = {
+	&imx_rt5640_driver,
+};
+
+static int __init imx_rt5640_driver_init(void)
+{
+	return platform_register_drivers(imx_codec_drivers,
+					 ARRAY_SIZE(imx_codec_drivers));
+};
+
+static void __exit imx_rt5640_driver_exit(void)
+{
+	platform_unregister_drivers(imx_codec_drivers,
+				    ARRAY_SIZE(imx_codec_drivers));
+};
+
+late_initcall(imx_rt5640_driver_init);
+module_exit(imx_rt5640_driver_exit);
 
 MODULE_AUTHOR("Freescale Semiconductor, Inc.");
 MODULE_DESCRIPTION("Freescale i.MX rt5640 ASoC machine driver");
