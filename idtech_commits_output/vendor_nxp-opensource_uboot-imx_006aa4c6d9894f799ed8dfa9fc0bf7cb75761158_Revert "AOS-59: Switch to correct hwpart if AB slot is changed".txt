006aa4c6d9 George.Huang 2020-04-16

Revert "AOS-59: Switch to correct hwpart if AB slot is changed"

This reverts commit 09a425e154e7df533daef2f5482235e33f8792af.

Change-Id: I511400d0601d9f8b465c49533d0e496524871988

diff --git a/drivers/fastboot/fb_fsl/fb_fsl_boot.c b/drivers/fastboot/fb_fsl/fb_fsl_boot.c
index 4a55d71138..61a211ad24 100644
--- a/drivers/fastboot/fb_fsl/fb_fsl_boot.c
+++ b/drivers/fastboot/fb_fsl/fb_fsl_boot.c
@@ -54,11 +54,6 @@
 #define FDT_PART_NAME "dtbo"
 #endif
 
-#ifdef IDT_DUAL_BOOTLOADER
-#include <imximage.h>
-#include <memalign.h>
-#endif
-
 /* Offset (in u32's) of start and end fields in the zImage header. */
 #define ZIMAGE_START_ADDR	10
 #define ZIMAGE_END_ADDR	11
@@ -638,132 +633,6 @@ find_out:
 	return fdt_idx;
 }
 
-#ifdef IDT_DUAL_BOOTLOADER
-
-extern ulong bootloader_mmc_offset(void);
-
-int check_uboot_header(struct mmc *mmc, unsigned long sector) {
-	void *buf;
-	flash_header_v2_t *headerv2;
-	unsigned long count = 0;
-	buf = malloc_cache_aligned(mmc_get_blk_desc(mmc)->blksz);
-	if (buf == NULL) {
-		printf("ERROR: %s: calloc failed!
", __func__);
-		return -1;
-	}
-	memset(buf, 0, mmc_get_blk_desc(mmc)->blksz);
-	count = blk_dread(mmc_get_blk_desc(mmc), sector, 1, buf);
-	if (count == 0) {
-		printf("ERROR: Failed to read bootloader header
");
-		free(buf);
-		return -1;
-	}
-	headerv2 = buf;
-	if (headerv2->header.tag == IVT_HEADER_TAG) {
-		free(buf);
-		return 0;
-	}
-	free(buf);
-	return -1;
-}
-
-/* copied from common/spl/spl_mmc.c */
-/* copied from board/freescale/imx8mn_evk/spl.c */
-#define UBOOT_RAW_SECTOR_OFFSET 0x40
-unsigned long __weak mmc_get_uboot_raw_sector(struct mmc *mmc, size_t blk_offset_uboot)
-{
-	if (blk_offset_uboot == 0)
-		return CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR - UBOOT_RAW_SECTOR_OFFSET;
-
-	return CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR;
-}
-
-int check_bootloader_header(struct mmc *mmc, unsigned long sector) {
-	struct image_header *header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
-	         sizeof(struct image_header));
-	unsigned long count = 0;
-	count = blk_dread(mmc_get_blk_desc(mmc), sector, 1, header);
-	if (count == 0) {
-		printf("ERROR: Failed to read bootloader header
");
-		return -1;
-	}
-	if (IS_ENABLED(CONFIG_SPL_LOAD_FIT) && image_get_magic(header) == FDT_MAGIC)
-		return 0;
-
-	return -1;
-}
-
-int check_hwpart_with_current_slot(void) {
-	int mmcc = mmc_get_env_dev();
-	struct blk_desc *dev_desc = NULL;
-	struct mmc *mmc;
-	int hwpart = -1, slot_part = -1;
-	size_t target_slot;
-	size_t blk_offset_uboot = 0, blk_offset_bootloader = 0;
-	AvbABData ab_data, ab_data_orig;
-
-	mmc = find_mmc_device(mmcc);
-	if (!mmc) {
-		printf("ERROR: boota: cannot find '%d' mmc device
", mmcc);
-		return -1;
-	}
-	dev_desc = blk_get_dev("mmc", mmcc);
-	if (NULL == dev_desc) {
-		printf("ERROR: Block device MMC %d not supported
", mmcc);
-		return -1;
-	}
-	if (mmc_init(mmc)) {
-		printf("ERROR: mmc%d init failed
", mmcc);
-		return -1;
-	}
-	if (fsl_load_metadata_dual_uboot(dev_desc, &ab_data,
-					&ab_data_orig)) {
-		printf("ERROR: fsl_load_metadata_dual_uboot failed
");
-		return -1;
-	}
-
-	target_slot =
-	    (ab_data.slots[1].priority > ab_data.slots[0].priority) ? 1 : 0;
-	slot_part = target_slot + 1; /* (target_slot + 1) equals hwpart */
-	if (slot_part != FASTBOOT_MMC_BOOT_PARTITION_ID && slot_part != FASTBOOT_MMC_BOOT1_PARTITION_ID) {
-		printf("ERROR: Get the wrong slot_part=%d
", slot_part);
-		return -1;
-	}
-	hwpart = (mmc->part_config >> 3) & PART_ACCESS_MASK;
-	if (hwpart != FASTBOOT_MMC_BOOT_PARTITION_ID && hwpart != FASTBOOT_MMC_BOOT1_PARTITION_ID) {
-		printf("WARN: Get the unexpected hwpart=%d
", hwpart);
-		return -1;
-	}
-	printf("hwpart=%d, slot_part=%d
", hwpart, slot_part);
-	if (hwpart == slot_part) {
-		/* no more action */
-		return -1;
-	}
-	/* switch to slot_part */
-	mmc_switch_part(mmc, slot_part);
-
-	/* make sure uboot header equals IVT_HEADER_TAG (0x1d) */
-	blk_offset_uboot = (size_t)(bootloader_mmc_offset() / dev_desc->blksz);
-	printf("check_uboot_header at offset=0x%x blocks with hwpart=%d ...
", (unsigned int)blk_offset_uboot, slot_part);
-	if (check_uboot_header(mmc, blk_offset_uboot) != 0) {
-		printf("ERROR: Can not find valid uboot header with slot_part=%d
", slot_part);
-		return -1;
-	}
-	/* make sure bootloader header equals FDT_MAGIC (0xd00dfeed) */
-	blk_offset_bootloader = (size_t)mmc_get_uboot_raw_sector(mmc, blk_offset_uboot);
-	printf("check_bootloader_header at offset=0x%x blocks with hwpart=%d ...
", (unsigned int)blk_offset_bootloader, slot_part);
-	if (check_bootloader_header(mmc, blk_offset_bootloader) != 0) {
-		printf("ERROR: Can not find valid bootloader magic with slot_part=%d
", slot_part);
-		return -1;
-	}
-	/* store slot_part */
-	printf("Force to set hwpart from %d to %d due to the changed slot
", hwpart, slot_part);
-	mmc_set_part_conf(mmc, (u8)1, (u8)slot_part, (u8)0);
-	printf("Need to reboot
");
-	return 0;
-}
-#endif
-
 int do_boota(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[]) {
 
 	ulong addr = 0;
@@ -787,11 +656,6 @@ int do_boota(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[]) {
 		goto fail;
 	}
 
-#ifdef IDT_DUAL_BOOTLOADER
-	if (check_hwpart_with_current_slot() == 0)
-		do_reset(NULL, 0, 0, NULL);
-#endif
-
 	/* get bootmode, default to boot "boot" */
 	if (argc > 1) {
 		is_recovery_mode =
diff --git a/include/configs/imx8mn_evk.h b/include/configs/imx8mn_evk.h
index 6d2046adf1..ac91d5b11c 100644
--- a/include/configs/imx8mn_evk.h
+++ b/include/configs/imx8mn_evk.h
@@ -337,4 +337,3 @@
 #endif
 
 #endif
-#define IDT_DUAL_BOOTLOADER
diff --git a/lib/avb/fsl/fsl_avb_ab_flow.c b/lib/avb/fsl/fsl_avb_ab_flow.c
index ab1448c46d..356d840c45 100644
--- a/lib/avb/fsl/fsl_avb_ab_flow.c
+++ b/lib/avb/fsl/fsl_avb_ab_flow.c
@@ -63,7 +63,7 @@ bool fsl_slot_is_bootable(AvbABSlotData* slot) {
 }
 #endif /* CONFIG_DUAL_BOOTLOADER || !CONFIG_SPL_BUILD */
 
-#if (defined(CONFIG_DUAL_BOOTLOADER) && defined(CONFIG_SPL_BUILD)) || defined(IDT_DUAL_BOOTLOADER)
+#if defined(CONFIG_DUAL_BOOTLOADER) && defined(CONFIG_SPL_BUILD)
 
 #define FSL_AB_METADATA_MISC_PARTITION_OFFSET 2048
 #define PARTITION_NAME_LEN 13
@@ -214,10 +214,6 @@ int fsl_load_metadata_dual_uboot(struct blk_desc *dev_desc,
 	}
 }
 
-#endif // (CONFIG_DUAL_BOOTLOADER && CONFIG_SPL_BUILD) || IDT_DUAL_BOOTLOADER
-
-#if defined(CONFIG_DUAL_BOOTLOADER) && defined(CONFIG_SPL_BUILD)
-
 #if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
 static int spl_verify_rbidx(struct mmc *mmc, AvbABSlotData *slot,
 			struct spl_image_info *spl_image)
