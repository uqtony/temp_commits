e9a99d4959 George.Huang 2020-09-14

Revert "MA-15814 Check 'successful_boot' flag before marking unbootable"

This reverts commit c7a3cec998ac419ad715a5f19bcb845ab3703811.

Reason for revert:
- corrupt the current spl/booloader will cause device keep rebooting with this change
- it's still better to switch slots to retry

Change-Id: I374508f340bd2083d5168373df146e05b77b0888

diff --git a/lib/avb/fsl/fsl_avb_ab_flow.c b/lib/avb/fsl/fsl_avb_ab_flow.c
index e9f26477e7..ac1d5fea14 100644
--- a/lib/avb/fsl/fsl_avb_ab_flow.c
+++ b/lib/avb/fsl/fsl_avb_ab_flow.c
@@ -441,19 +441,11 @@ int mmc_load_image_raw_sector_dual_uboot(struct spl_image_info *spl_image,
 
 		/* Set current slot to unbootable if load/verify fail. */
 		if (ret != 0) {
-			/* Reboot if current slot has booted succefully before, this prevents
-			 * slot been marked as "unbootable" due to some random failures (like
-			 * eMMC/DRAM access error at some critical temperature).
-			 */
-			if (ab_data.slots[target_slot].successful_boot)
-				do_reset(NULL, 0, 0, NULL);
-			else {
-				printf("Load or verify bootloader%s fail, setting unbootable..
",
-				       slot_suffixes[target_slot]);
-				fsl_slot_set_unbootable(&ab_data.slots[target_slot]);
-				/* Switch to another slot. */
-				target_slot = (target_slot == 1 ? 0 : 1);
-			}
+			printf("Load or verify bootloader%s fail, setting unbootable..
",
+			       slot_suffixes[target_slot]);
+			fsl_slot_set_unbootable(&ab_data.slots[target_slot]);
+			/* Switch to another slot. */
+			target_slot = (target_slot == 1 ? 0 : 1);
 		} else {
 			slot_index_to_boot = target_slot;
 			n = 2;
@@ -717,28 +709,20 @@ AvbABFlowResult avb_flow_dual_uboot(AvbABOps* ab_ops,
 	}
 
 	if (set_slot_unbootable) {
-		/* Reboot if current slot has booted succefully before, this prevents
-		 * slot been marked as "unbootable" due to some random failures (like
-		 * eMMC/DRAM access error at some critical temperature).
+		avb_errorv("Error verifying slot ",
+			   slot_suffixes[target_slot],
+			   " with result ",
+			   avb_slot_verify_result_to_string(verify_result),
+			   " - setting unbootable.
",
+			   NULL);
+		fsl_slot_set_unbootable(&ab_data.slots[target_slot]);
+
+		/* Only the slot chosen by SPL will be verified here so we
+		 * return AVB_AB_FLOW_RESULT_ERROR_NO_BOOTABLE_SLOTS if the
+		 * slot should be set unbootable.
 		 */
-		if (ab_data.slots[target_slot].successful_boot)
-			do_reset(NULL, 0, 0, NULL);
-		else {
-			avb_errorv("Error verifying slot ",
-				   slot_suffixes[target_slot],
-				   " with result ",
-				   avb_slot_verify_result_to_string(verify_result),
-				   " - setting unbootable.
",
-				   NULL);
-			fsl_slot_set_unbootable(&ab_data.slots[target_slot]);
-
-			/* Only the slot chosen by SPL will be verified here so we
-			 * return AVB_AB_FLOW_RESULT_ERROR_NO_BOOTABLE_SLOTS if the
-			 * slot should be set unbootable.
-			 */
-			ret = AVB_AB_FLOW_RESULT_ERROR_NO_BOOTABLE_SLOTS;
-			goto out;
-		}
+		ret = AVB_AB_FLOW_RESULT_ERROR_NO_BOOTABLE_SLOTS;
+		goto out;
 	}
 
 	/* Update stored rollback index only when the slot has been marked
@@ -1045,26 +1029,14 @@ AvbABFlowResult avb_ab_flow_fast(AvbABOps* ab_ops,
 		}
 
 		if (set_slot_unbootable) {
-			/* Reboot if current slot has booted succefully before, this prevents
-			 * slot been marked as "unbootable" due to some random failures (like
-			 * eMMC/DRAM access error at some critical temperature).
-			 */
-			if (ab_data.slots[target_slot].successful_boot)
-				do_reset(NULL, 0, 0, NULL);
-			else {
-				avb_errorv("Error verifying slot ",
-					   slot_suffixes[target_slot],
-					   " with result ",
-					   avb_slot_verify_result_to_string(verify_result),
-					   " - setting unbootable.
",
-					   NULL);
-				fsl_slot_set_unbootable(&ab_data.slots[target_slot]);
-				set_slot_unbootable = false;
-			}
-			if (slot_data[target_slot] != NULL) {
-				avb_slot_verify_data_free(slot_data[target_slot]);
-				slot_data[target_slot] = NULL;
-			}
+			avb_errorv("Error verifying slot ",
+				   slot_suffixes[target_slot],
+				   " with result ",
+				   avb_slot_verify_result_to_string(verify_result),
+				   " - setting unbootable.
",
+				   NULL);
+			fsl_slot_set_unbootable(&ab_data.slots[target_slot]);
+			set_slot_unbootable = false;
 		}
 		/* switch to another slot */
 		target_slot = (target_slot == 1 ? 0 : 1);
