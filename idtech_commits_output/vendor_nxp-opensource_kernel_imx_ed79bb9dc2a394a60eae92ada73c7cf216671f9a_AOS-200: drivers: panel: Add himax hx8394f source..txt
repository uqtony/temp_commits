ed79bb9dc2a3 Arthur Chen 2020-05-21

AOS-200: drivers: panel: Add himax hx8394f source.

Change-Id: I05bdec0c66a27dcfaf09f1bcff2d574c4680a825

diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index 25f7b74948e2..133c923ae615 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -203,4 +203,13 @@ config DRM_PANEL_TIANMA_TM050JDHC02
 	help
 	  Say Y here if you want to enable support for TianMa TM050JDHC02 HD
 	  (1280x720) DSI panel.
+
+config DRM_PANEL_DATAIMAGE_5INCHLCM
+	tristate "DataImage 5InchLCM HD Panel"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y here if you want to enable support for DataImage 5InchLCM HD
+	  (1280x720) DSI panel.
 endmenu
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index e1f67561d720..67381a20e24b 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -21,3 +21,4 @@ obj-$(CONFIG_DRM_PANEL_SHARP_LS043T1LE01) += panel-sharp-ls043t1le01.o
 obj-$(CONFIG_DRM_PANEL_SITRONIX_ST7789V) += panel-sitronix-st7789v.o
 obj-$(CONFIG_DRM_PANEL_RAYDIUM_RM67191) += panel-raydium-rm67191.o
 obj-$(CONFIG_DRM_PANEL_TIANMA_TM050JDHC02) += panel-ilitek-ili9881c_idt.o
+obj-$(CONFIG_DRM_PANEL_DATAIMAGE_5INCHLCM) += panel-himax-hx8394f.o
diff --git a/drivers/gpu/drm/panel/panel-himax-hx8394f.c b/drivers/gpu/drm/panel/panel-himax-hx8394f.c
new file mode 100644
index 000000000000..e7a982d8b747
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-himax-hx8394f.c
@@ -0,0 +1,638 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * i.MX drm driver - Ilitek MIPI-DSI panel driver
+ *
+ * Copyright (C) 2017 NXP
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <drm/drmP.h>
+#include <drm/drm_crtc.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_panel.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/regulator/consumer.h>
+#include <video/mipi_display.h>
+#include <video/of_videomode.h>
+#include <video/videomode.h>
+
+/* Write Manufacture Command Set Control */
+#define WRMAUCCTR 0xFE
+
+#define MIPI_DELAY 0xFF
+
+/* Manufacturer Command Set pages (CMD2) */
+struct cmd_set_entry {
+	u8 cmd;
+	u8 param;
+};
+
+struct panel_init_cmd {
+	size_t len;
+	const char *data;
+};
+
+struct data_val {
+	u8 data[148];
+};
+
+struct mipi_reg_val {
+	u32 cmd;
+	u32 addr;
+	u32 cnt;
+	struct data_val data;
+};
+
+static const u32 hm_bus_formats[] = {
+	MEDIA_BUS_FMT_RGB888_1X24,
+	MEDIA_BUS_FMT_RGB666_1X18,
+	MEDIA_BUS_FMT_RGB565_1X16,
+};
+
+struct hm_panel {
+	struct drm_panel base;
+	struct mipi_dsi_device *dsi;
+
+	struct gpio_desc *reset;
+	struct backlight_device *backlight;
+
+	bool prepared;
+	bool enabled;
+
+	struct videomode vm;
+	u32 width_mm;
+	u32 height_mm;
+};
+
+static inline struct hm_panel *to_hm_panel(struct drm_panel *panel)
+{
+	return container_of(panel, struct hm_panel, base);
+}
+
+static void hx8394f_dcs_write_buf(struct mipi_dsi_device *dsi, u8 *data, size_t len)
+{
+	struct device *dev = &dsi->dev;
+	int err;
+
+	err = mipi_dsi_dcs_write_buffer(dsi, data, len);
+	if (err < 0)
+		DRM_DEV_ERROR(dev, "MIPI DSI DCS write buffer failed: %d
", err);
+}
+
+static void hx8394f_dcs_write_cmd(struct mipi_dsi_device *dsi, u8 cmd, u8 value)
+{
+	struct device *dev = &dsi->dev;
+	int err;
+
+	err = mipi_dsi_dcs_write(dsi, cmd, &value, 1);
+	if (err < 0)
+		DRM_DEV_ERROR(dev, "MIPI DSI DCS write cmd failed: %d
", err);
+}
+
+#define hx_dcs_write_seq(dsi, seq...)				\
+({								\
+	static const u8 d[] = { seq };				\
+								\
+	hx8394f_dcs_write_buf(dsi, d, ARRAY_SIZE(d));		\
+})
+
+/*
+ * This panel is not able to auto-increment all cmd addresses so for some of
+ * them, we need to send them one by one...
+ */
+#define hx_dcs_write_cmd_seq(dsi, cmd, seq...)			\
+({								\
+	static const u8 d[] = { seq };				\
+	unsigned int i;						\
+								\
+	for (i = 0; i < ARRAY_SIZE(d) ; i++)			\
+		hx8394f_dcs_write_cmd(dsi, cmd + i, d[i]);	\
+})
+
+/*
+ * There is no description in the Reference Manual about these commands.
+ * We received them from vendor, so just use them as is.
+ */
+
+static int hm_panel_init_proc(struct mipi_dsi_device *dsi)
+{
+	int ret = 0;
+	struct device *dev = &dsi->dev;
+
+	DRM_DEV_INFO(dev, "hm_panel_init_proc begin()!
");
+
+	hx_dcs_write_seq(dsi, 0xB9, 0xFF, 0x83, 0x94);
+	hx_dcs_write_seq(dsi, 0xB1, 0x48, 0x12, 0x72, 0x09, 0x33, 0x24, 0x51,
+			 0x51, 0x30, 0x43);
+	hx_dcs_write_seq(dsi, 0xBA, 0x63, 0x03, 0x68, 0x6B, 0xB2, 0xC0);
+	hx_dcs_write_seq(dsi, 0xB2, 0x00, 0x80, 0x64, 0x0C, 0x06, 0x2F);
+
+/*
+ *	To enable panel free run mode:
+ *
+ *	hx_dcs_write_seq(dsi, 0xB2, 0x00, 0x80, 0x64, 0x0C, 0x06, 0x2F, 0x00,
+ *			 0x00,0x00, 0x00, 0xC9);
+ */
+
+	hx_dcs_write_seq(dsi, 0xB4, 0x76, 0x74, 0x76, 0x74, 0x76, 0x74, 0x01,
+			 0x0C, 0x86, 0x75, 0x00, 0x3F, 0x76, 0x74, 0x76, 0x74,
+			 0x76, 0x74, 0x01, 0x0C);
+	hx_dcs_write_seq(dsi, 0xD3, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x12,
+			 0x10, 0x32, 0x10, 0x00, 0x00, 0x00, 0x32, 0x13, 0xC0,
+			 0x00, 0x00, 0x32, 0x10, 0x08, 0x00, 0x00, 0x47, 0x04,
+			 0x02, 0x02, 0x47, 0x04, 0x00, 0x47, 0x0C, 0x40);
+	hx_dcs_write_seq(dsi, 0xD5, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
+			 0x07, 0x20, 0x21, 0x22, 0x23, 0x18, 0x18, 0x18, 0x18,
+			 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x18,
+			 0x18);
+	hx_dcs_write_seq(dsi, 0xD6, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
+			 0x00, 0x23, 0x22, 0x21, 0x20, 0x18, 0x18, 0x18, 0x18,
+			 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19,
+			 0x19);
+	hx_dcs_write_seq(dsi, 0xB6, 0x5B, 0x5B);
+/* gamma2.2 */
+	hx_dcs_write_seq(dsi, 0xE0, 0x00, 0x02, 0x07, 0x0B, 0x0C, 0x0E, 0x11,
+			 0x0E, 0x1E, 0x2B, 0x3D, 0x3B, 0x47, 0x5B, 0x62, 0x69,
+			 0x78, 0x7F, 0x7E, 0x93, 0xAA, 0x56, 0x56, 0x5C, 0x62,
+			 0x67, 0x6F, 0x7B, 0x7F, 0x00, 0x02, 0x07, 0x0B, 0x0C,
+			 0x0E, 0x11, 0x0E, 0x1E, 0x2B, 0x3D, 0x3B, 0x47, 0x5C,
+			 0x63, 0x6A, 0x79, 0x80, 0x7E, 0x93, 0xAB, 0x56, 0x56,
+			 0x5D, 0x63, 0x67, 0x74, 0x7D, 0x7F);
+
+	hx_dcs_write_seq(dsi, 0xCC, 0x0B);
+	hx_dcs_write_seq(dsi, 0xC0, 0x1F, 0x31);
+	hx_dcs_write_seq(dsi, 0xD4, 0x02);
+	hx_dcs_write_seq(dsi, 0xBD, 0x01);
+	hx_dcs_write_seq(dsi, 0xB1, 0x00);
+	hx_dcs_write_seq(dsi, 0xBD, 0x00);
+	hx_dcs_write_seq(dsi, 0xC6, 0xED);
+
+	DRM_DEV_INFO(dev, "hm_panel_init_proc() end!
");
+
+	return ret;
+}
+static int color_format_from_dsi_format(enum mipi_dsi_pixel_format format)
+{
+	switch (format) {
+	case MIPI_DSI_FMT_RGB565:
+		return 0x55;
+	case MIPI_DSI_FMT_RGB666:
+	case MIPI_DSI_FMT_RGB666_PACKED:
+		return 0x66;
+	case MIPI_DSI_FMT_RGB888:
+		return 0x77;
+	default:
+		return 0x77; /* for backward compatibility */
+	}
+};
+
+static int hm_panel_prepare(struct drm_panel *panel)
+{
+	struct hm_panel *hm = to_hm_panel(panel);
+	struct mipi_dsi_device *dsi = hm->dsi;
+	struct device *dev = &hm->dsi->dev;
+	int color_format = color_format_from_dsi_format(dsi->format);
+	int ret;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	DRM_DEV_INFO(dev, "hm_panel_prepare()!
");
+	if (hm->prepared)
+		return 0;
+
+	/* pull reset to low */
+	if (hm->reset != NULL) {
+
+		gpiod_set_value(hm->reset, 1);
+		mdelay(50);	/* t4 */
+
+		DRM_DEV_INFO(dev, "pull reset pin to high!
");
+	}
+
+	ret = hm_panel_init_proc(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to send MCS (%d)
", ret);
+		return ret;
+	}
+
+	ret = mipi_dsi_dcs_set_pixel_format(dsi, color_format);
+	DRM_DEV_INFO(dev, "Interface color format set to 0x%x
", color_format);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to set pixel format (%d)
", ret);
+		return ret;
+	}
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0)
+		return ret;
+
+	mdelay(150);
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0)
+		return ret;
+
+	mdelay(20);
+	hm->prepared = true;
+
+	return 0;
+}
+
+static int hm_panel_unprepare(struct drm_panel *panel)
+{
+	struct hm_panel *hm = to_hm_panel(panel);
+	struct mipi_dsi_device *dsi = hm->dsi;
+	struct device *dev = &hm->dsi->dev;
+	int ret;
+
+	DRM_DEV_INFO(dev, "hm_panel_unprepare()!
");
+	if (!hm->prepared)
+		return 0;
+
+	if (hm->enabled) {
+		DRM_DEV_ERROR(dev, "Panel still enabled!
");
+		return -EPERM;
+	}
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to set display OFF (%d)
", ret);
+		return ret;
+	}
+
+	msleep(20);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0) {
+		DRM_DEV_ERROR(dev, "Failed to enter sleep mode (%d)
", ret);
+		return ret;
+	}
+
+
+	if (hm->reset != NULL) {
+		gpiod_set_value(hm->reset, 1);
+		msleep(20);
+	}
+
+	hm->prepared = false;
+
+	return 0;
+}
+
+static int hm_panel_enable(struct drm_panel *panel)
+{
+	struct hm_panel *hm = to_hm_panel(panel);
+	struct mipi_dsi_device *dsi = hm->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	DRM_DEV_INFO(dev, "hm_panel_enable(), begin!
");
+
+	if (hm->enabled)
+		return 0;
+
+	if (!hm->prepared) {
+		DRM_DEV_ERROR(dev, "Panel not prepared!
");
+		ret = -EPERM;
+		goto fail;
+	}
+
+	hm->enabled = true;
+	DRM_DEV_INFO(dev, "hm_panel_enable(), end!
");
+
+	return 0;
+
+fail:
+	if (hm->reset != NULL)
+		gpiod_set_value(hm->reset, 0);
+
+	DRM_DEV_ERROR(dev, "hm_panel_enable(), failed!
");
+
+	return ret;
+}
+
+static int hm_panel_disable(struct drm_panel *panel)
+{
+	struct hm_panel *hm = to_hm_panel(panel);
+
+	if (!hm->enabled)
+		return 0;
+
+	hm->enabled = false;
+
+	return 0;
+}
+
+static int hm_panel_get_modes(struct drm_panel *panel)
+{
+	struct hm_panel *hm = to_hm_panel(panel);
+	struct device *dev = &hm->dsi->dev;
+	struct drm_connector *connector = panel->connector;
+	struct drm_display_mode *mode;
+	u32 *bus_flags = &connector->display_info.bus_flags;
+	int ret;
+
+	mode = drm_mode_create(connector->dev);
+	if (!mode) {
+		DRM_DEV_ERROR(dev, "Failed to create display mode!
");
+		return 0;
+	}
+
+	drm_display_mode_from_videomode(&hm->vm, mode);
+	mode->width_mm = hm->width_mm;
+	mode->height_mm = hm->height_mm;
+	connector->display_info.width_mm = hm->width_mm;
+	connector->display_info.height_mm = hm->height_mm;
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+
+	if (hm->vm.flags & DISPLAY_FLAGS_DE_HIGH)
+		*bus_flags |= DRM_BUS_FLAG_DE_HIGH;
+	if (hm->vm.flags & DISPLAY_FLAGS_DE_LOW)
+		*bus_flags |= DRM_BUS_FLAG_DE_LOW;
+	if (hm->vm.flags & DISPLAY_FLAGS_PIXDATA_NEGEDGE)
+		*bus_flags |= DRM_BUS_FLAG_PIXDATA_NEGEDGE;
+	if (hm->vm.flags & DISPLAY_FLAGS_PIXDATA_POSEDGE)
+		*bus_flags |= DRM_BUS_FLAG_PIXDATA_POSEDGE;
+
+	ret = drm_display_info_set_bus_formats(&connector->display_info,
+			hm_bus_formats, ARRAY_SIZE(hm_bus_formats));
+	if (ret)
+		return ret;
+
+	drm_mode_probed_add(panel->connector, mode);
+
+	return 1;
+}
+
+static int hm_bl_get_brightness(struct backlight_device *bl)
+{
+	struct mipi_dsi_device *dsi = bl_get_data(bl);
+	struct hm_panel *hm = mipi_dsi_get_drvdata(dsi);
+	struct device *dev = &dsi->dev;
+	u16 brightness;
+	int ret;
+
+	if (!hm->prepared)
+		return 0;
+
+	DRM_DEV_DEBUG_DRIVER(dev, "
");
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_get_display_brightness(dsi, &brightness);
+	if (ret < 0)
+		return ret;
+
+	bl->props.brightness = brightness;
+
+	return brightness & 0xff;
+}
+
+static int hm_bl_update_status(struct backlight_device *bl)
+{
+	struct mipi_dsi_device *dsi = bl_get_data(bl);
+	struct hm_panel *hm = mipi_dsi_get_drvdata(dsi);
+	struct device *dev = &dsi->dev;
+	int ret = 0;
+
+	if (!hm->prepared)
+		return 0;
+
+	DRM_DEV_DEBUG_DRIVER(dev, "New brightness: %d
", bl->props.brightness);
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_set_display_brightness(dsi, bl->props.brightness);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static const struct backlight_ops hm_bl_ops = {
+	.update_status = hm_bl_update_status,
+	.get_brightness = hm_bl_get_brightness,
+};
+
+static const struct drm_panel_funcs hm_panel_funcs = {
+	.prepare = hm_panel_prepare,
+	.unprepare = hm_panel_unprepare,
+	.enable = hm_panel_enable,
+	.disable = hm_panel_disable,
+	.get_modes = hm_panel_get_modes,
+};
+
+/*
+ * The clock might range from 66MHz (30Hz refresh rate)
+ * to 132MHz (60Hz refresh rate)
+ */
+ static const struct display_timing hm_default_timing = {
+	.pixelclock = { 63000000, 132000000, 132000000 },
+	.hactive = { 720, 720, 720 },
+	.hfront_porch = { 12, 12, 12 },
+	.hsync_len = { 12, 12, 12 },
+	.hback_porch = { 24, 24, 24 },
+	.vactive = { 1280, 1280, 1280 },
+	.vfront_porch = { 10, 10, 10 },
+	.vsync_len = { 20, 20, 20 },
+	.vback_porch = { 20, 20, 20 },
+	.flags = DISPLAY_FLAGS_HSYNC_LOW |
+		 DISPLAY_FLAGS_VSYNC_LOW |
+		 DISPLAY_FLAGS_DE_LOW |
+		 DISPLAY_FLAGS_PIXDATA_NEGEDGE,
+};
+
+static int hm_panel_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct device_node *np = dev->of_node;
+	struct device_node *timings;
+	struct hm_panel *panel;
+	struct backlight_properties bl_props;
+	int ret;
+	u32 video_mode;
+
+	DRM_DEV_INFO(dev, "hm_panel_probe() begin!
");
+
+	panel = devm_kzalloc(&dsi->dev, sizeof(*panel), GFP_KERNEL);
+	if (!panel)
+		return -ENOMEM;
+
+	mipi_dsi_set_drvdata(dsi, panel);
+
+	panel->dsi = dsi;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags =  MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO |
+			   MIPI_DSI_CLOCK_NON_CONTINUOUS;
+
+	ret = of_property_read_u32(np, "video-mode", &video_mode);
+	if (!ret) {
+		switch (video_mode) {
+		case 0:
+			/* burst mode */
+			dsi->mode_flags |= MIPI_DSI_MODE_VIDEO_BURST;
+			break;
+		case 1:
+			/* non-burst mode with sync event */
+			break;
+		case 2:
+			/* non-burst mode with sync pulse */
+			dsi->mode_flags |= MIPI_DSI_MODE_VIDEO_SYNC_PULSE;
+			break;
+		default:
+			dev_warn(dev, "invalid video mode %d
", video_mode);
+			break;
+
+		}
+	}
+
+	ret = of_property_read_u32(np, "dsi-lanes", &dsi->lanes);
+	if (ret < 0) {
+		dev_err(dev, "Failed to get dsi-lanes property (%d)
", ret);
+		return ret;
+	}
+
+	DRM_DEV_INFO(dev, "hm_panel_probe() video mode =%d, lanes = %d!
", video_mode, dsi->lanes);
+
+	/*
+	 * 'display-timings' is optional, so verify if the node is present
+	 * before calling of_get_videomode so we won't get console error
+	 * messages
+	 */
+	timings = of_get_child_by_name(np, "display-timings");
+	if (timings) {
+		of_node_put(timings);
+		ret = of_get_videomode(np, &panel->vm, 0);
+		DRM_DEV_INFO(dev, "hm_panel_probe() read vm from DTS!
");
+	} else {
+		videomode_from_timing(&hm_default_timing, &panel->vm);
+	}
+	if (ret < 0)
+		return ret;
+
+	of_property_read_u32(np, "panel-width-mm", &panel->width_mm);
+	of_property_read_u32(np, "panel-height-mm", &panel->height_mm);
+
+	panel->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	DRM_DEV_INFO(dev, "Get panel reset %d only!
", panel->reset);
+
+	if (IS_ERR(panel->reset))
+		panel->reset = NULL;
+
+	memset(&bl_props, 0, sizeof(bl_props));
+	bl_props.type = BACKLIGHT_RAW;
+	bl_props.brightness = 255;
+	bl_props.max_brightness = 255;
+	drm_panel_init(&panel->base);
+	panel->base.funcs = &hm_panel_funcs;
+	panel->base.dev = dev;
+	dev_set_drvdata(dev, panel);
+
+	ret = drm_panel_add(&panel->base);
+
+	if (ret < 0)
+		return ret;
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0)
+		drm_panel_remove(&panel->base);
+
+	DRM_DEV_INFO(dev, "hm_panel_probe() end!
");
+	return ret;
+}
+
+static int hm_panel_remove(struct mipi_dsi_device *dsi)
+{
+	struct hm_panel *hm = mipi_dsi_get_drvdata(dsi);
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		DRM_DEV_ERROR(dev, "Failed to detach from host (%d)
",
+			ret);
+
+	drm_panel_remove(&hm->base);
+
+	return 0;
+}
+
+static void hm_panel_shutdown(struct mipi_dsi_device *dsi)
+{
+	struct hm_panel *hm = mipi_dsi_get_drvdata(dsi);
+
+	hm_panel_disable(&hm->base);
+	hm_panel_unprepare(&hm->base);
+}
+
+#ifdef CONFIG_PM
+static int hm_panel_suspend(struct device *dev)
+{
+	struct hm_panel *hm = dev_get_drvdata(dev);
+
+	if (!hm->reset)
+		return 0;
+
+	devm_gpiod_put(dev, hm->reset);
+	hm->reset = NULL;
+
+	return 0;
+}
+
+static int hm_panel_resume(struct device *dev)
+{
+	struct hm_panel *hm = dev_get_drvdata(dev);
+
+	if (hm->reset)
+		return 0;
+
+	hm->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(hm->reset))
+		hm->reset = NULL;
+
+	return PTR_ERR_OR_ZERO(hm->reset);
+}
+
+#endif
+
+static const struct dev_pm_ops hm_pm_ops = {
+	SET_RUNTIME_PM_OPS(hm_panel_suspend, hm_panel_resume, NULL)
+	SET_SYSTEM_SLEEP_PM_OPS(hm_panel_suspend, hm_panel_resume)
+};
+
+static const struct of_device_id hm_of_match[] = {
+	{ .compatible = "himax,hx8394f", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, hm_of_match);
+
+static struct mipi_dsi_driver hm_panel_driver = {
+	.driver = {
+		.name = "panel-himax-hx8394f",
+		.of_match_table = hm_of_match,
+		.pm	= &hm_pm_ops,
+	},
+	.probe = hm_panel_probe,
+	.remove = hm_panel_remove,
+	.shutdown = hm_panel_shutdown,
+};
+module_mipi_dsi_driver(hm_panel_driver);
+
+MODULE_AUTHOR("Robert Chiras <robert.chiras@nxp.com>");
+MODULE_DESCRIPTION("DRM Driver for Himax HX8394F MIPI DSI panel");
+MODULE_LICENSE("GPL v2");
