a133aaa jay deng 2020-09-17

AOS-312: Add input device interface and HAL for mlx90614

System need input and event device to notify SensorEvent
service of Android framework. So must add input device
interface for mlx90614.
Also need to implement HAL for mlx90614, Android framework
will get sensor data by HAL.

Change-Id: Ib8dd05c52b252795b32116ff596a74926da404e0

diff --git a/Android.mk b/Android.mk
index 70fc70c..1b25dc7 100644
--- a/Android.mk
+++ b/Android.mk
@@ -123,7 +123,7 @@ endef
 # E.g.: to enable LSM6DS0 + LIS3MDL sensor                                     #
 #                ENABLED_SENSORS := LSM6DS0 LIS3MDL                            #
 ################################################################################
-ENABLED_SENSORS := LSM303AGR VL53L1X
+ENABLED_SENSORS := LSM303AGR VL53L1X MLX90614
 ENABLED_MODULES :=
 
 LOCAL_C_INCLUDES := $(call all-dir-under-lib) \
diff --git a/BodyTempSensor.cpp b/BodyTempSensor.cpp
new file mode 100644
index 0000000..3aedd0b
--- /dev/null
+++ b/BodyTempSensor.cpp
@@ -0,0 +1,216 @@
+/*
+ *  MELEXIS IR thermal sensor HAL layer
+ *
+ *  Copyright (c) 2020 ID TECH.
+ *  Author: Jay Deng <jay.deng@idtechproducts.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#include "configuration.h"
+
+/* Standalone Temperature sensor */
+#if (SENSORS_BODY_TEMP_ENABLE == 1)
+
+#include <fcntl.h>
+#include <errno.h>
+#include <math.h>
+#include <poll.h>
+#include <unistd.h>
+#include <dirent.h>
+#include <string.h>
+#include <sys/select.h>
+#include <log/log.h>
+
+#include "BodyTempSensor.h"
+
+int BodyTempSensor::current_fullscale = 0;
+int unsigned BodyTempSensor::mEnabled = 0;
+int unsigned BodyTempSensor::enabled = 0;
+
+BodyTempSensor::BodyTempSensor() :
+	SensorBase(NULL, SENSOR_OBJECT_TEMP),
+	mPendingMask(0),
+	mInputReader(4),
+	mHasPendingEvent(false)
+{
+	memset(mPendingEvents, 0, sizeof(mPendingEvents));
+
+	mPendingEvents[Temperature].version = sizeof(sensors_event_t);
+	mPendingEvents[Temperature].sensor = ID_BODY_TEMPERATURE;
+	mPendingEvents[Temperature].type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
+
+	if (data_fd) {
+		STLOGI("BodyTempSensor::BodyTempSensor temp_device_sysfs_path:(%s)", sysfs_device_path);
+	} else {
+		STLOGE("BodyTempSensor::BodyTempSensor temp_device_sysfs_path:(%s) not found", sysfs_device_path);
+	}
+}
+
+BodyTempSensor::~BodyTempSensor()
+{
+	if (mEnabled) {
+		enable(SENSORS_BODY_TEMPERATURE_HANDLE, 0, 0);
+	}
+}
+
+int BodyTempSensor::setInitialState()
+{
+	return 0;
+}
+
+int BodyTempSensor::getWhatFromHandle(int32_t handle)
+{
+	int what = -1;
+
+	switch (handle) {
+		case SENSORS_BODY_TEMPERATURE_HANDLE:
+			what = Temperature;
+			break;
+		default:
+			break;
+	}
+
+	return what;
+}
+
+int BodyTempSensor::writeSensorDelay(int handle)
+{
+	int err = writeDelay(handle, delayms);
+
+	return err;
+}
+
+int BodyTempSensor::enable(int32_t handle, int en, int type __attribute__((unused)))
+{
+	int err = 0;
+	int what = -1;
+
+	what = getWhatFromHandle(handle);
+	if (what < 0)
+		return what;
+
+	if (en) {
+		if(!enabled) {
+			enabled = 1;
+			mEnabled |= (1<<what);
+		}
+
+	} else {
+		if (enabled) {
+			enabled = 0;
+			mEnabled &= ~(1<<what);
+		}
+	}
+
+	if (enabled)
+		setInitialState();
+
+	return err;
+}
+
+int BodyTempSensor::setDelay(int32_t handle, int64_t delay_ns)
+{
+	int err = -1, what;
+	int64_t delay_ms = NSEC_TO_MSEC(delay_ns);
+
+	if (delay_ms == 0)
+		return err;
+
+	what = getWhatFromHandle(handle);
+	if (what < 0)
+		return what;
+
+	delayms = delay_ms;
+
+	if (mEnabled & (1 << what))
+		err = writeSensorDelay(handle);
+
+	return err;
+}
+
+int BodyTempSensor::setFullScale(int32_t __attribute__((unused))handle, int value)
+{
+	int err = -1;
+
+	if (value <= 0)
+		return err;
+	else
+		err = 0;
+
+	if (value != current_fullscale)
+	{
+		err = writeFullScale(SENSORS_TEMPERATURE_HANDLE, value);
+		if (err >= 0) {
+			err = 0;
+			current_fullscale = value;
+		}
+		err = 0;
+	}
+	return err;
+}
+
+int BodyTempSensor::readEvents(sensors_event_t* data, int count)
+{
+	static float lastTempValue = 0.0f;
+	int64_t timestamp;
+
+#if DEBUG_BODY_TEMPERATURE_SENSOR == 1
+	STLOGD("BodyTempSensor::readEvents (count=%d)",count);
+#endif
+	if (count < 1)
+		return -EINVAL;
+
+	if (mHasPendingEvent) {
+		mHasPendingEvent = false;
+	}
+
+	ssize_t n = mInputReader.fill(data_fd);
+	if (n < 0)
+		return n;
+
+	int numEventReceived = 0;
+	input_event const* event;
+	struct timeval tv;
+	struct timezone tz;
+
+	while (count && mInputReader.readEvent(&event)) {
+#if DEBUG_TEMPERATURE_SENSOR == 1
+		STLOGD("TempSensor::readEvents (count=%d),type(%d)", count, event->type);
+#endif
+		gettimeofday(&tv,&tz);
+		timestamp = timevalToNano(tv);
+		if (event->type == EV_MSC) {
+			int value = event->value;
+
+			if (event->code == MSC_SERIAL) {
+				lastTempValue = value;
+				mPendingEvents[Temperature].temperature = (SENSOR_TEMP_OFFSET + value) * SENSOR_DEGREE_PER_UNIT;
+				mPendingEvents[Temperature].timestamp = timestamp;
+			}
+		} else if (event->type == EV_SYN) {
+			if (mEnabled & (1 << Temperature))
+				mPendingMask |= 1 << Temperature;
+
+
+			for (int j = 0; count && mPendingMask && (j < numSensors); j++) {
+				if (mPendingMask & (1 << j)) {
+					mPendingMask &= ~(1 << j);
+					mPendingEvents[j].timestamp = timestamp;
+					if (mEnabled & (1 << j)) {
+						*data++ = mPendingEvents[j];
+						count--;
+						numEventReceived++;
+					}
+				}
+			}
+		}
+		mInputReader.next();
+	}
+
+	return numEventReceived;
+}
+
+#endif /* SENSORS_TEMP_ENABLE */
diff --git a/BodyTempSensor.h b/BodyTempSensor.h
new file mode 100644
index 0000000..0497f96
--- /dev/null
+++ b/BodyTempSensor.h
@@ -0,0 +1,62 @@
+/*
+ *  MELEXIS IR thermal sensor HAL layer
+ *
+ *  Copyright (c) 2020 ID TECH.
+ *  Author: Jay Deng <jay.deng@idtechproducts.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#include "configuration.h"
+#if (SENSORS_BODY_TEMP_ENABLE == 1)
+
+#ifndef ANDROID_BODY_TEMP_SENSOR_H
+#define ANDROID_BODY_TEMP_SENSOR_H
+
+#include <stdint.h>
+#include <errno.h>
+#include <sys/cdefs.h>
+#include <sys/types.h>
+
+#include "sensors.h"
+#include "SensorBase.h"
+#include "InputEventReader.h"
+
+class BodyTempSensor : public SensorBase {
+private:
+	enum {
+		Temperature,
+		numSensors
+	};
+	static unsigned int mEnabled;
+	static int current_fullscale;
+	static unsigned int enabled;
+	uint32_t mPendingMask;
+	InputEventCircularReader mInputReader;
+	sensors_event_t mPendingEvents[numSensors];
+	bool mHasPendingEvent;
+
+	int setInitialState(void);
+
+	enum channelid{
+		tempChan = 0
+	};
+	int64_t delayms;
+
+	int writeSensorDelay(int handle);
+
+public:
+	BodyTempSensor();
+	virtual ~BodyTempSensor();
+	virtual int readEvents(sensors_event_t *data, int count);
+	virtual bool hasPendingEvents(void) const { return mHasPendingEvent; }
+	virtual int setDelay(int32_t handle, int64_t ns);
+	virtual int setFullScale(int32_t handle, int value);
+	virtual int enable(int32_t handle, int enabled, int type);
+	virtual int getWhatFromHandle(int32_t handle);
+};
+
+#endif  // ANDROID_TEMP_SENSOR_H
+#endif /* SENSORS_TEMP_ENABLE */
diff --git a/conf/conf_MLX90614.h b/conf/conf_MLX90614.h
new file mode 100644
index 0000000..a4a15a0
--- /dev/null
+++ b/conf/conf_MLX90614.h
@@ -0,0 +1,42 @@
+/*
+ *  MELEXIS IR thermal sensor HAL layer
+ *
+ *  Copyright (c) 2020 ID TECH.
+ *  Author: Jay Deng <jay.deng@idtechproducts.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License version 2 as
+ *  published by the Free Software Foundation.
+ */
+
+#ifndef CONFIGURATION_SENSOR_MLX90614_H
+#define CONFIGURATION_SENSOR_MLX90614_H
+
+#define SENSORS_BODY_TEMP_ENABLE	(1)
+
+#define SENSOR_THERMAL_VENDOR		"Melexis"
+#define SENSOR_THERMAL_LABEL		"IR thermal sensor"
+#define SENSOR_FILE_PATH		"/sys/bus/iio/devices/iio:device0/"
+#define SENSOR_BODY_TEMP_LABEL		"MLX90614 IR Temperature sensor"
+#define SENSOR_AMBIENT_TEMP		"in_temp_ambient_raw"
+#define SENSOR_OBJECT_TEMP_0		"in_temp_object_raw"
+#define SENSOR_OBJECT_TEMP_1		"in_temp1_object_raw"
+#define SENSOR_OBJECT_TEMP		"mlx90614"
+
+#define SENSOR_OBJ_TEMP1_CALIBEMISSIVITY_FILE	"in_temp1_object_calibemissivity"
+#define SENSOR_OBJ_TEMP1_LOW_PASS_FREQ_FILE	"in_temp1_object_filter_low_pass_3db_frequency"
+#define SENSOR_OBJ_TEMP0_CALIBEMISSIVITY_FILE	"in_temp_object_calibemissivity"
+#define SENSOR_OBJ_TEMP0_LOW_PASS_FREQ_FILE	"in_temp_object_filter_low_pass_3db_frequency"
+#define SENSOR_TEMP_OFFSET_FILE			"in_temp_offset"
+#define SENSOR_TEMP_SCALE_FILE			"in_temp_scale"
+#define SENSOR_LOW_PASS_AVAILABLE_RANGE_FILE	"in_temp_object_filter_low_pass_3db_frequency_available"
+
+#define SENSOR_AMBIENT_MAX_RANGE	165	//Celsius -40 ~ 125
+#define SENSOR_OBJECT_MAX_RANGE		450	//Celsius -70 ~ 380
+#define SENSOR_TEMP_OFFSET		(-13657)
+#define SENSOR_POWER_CONSUMPTION	2.5f	// mA
+#define SENSOR_DEGREE_PER_UNIT		0.02f
+#define SENSOR_CMD_MIN_FREQ		100000	// microseconds
+#define SENSOR_CMD_MAX_FREQ		200000	// miscroseconds
+
+#endif /* CONFIGURATION_SENSOR_MLX90614_H */
diff --git a/configuration.h b/configuration.h
index 7f3d387..956c940 100644
--- a/configuration.h
+++ b/configuration.h
@@ -190,6 +190,9 @@
 #if defined(VL53L1X)
   #include "conf_VL53L1X.h"
 #endif
+#if defined(MLX90614)
+  #include "conf_MLX90614.h"
+#endif
 
 #ifdef SENSORS_ORIENTATION_ENABLE
  #if (SENSORS_ORIENTATION_ENABLE == 1)
diff --git a/sensors.cpp b/sensors.cpp
index d886a1d..a11874f 100644
--- a/sensors.cpp
+++ b/sensors.cpp
@@ -78,6 +78,9 @@
 #include "ProximitySensor.h"
 #endif
 
+#if (SENSORS_BODY_TEMP_ENABLE == 1)
+#include "BodyTempSensor.h"
+#endif
 
 /*****************************************************************************/
 
@@ -708,6 +711,30 @@ static const struct sensor_t sSensorList[] = {
 		{ }
 	},
 #endif
+#if (SENSORS_BODY_TEMP_ENABLE == 1)
+	{
+		SENSOR_BODY_TEMP_LABEL,
+		"Melexis",
+		1,
+		SENSORS_BODY_TEMPERATURE_HANDLE,
+		SENSOR_TYPE_AMBIENT_TEMPERATURE,
+		SENSOR_OBJECT_MAX_RANGE,
+		0.02f,
+		SENSOR_POWER_CONSUMPTION,
+		SENSOR_CMD_MIN_FREQ,
+#if (ANDROID_VERSION >= ANDROID_KK)
+		0,
+		0,
+#if (ANDROID_VERSION >= ANDROID_L)
+		SENSOR_STRING_TYPE_AMBIENT_TEMPERATURE,
+		"",
+		SENSOR_CMD_MAX_FREQ,
+		SENSOR_FLAG_ON_CHANGE_MODE,
+#endif
+#endif
+		{ }
+	},
+#endif
 };
 
 
@@ -806,6 +833,9 @@ private:
 #endif
 #if (SENSORS_PROXIMITY_ENABLE == 1)
 		proximity,
+#endif
+#if (SENSORS_BODY_TEMP_ENABLE == 1)
+		bodyTemperature,
 #endif
 		numSensorDrivers,
 		numFds,
@@ -944,6 +974,10 @@ private:
 #if (SENSORS_PROXIMITY_ENABLE == 1)
 			case SENSORS_PROXIMITY_HANDLE:
 				return proximity;
+#endif
+#if (SENSORS_BODY_TEMP_ENABLE == 1)
+			case SENSORS_BODY_TEMPERATURE_HANDLE:
+				return bodyTemperature;
 #endif
 		}
 		return -EINVAL;
@@ -1052,6 +1086,13 @@ sensors_poll_context_t::sensors_poll_context_t()
 	mPollFds[proximity].revents = 0;
 #endif
 
+#if (SENSORS_BODY_TEMP_ENABLE == 1)
+	mSensors[bodyTemperature] = new BodyTempSensor();
+	mPollFds[bodyTemperature].fd = mSensors[bodyTemperature]->getFd();
+	mPollFds[bodyTemperature].events = POLLIN;
+	mPollFds[bodyTemperature].revents = 0;
+#endif
+
 #if (ANDROID_VERSION >= ANDROID_JBMR2)
 	int FlushFds[2];
 	int err = pipe(FlushFds);
diff --git a/sensors.h b/sensors.h
index a31d4ad..f92fae9 100644
--- a/sensors.h
+++ b/sensors.h
@@ -63,6 +63,7 @@ __BEGIN_DECLS
 #define ID_TAP					(ID_BASE+23)
 #define ID_HUMIDITY				(ID_BASE+24)
 #define ID_UNCALIB_ACCELEROMETER		(ID_BASE+25)
+#define ID_BODY_TEMPERATURE			(ID_BASE+26)
 
 #define SENSORS_ACCELEROMETER_HANDLE		ID_ACCELEROMETER
 #define SENSORS_MAGNETIC_FIELD_HANDLE		ID_MAGNETIC_FIELD
@@ -90,6 +91,7 @@ __BEGIN_DECLS
 #define SENSORS_TAP_HANDLE			ID_TAP
 #define SENSORS_HUMIDITY_HANDLE			ID_HUMIDITY
 #define SENSORS_UNCALIB_ACCELEROMETER_HANDLE	ID_UNCALIB_ACCELEROMETER
+#define SENSORS_BODY_TEMPERATURE_HANDLE		ID_BODY_TEMPERATURE
 
 #define SENSOR_TYPE_TAP				(SENSOR_TYPE_DEVICE_PRIVATE_BASE + 2)
 #define SENSOR_TYPE_ACTIVITY			(SENSOR_TYPE_DEVICE_PRIVATE_BASE + 3)
