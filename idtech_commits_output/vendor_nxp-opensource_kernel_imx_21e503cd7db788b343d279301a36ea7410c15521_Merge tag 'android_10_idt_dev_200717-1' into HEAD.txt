21e503cd7db7 George.Huang 2020-07-23

Merge tag 'android_10_idt_dev_200717-1' into HEAD

android_10_idt_dev_vp6820_8mn-userdebug-daily_6

Change-Id: Icd5857dc367f6ebcdd3082ea2a1f81b3f643b543

diff --cc arch/arm64/boot/dts/freescale/Makefile
index dd6056d0d8a9,6cf1aed84c95..2a310153529b
--- a/arch/arm64/boot/dts/freescale/Makefile
+++ b/arch/arm64/boot/dts/freescale/Makefile
@@@ -157,9 -123,23 +157,27 @@@ dtb-$(CONFIG_ARCH_MXC) += imx8qxp-mek.d
  			  imx8qxp-mek-ov5640-rpmsg-no-product-no-dynamic_partition.dtb
  dtb-$(CONFIG_ARCH_MXC) += imx8qxp-mek-dom0.dtb imx8qxp-mek-root.dtb \
  			  imx8qxp-mek-inmate.dtb
 +dtb-$(CONFIG_ARCH_MXC) += imx8dxl-evk.dtb imx8dxl-evk-rpmsg.dtb \
 +			  imx8dxl-evk-enet0.dtb imx8dxl-evk-enet0-tja1100.dtb imx8dxl-evk-pcie.dtb \
 +			  imx8dxl-evk-lpspi-slave.dtb \
 +			  imx8dxl-ddr3-evk.dtb
+ 
+ dtb-$(CONFIG_ARCH_MXC) += imx8mq-evk-idtech-spi.dtb \
+ 			 idt_imx8mq_evt-0_evk_dual-0_mic3g.dtb \
+ 			 idt_imx8mq_evt-0_evk_evk-0_mic3g.dtb \
+ 			 idt_imx8mq_evt-0_evk_idtechspi-0_mic3g.dtb \
+ 			 idt_imx8mq_evt-0_evk_mipi-0_mic3g.dtb \
+ 			 idt_imx8mq_evt-0_evk_mipipanel-0_mic3g.dtb \
+ 			 idt_imx8mq_evt-0_evk_lcdifrm67191-0_mic3g.dtb \
+ 			 idt_imx8mq_evt-0_evk_ram1gb-0_mic1g.dtb \
+ 			 idt_a300_evt-0_devboard_evt-0_ktc2g.dtb \
+ 			 idt_a300_evt-0_devboard_hdmi-0_ktc2g.dtb \
+ 			 idt_a300_evt-0_devboard_evt-1_ktc2g.dtb \
+ 			 idt_a300_evt-0_devboard_hdmi-1_ktc2g.dtb \
+ 			 idt_imx8mn_evt-0_evk_rpmsg-0_mic2g.dtb \
+ 			 idt_imx8mn_evt-0_evk_evk-0_mic2g.dtb \
+ 			 idt_a100_evt-0_devboard_evt-0_ktc2g.dtb
+ 
  dtb-$(CONFIG_ARCH_S32) += s32v234-evb.dtb \
  			  s32v234-sbc.dtb
+ 
diff --cc drivers/net/usb/qmi_wwan.c
index 3b7a3b8a5e06,6ac3dd09fcd4..9e3848618745
--- a/drivers/net/usb/qmi_wwan.c
+++ b/drivers/net/usb/qmi_wwan.c
@@@ -935,20 -946,38 +935,42 @@@ static const struct driver_info	qmi_wwa
  #define QMI_GOBI_DEVICE(vend, prod) \
  	QMI_FIXED_INTF(vend, prod, 0)
  
 -/* Quectel does not use fixed interface numbers on at least some of their
 - * devices. We need to check the number of endpoints to ensure that we bind to
 - * the correct interface.
 +/* Many devices have QMI and DIAG functions which are distinguishable
 + * from other vendor specific functions by class, subclass and
 + * protocol all being 0xff. The DIAG function has exactly 2 endpoints
 + * and is silently rejected when probed.
 + *
 + * This makes it possible to match dynamically numbered QMI functions
 + * as seen on e.g. many Quectel modems.
   */
 -#define QMI_QUIRK_QUECTEL_DYNCFG(vend, prod) \
 +#define QMI_MATCH_FF_FF_FF(vend, prod) \
  	USB_DEVICE_AND_INTERFACE_INFO(vend, prod, USB_CLASS_VENDOR_SPEC, \
  				      USB_SUBCLASS_VENDOR_SPEC, 0xff), \
 -	.driver_info = (unsigned long)&qmi_wwan_info_quirk_quectel_dyncfg
 +	.driver_info = (unsigned long)&qmi_wwan_info_quirk_dtr
  
  static const struct usb_device_id products[] = {
+ #if 1 //Added by Quectel
+ #ifndef QMI_FIXED_INTF
+ /* map QMI/wwan function by a fixed interface number */
+ #define QMI_FIXED_INTF(vend, prod, num) \
+ 	.match_flags = USB_DEVICE_ID_MATCH_DEVICE |
+ 	USB_DEVICE_ID_MATCH_INT_INFO, \
+ 	.idVendor = vend, \
+ 	.idProduct = prod, \
+ 	.bInterfaceClass = 0xff, \
+ 	.bInterfaceSubClass = 0xff, \
+ 	.bInterfaceProtocol = 0xff, \
+ 	.driver_info = (unsigned long)&qmi_wwan_force_int##num,
+ #endif
+ 	{ QMI_FIXED_INTF(0x05C6, 0x9003, 4) }, /* Quectel UC20 */
+ 	{ QMI_FIXED_INTF(0x2C7C, 0x0125, 4) }, /* Quectel EC25 */
+ 	{ QMI_FIXED_INTF(0x2C7C, 0x0121, 4) }, /* Quectel EC21 */
+ 	{ QMI_FIXED_INTF(0x05C6, 0x9215, 4) }, /* Quectel EC20 */
+ 	{ QMI_FIXED_INTF(0x2C7C, 0x0191, 4) }, /* Quectel EG91 */
+ 	{ QMI_FIXED_INTF(0x2C7C, 0x0195, 4) }, /* Quectel EG95 */
+ 	{ QMI_FIXED_INTF(0x2C7C, 0x0296, 4) }, /* Quectel BG96 */
+ 	{ QMI_FIXED_INTF(0x2C7C, 0x0435, 4) }, /* Quectel AG35 */
+ #endif
  	/* 1. CDC ECM like devices match on the control interface */
  	{	/* Huawei E392, E398 and possibly others sharing both device id and more... */
  		USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, USB_CLASS_VENDOR_SPEC, 1, 9),
diff --cc drivers/usb/serial/option.c
index 084cc2fff3ae,6ea9db9a3038..008e77613c1e
--- a/drivers/usb/serial/option.c
+++ b/drivers/usb/serial/option.c
@@@ -248,7 -248,9 +248,10 @@@ static void option_instat_callback(stru
  #define QUECTEL_PRODUCT_BG96			0x0296
  #define QUECTEL_PRODUCT_EP06			0x0306
  #define QUECTEL_PRODUCT_EM12			0x0512
 +#define QUECTEL_PRODUCT_RM500Q			0x0800
+ #define QUECTEL_PRODUCT_EG95			0x0195
+ #define QUECTEL_PRODUCT_EG91			0x0191
+ #define QUECTEL_PRODUCT_BG95			0x0700
  
  #define CMOTECH_VENDOR_ID			0x16d8
  #define CMOTECH_PRODUCT_6001			0x6001
diff --cc drivers/usb/serial/usb_wwan.c
index 13be21aad2f4,fbf92420f985..50b74836bc38
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@@ -471,10 -470,19 +471,23 @@@ static struct urb *usb_wwan_setup_urb(s
  	usb_fill_bulk_urb(urb, serial->dev,
  			  usb_sndbulkpipe(serial->dev, endpoint) | dir,
  			  buf, len, callback, ctx);
 +
 +	if (intfdata->use_zlp && dir == USB_DIR_OUT)
 +		urb->transfer_flags |= URB_ZERO_PACKET;
 +
+ #if 1 //Added by Quectel for zero packet
+ 	if (dir == USB_DIR_OUT) {
+ 		struct usb_device_descriptor *desc = &serial->dev->descriptor;
+ 		if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9090))
+ 			urb->transfer_flags |= URB_ZERO_PACKET;
+ 		if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9003))
+ 			urb->transfer_flags |= URB_ZERO_PACKET;
+ 		if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9215))
+ 			urb->transfer_flags |= URB_ZERO_PACKET;
+ 		if (desc->idVendor == cpu_to_le16(0x2C7C))
+ 			urb->transfer_flags |= URB_ZERO_PACKET;
+ 	}
+ #endif
  	return urb;
  }
  
