afb57569d0fa Arthur Chen 2020-05-21

AOS-200: drivers: goodix: Fix porting issue.

    Add interrupt & reset pin output control to choose needed i2c slave address
    in power on sequence of gt911 initialization.
    Inverted logic about the interrupt pin control in orginal source defined to
    match the SPEC description of gt911 initialization about i2c slave address.

Change-Id: Ic227b6f4a7c8ce951d3133c90ea014d08207ddff

diff --git a/drivers/input/touchscreen/goodix.c b/drivers/input/touchscreen/goodix.c
index f2d9c2c41885..f7d842d577b9 100644
--- a/drivers/input/touchscreen/goodix.c
+++ b/drivers/input/touchscreen/goodix.c
@@ -31,6 +31,8 @@
 #include <linux/acpi.h>
 #include <linux/of.h>
 #include <asm/unaligned.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
 
 struct goodix_ts_data;
 
@@ -54,13 +56,15 @@ struct goodix_ts_data {
 	const char *cfg_name;
 	struct completion firmware_loading_complete;
 	unsigned long irq_flags;
+	unsigned irq_tmp;
+	unsigned rst_tmp;
 };
 
 #define GOODIX_GPIO_INT_NAME		"irq"
 #define GOODIX_GPIO_RST_NAME		"reset"
 
-#define GOODIX_MAX_HEIGHT		4096
-#define GOODIX_MAX_WIDTH		4096
+#define GOODIX_MAX_HEIGHT		1280
+#define GOODIX_MAX_WIDTH		720
 #define GOODIX_INT_TRIGGER		1
 #define GOODIX_CONTACT_SIZE		8
 #define GOODIX_MAX_CONTACTS		10
@@ -298,6 +302,8 @@ static void goodix_ts_report_touch(struct goodix_ts_data *ts, u8 *coor_data)
 			       input_x, input_y, true);
 	input_report_abs(ts->input_dev, ABS_MT_TOUCH_MAJOR, input_w);
 	input_report_abs(ts->input_dev, ABS_MT_WIDTH_MAJOR, input_w);
+	dev_dbg(&ts->client->dev, "goodix_ts_report_touch(), "
+		"X=%d, Y=%d, W=%d
", input_x, input_y, input_w);
 }
 
 /**
@@ -314,6 +320,7 @@ static void goodix_process_events(struct goodix_ts_data *ts)
 	int touch_num;
 	int i;
 
+	dev_dbg(&ts->client->dev, "goodix_process_events()
");
 	touch_num = goodix_ts_read_input_report(ts, point_data);
 	if (touch_num < 0)
 		return;
@@ -357,6 +364,12 @@ static void goodix_free_irq(struct goodix_ts_data *ts)
 
 static int goodix_request_irq(struct goodix_ts_data *ts)
 {
+	if (gpio_is_valid(ts->irq_tmp))
+			ts->client->irq = gpio_to_irq(ts->irq_tmp);
+
+	dev_info(&ts->client->dev, "goodix_request_irq(), irq = %d, type=%d
",
+		 ts->client->irq, ts->irq_flags);
+
 	return devm_request_threaded_irq(&ts->client->dev, ts->client->irq,
 					 NULL, goodix_ts_irq_handler,
 					 ts->irq_flags, ts->client->name, ts);
@@ -439,6 +452,7 @@ static int goodix_send_cfg(struct goodix_ts_data *ts,
 {
 	int error;
 
+	dev_info(&ts->client->dev, "goodix_send_cfg()");
 	error = goodix_check_cfg(ts, cfg);
 	if (error)
 		return error;
@@ -450,7 +464,7 @@ static int goodix_send_cfg(struct goodix_ts_data *ts,
 			error);
 		return error;
 	}
-	dev_dbg(&ts->client->dev, "Config sent successfully.");
+	dev_info(&ts->client->dev, "Config sent successfully.");
 
 	/* Let the firmware reconfigure itself, so sleep for 10ms */
 	usleep_range(10000, 11000);
@@ -462,6 +476,7 @@ static int goodix_int_sync(struct goodix_ts_data *ts)
 {
 	int error;
 
+	dev_info(&ts->client->dev, "goodix_int_sync()");
 	error = gpiod_direction_output(ts->gpiod_int, 0);
 	if (error)
 		return error;
@@ -484,6 +499,8 @@ static int goodix_reset(struct goodix_ts_data *ts)
 {
 	int error;
 
+	dev_info(&ts->client->dev, "goodix_reset()");
+
 	/* begin select I2C slave addr */
 	error = gpiod_direction_output(ts->gpiod_rst, 0);
 	if (error)
@@ -492,7 +509,8 @@ static int goodix_reset(struct goodix_ts_data *ts)
 	msleep(20);				/* T2: > 10ms */
 
 	/* HIGH: 0x28/0x29, LOW: 0xBA/0xBB */
-	error = gpiod_direction_output(ts->gpiod_int, ts->client->addr == 0x14);
+	error = gpiod_direction_output(ts->gpiod_int,
+				       !(ts->client->addr == 0x14));
 	if (error)
 		return error;
 
@@ -526,11 +544,13 @@ static int goodix_get_gpio_config(struct goodix_ts_data *ts)
 	int error;
 	struct device *dev;
 	struct gpio_desc *gpiod;
+	struct device_node *np;
 
 	if (!ts->client)
 		return -EINVAL;
-	dev = &ts->client->dev;
 
+	dev = &ts->client->dev;
+	np = dev->of_node;
 	/* Get the interrupt GPIO pin number */
 	gpiod = devm_gpiod_get_optional(dev, GOODIX_GPIO_INT_NAME, GPIOD_IN);
 	if (IS_ERR(gpiod)) {
@@ -542,6 +562,7 @@ static int goodix_get_gpio_config(struct goodix_ts_data *ts)
 	}
 
 	ts->gpiod_int = gpiod;
+	ts->irq_tmp = of_get_named_gpio(np, "irq-gpio", 0);
 
 	/* Get the reset line GPIO pin number */
 	gpiod = devm_gpiod_get_optional(dev, GOODIX_GPIO_RST_NAME, GPIOD_IN);
@@ -555,6 +576,12 @@ static int goodix_get_gpio_config(struct goodix_ts_data *ts)
 
 	ts->gpiod_rst = gpiod;
 
+	ts->rst_tmp = of_get_named_gpio(np, "reset-gpio", 0);
+
+	dev_info(&ts->client->dev, "IRQ1 = %d, RST1 = %d, "
+		 "IRQ2 = %d, RST2 = %d
", ts->gpiod_int, ts->gpiod_rst,
+		 ts->irq_tmp, ts->rst_tmp);
+
 	return 0;
 }
 
@@ -661,6 +688,7 @@ static int goodix_configure_dev(struct goodix_ts_data *ts)
 {
 	int error;
 
+	dev_info(&ts->client->dev, "goodix_configure_dev()");
 	ts->int_trigger_type = GOODIX_INT_TRIGGER;
 	ts->max_touch_num = GOODIX_MAX_CONTACTS;
 
@@ -747,6 +775,7 @@ static void goodix_config_cb(const struct firmware *cfg, void *ctx)
 	struct goodix_ts_data *ts = ctx;
 	int error;
 
+	dev_info(&ts->client->dev, "goodix_config_cb()");
 	if (cfg) {
 		/* send device configuration to the firmware */
 		error = goodix_send_cfg(ts, cfg);
@@ -832,6 +861,7 @@ static int goodix_ts_probe(struct i2c_client *client,
 		if (error)
 			return error;
 	}
+	dev_info(&client->dev, "goodix_ts_probe() end!
");
 
 	return 0;
 }
