2e191aea20 George.Huang 2020-07-22

Merge tag 'android_10_idt_dev_200717-1' into test_0722

 Conflicts:
	arch/arm/dts/Makefile
	arch/arm/include/asm/arch-imx8/sci/sci.h
	arch/arm/mach-imx/Kconfig
	arch/arm/mach-imx/imx8m/Kconfig
	board/freescale/imx8mn_evk/Kconfig
	board/freescale/imx8mq_evk/imx8mq_evk.c
	configs/imx8mn_ddr4_evk_android_trusty_dual_defconfig
	drivers/fastboot/fb_fsl/fb_fsl_boot.c
	drivers/usb/gadget/f_fastboot.c
	include/configs/imx8mn_evk_android.h
	include/configs/imx8mq_evk_android.h
	lib/Makefile
	lib/avb/fsl/fsl_avb_ab_flow.c
	lib/libavb/avb_slot_verify.c

Change-Id: I3b30143deb9229d125f4f37debdff753f1d673d0

diff --cc arch/arm/dts/Makefile
index cd506c2e7a,cd1bd94780..07710e7d3f
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@@ -738,66 -600,44 +738,82 @@@ dtb-$(CONFIG_MX7) += imx7d-sdb.dtb 
  	imx7-colibri-emmc.dtb \
  	imx7-colibri-rawnand.dtb \
  	imx7s-warp.dtb \
 -	imx7d-12x12-lpddr3-arm2.dtb \
 -	imx7d-12x12-lpddr3-arm2-ecspi.dtb \
 -	imx7d-12x12-lpddr3-arm2-qspi.dtb \
 -	imx7d-12x12-ddr3-arm2.dtb \
 -	imx7d-19x19-ddr3-arm2.dtb \
 -	imx7d-19x19-lpddr2-arm2.dtb \
 -	imx7d-19x19-lpddr3-arm2.dtb
 -
 -dtb-$(CONFIG_ARCH_MX7ULP) += imx7ulp-evk.dtb \
 +	imx7d-meerkat96.dtb \
 +	imx7d-pico-pi.dtb \
 +	imx7d-pico-hobbit.dtb \
 +	imx7d-12x12-lpddr3-val.dtb \
 +	imx7d-12x12-lpddr3-val-ecspi.dtb \
 +	imx7d-12x12-lpddr3-val-qspi.dtb \
 +	imx7d-12x12-ddr3-val.dtb \
 +	imx7d-19x19-ddr3-val.dtb \
 +	imx7d-19x19-lpddr2-val.dtb \
 +	imx7d-19x19-lpddr3-val.dtb
 +
 +
 +dtb-$(CONFIG_ARCH_MX7ULP) += imx7ulp-com.dtb \
 +	imx7ulp-10x10-val.dtb \
 +	imx7ulp-14x14-val.dtb \
 +	imx7ulp-evk.dtb \
  	imx7ulp-evk-emmc.dtb \
 -	imx7ulp-evk-qspi.dtb \
 -	imx7ulp-10x10-arm2.dtb \
 -	imx7ulp-14x14-arm2.dtb
 +	imx7ulp-evk-qspi.dtb
  
 -dtb-$(CONFIG_ARCH_IMX8) += fsl-imx8qxp-mek.dtb \
 +dtb-$(CONFIG_ARCH_IMX8) += \
 +	fsl-imx8qm-apalis.dtb \
  	fsl-imx8qm-mek.dtb \
 +	fsl-imx8qm-ddr4-val.dtb \
 +	fsl-imx8qm-lpddr4-val.dtb \
 +	fsl-imx8qm-mek-xen.dtb \
  	fsl-imx8qm-mek-auto.dtb \
  	fsl-imx8qm-mek-auto2.dtb \
 -	fsl-imx8qxp-mek-auto.dtb \
 -	fsl-imx8qm-ddr4-arm2.dtb \
 -	fsl-imx8qm-lpddr4-arm2.dtb \
 -	fsl-imx8qxp-lpddr4-arm2.dtb \
 -	fsl-imx8qxp-lpddr4-arm2-gpmi-nand.dtb \
 +	imx8qm-rom7720-a1.dtb \
 +	fsl-imx8qxp-ai_ml.dtb \
 +	fsl-imx8qxp-colibri.dtb \
 +	fsl-imx8qxp-mek.dtb \
 +	fsl-imx8qxp-lpddr4-val.dtb \
 +	fsl-imx8qxp-lpddr4-val-gpmi-nand.dtb \
  	fsl-imx8qxp-17x17-val.dtb \
  	fsl-imx8dx-17x17-val.dtb \
++<<<<<<< HEAD
 +	fsl-imx8qxp-mek-auto.dtb \
 +	fsl-imx8dx-mek.dtb \
 +	fsl-imx8dxl-phantom-mek.dtb \
 +	fsl-imx8dxl-evk.dtb \
 +	fsl-imx8dxl-ddr3-val.dtb \
 +	imx8-deneb.dtb \
 +	imx8-giedi.dtb
 +
 +dtb-$(CONFIG_ARCH_IMX8M) += \
 +	imx8mm-evk.dtb \
 +	imx8mm-ddr4-evk.dtb \
 +	imx8mm-ddr3l-val.dtb \
 +	imx8mm-ddr4-val.dtb \
 +	imx8mm-verdin.dtb \
 +	imx8mn-ddr4-evk.dtb \
 +	imx8mn-evk.dtb \
 +	imx8mq-ddr3l-val.dtb \
 +	imx8mq-ddr4-val.dtb \
 +	imx8mq-evk.dtb \
 +	imx8mp-evk.dtb \
 +	imx8mm-ab2.dtb \
 +	imx8mn-ddr4-ab2.dtb \
 +	imx8mn-ab2.dtb
 +
 +dtb-$(CONFIG_ARCH_IMXRT) += imxrt1050-evk.dtb
++=======
+ 	fsl-imx8dxl-phantom-mek.dtb
+ 
+ dtb-$(CONFIG_ARCH_IMX8M) += fsl-imx8mq-evk.dtb \
+ 		fsl-imx8mq-ddr3l-arm2.dtb \
+ 		fsl-imx8mq-ddr4-arm2.dtb \
+ 		fsl-imx8mm-evk.dtb \
+ 		fsl-imx8mm-ddr3l-val.dtb \
+ 		fsl-imx8mm-ddr4-evk.dtb \
+ 		fsl-imx8mm-ddr4-val.dtb \
+ 		fsl-imx8mm-evk.dtb \
+ 		fsl-imx8mn-ddr4-evk.dtb \
+ 		fsl-imx8mn-a100.dtb \
+ 		fsl-imx8mq-aiy.dtb
++>>>>>>> test_tagg
  
  dtb-$(CONFIG_RCAR_GEN2) += \
  	r8a7790-lager-u-boot.dtb \
diff --cc arch/arm/include/asm/arch-imx8/sci/sci.h
index 5459d7e28b,542b864240..073bf02c01
--- a/arch/arm/include/asm/arch-imx8/sci/sci.h
+++ b/arch/arm/include/asm/arch-imx8/sci/sci.h
@@@ -113,34 -117,28 +113,54 @@@ int sc_rm_get_resource_owner(sc_ipc_t i
  
  /* PAD API */
  int sc_pad_set(sc_ipc_t ipc, sc_pad_t pad, u32 val);
 +int sc_pad_get(sc_ipc_t ipc, sc_pad_t pad, uint32_t *val);
  
  /* SMMU API */
 -int sc_rm_set_master_sid(sc_ipc_t ipc, sc_rsrc_t resource,
 -    sc_rm_sid_t sid);
 +int sc_rm_set_master_sid(sc_ipc_t ipc, sc_rsrc_t resource, sc_rm_sid_t sid);
 +
 +/* Timer API */
 +int sc_timer_set_wdog_window(sc_ipc_t ipc, sc_timer_wdog_time_t window);
  
  /* SECO API */
++<<<<<<< HEAD
 +int sc_seco_authenticate(sc_ipc_t ipc, sc_seco_auth_cmd_t cmd,
 +			 sc_faddr_t addr);
 +int sc_seco_forward_lifecycle(sc_ipc_t ipc, u32 change);
 +int sc_seco_chip_info(sc_ipc_t ipc, u16 *lc, u16 *monotonic, u32 *uid_l,
 +		      u32 *uid_h);
 +void sc_seco_build_info(sc_ipc_t ipc, u32 *version, u32 *commit);
 +int sc_seco_get_event(sc_ipc_t ipc, u8 idx, u32 *event);
 +int sc_seco_gen_key_blob(sc_ipc_t ipc, u32 id, sc_faddr_t load_addr,
 +			 sc_faddr_t export_addr, u16 max_size);
 +int sc_seco_get_mp_key(sc_ipc_t ipc, sc_faddr_t dst_addr,
 +			u16 dst_size);
 +int sc_seco_update_mpmr(sc_ipc_t ipc, sc_faddr_t addr,
 +			u8 size, u8 lock);
 +int sc_seco_get_mp_sign(sc_ipc_t ipc, sc_faddr_t msg_addr,
 +			u16 msg_size, sc_faddr_t dst_addr, u16 dst_size);
 +int sc_seco_secvio_config(sc_ipc_t ipc, u8 id, u8 access,
 +	u32 *data0, u32 *data1, u32 *data2, u32 *data3,
 +	u32 *data4, u8 size);
 +int sc_seco_secvio_dgo_config(sc_ipc_t ipc, u8 id, u8 access,
 +	u32 *data);
++=======
+ int sc_seco_authenticate(sc_ipc_t ipc,
+ 	sc_seco_auth_cmd_t cmd, sc_faddr_t addr);
+ int sc_seco_forward_lifecycle(sc_ipc_t ipc, uint32_t change);
+ int sc_seco_chip_info(sc_ipc_t ipc, uint16_t *lc,
+ 	uint16_t *monotonic, uint32_t *uid_l, uint32_t *uid_h);
+ void sc_seco_build_info(sc_ipc_t ipc, uint32_t *version,
+ 	uint32_t *commit);
+ int sc_seco_get_event(sc_ipc_t ipc, uint8_t idx,
+ 	uint32_t *event);
+ int sc_seco_gen_key_blob(sc_ipc_t ipc, uint32_t id,
+ 	sc_faddr_t load_addr, sc_faddr_t export_addr, uint16_t max_size);
+ int sc_seco_get_mp_key(sc_ipc_t ipc, sc_faddr_t dst_addr,
+ 			uint16_t dst_size);
+ int sc_seco_update_mpmr(sc_ipc_t ipc, sc_faddr_t addr,
+ 			uint8_t size, uint8_t lock);
+ int sc_seco_get_mp_sign(sc_ipc_t ipc, sc_faddr_t msg_addr,
+ 			uint16_t msg_size, sc_faddr_t dst_addr, uint16_t dst_size);
++>>>>>>> test_tagg
  
  #endif
diff --cc arch/arm/mach-imx/Kconfig
index d3369eaee6,0fa8f8cfac..4ee305dd15
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@@ -145,21 -138,9 +145,25 @@@ config CMD_HDMIDETEC
  	  This enables the 'hdmidet' command which detects if an HDMI monitor
  	  is connected.
  
 +config CMD_NANDBCB
 +	bool "i.MX6 NAND Boot Control Block(BCB) command"
 +	depends on MTD_RAW_NAND && CMD_MTDPARTS
 +	select BCH if MX6UL || MX6ULL
 +	default y if ((ARCH_MX6 || ARCH_MX7 || ARCH_IMX8M || ARCH_IMX8) && NAND_MXS)
 +	help
 +	  Unlike normal 'nand write/erase' commands, this command update
 +	  Boot Control Block(BCB) for i.MX6 platform NAND IP's.
 +
 +	  This is similar to kobs-ng, which is used in Linux as separate
 +	  rootfs package.
 +
  config FSL_MFGPROT
  	bool "Support the 'mfgprot' command"
++<<<<<<< HEAD
 +	depends on IMX_HAB || AHAB_BOOT
++=======
+ 	depends on SECURE_BOOT || AHAB_BOOT
++>>>>>>> test_tagg
  	select IMX_CAAM_MFG_PROT if ARCH_MX7
  	select IMX_SECO_MFG_PROT if ARCH_IMX8
  	help
diff --cc arch/arm/mach-imx/imx8m/Kconfig
index fb6dfe3355,f73a28fc50..3eee48dcfa
--- a/arch/arm/mach-imx/imx8m/Kconfig
+++ b/arch/arm/mach-imx/imx8m/Kconfig
@@@ -55,14 -40,28 +55,20 @@@ config TARGET_IMX8MQ_EV
  	select IMX8MQ
  	select IMX8M_LPDDR4
  
 -config TARGET_IMX8MQ_DDR3L_ARM2
 -	bool "imx8mq_ddr3l_arm2"
 +config TARGET_IMX8MQ_DDR3L_VAL
 +	bool "imx8mq_ddr3l_val"
  	select IMX8MQ
 -	select SUPPORT_SPL
  
 -config TARGET_IMX8MQ_DDR4_ARM2
 -	bool "imx8mq_ddr4_arm2"
 +config TARGET_IMX8MQ_DDR4_VAL
 +	bool "imx8mq_ddr4_val"
  	select IMX8MQ
 -	select SUPPORT_SPL
 -
 -config TARGET_IMX8MQ_AIY
 -	bool "imx8mq_aiy"
 -	select IMX8MQ
 -	select SUPPORT_SPL
 -	select IMX8M_LPDDR4
  
+ config TARGET_IMX8MQ_A300
+ 	bool "imx8mq_a300"
+ 	select IMX8MQ
+ 	select SUPPORT_SPL
+ 	select IMX8M_LPDDR4
+ 
  config TARGET_IMX8MM_DDR4_VAL
  	bool "imx8mm DDR4 validation board"
  	select IMX8MM
@@@ -99,45 -90,21 +105,63 @@@ config TARGET_IMX8MN_DDR4_EV
  	select SUPPORT_SPL
  	select IMX8M_DDR4
  
++<<<<<<< HEAD
 +config TARGET_IMX8MP_EVK
 +	bool "imx8mp LPDDR4 EVK board"
 +	select IMX8MP
 +	select SUPPORT_SPL
 +	select IMX8M_LPDDR4
 +
 +config TARGET_IMX8MM_AB2
 +	bool "imx8mm LPDDR4 Audio board 2.0"
 +	select IMX8MM
 +	select SUPPORT_SPL
 +	select IMX8M_LPDDR4
 +
 +config TARGET_IMX8MN_AB2
 +	bool "imx8mn LPDDR4 Audio board 2.0"
++=======
+ config TARGET_IMX8MN_A100
+ 	bool "imx8mn_a100"
++>>>>>>> test_tagg
  	select IMX8MN
  	select SUPPORT_SPL
  	select IMX8M_LPDDR4
  
++<<<<<<< HEAD
 +config TARGET_IMX8MN_DDR4_AB2
 +	bool "imx8mn DDR4 Audio board 2.0"
 +	select IMX8MN
 +	select SUPPORT_SPL
 +	select IMX8M_DDR4
 +
 +config TARGET_VERDIN_IMX8MM
 +       bool "Support Toradex Verdin iMX8M Mini module"
 +       select IMX8MM
 +       select SUPPORT_SPL
 +       select IMX8M_LPDDR4
 +
 +endchoice
 +
 +source "board/freescale/imx8mq_evk/Kconfig"
 +source "board/freescale/imx8mq_val/Kconfig"
 +source "board/freescale/imx8mm_ab2/Kconfig"
 +source "board/freescale/imx8mm_evk/Kconfig"
 +source "board/freescale/imx8mm_val/Kconfig"
 +source "board/freescale/imx8mn_evk/Kconfig"
 +source "board/freescale/imx8mp_evk/Kconfig"
 +source "board/toradex/verdin-imx8mm/Kconfig"
++=======
+ endchoice
+ 
+ source "board/freescale/imx8mq_evk/Kconfig"
+ source "board/freescale/imx8mq_arm2/Kconfig"
+ source "board/freescale/imx8mq_aiy/Kconfig"
+ source "board/freescale/imx8mq_a300/Kconfig"
+ source "board/freescale/imx8mm_evk/Kconfig"
+ source "board/freescale/imx8mm_val/Kconfig"
+ source "board/freescale/imx8mn_evk/Kconfig"
+ source "board/freescale/imx8mn_a100/Kconfig"
++>>>>>>> test_tagg
  
  endif
diff --cc board/freescale/imx8mn_evk/Kconfig
index ace6fc1e39,1d632aa98c..d205dea44e
--- a/board/freescale/imx8mn_evk/Kconfig
+++ b/board/freescale/imx8mn_evk/Kconfig
@@@ -9,6 -9,33 +9,36 @@@ config SYS_VENDO
  config SYS_CONFIG_NAME
  	default "imx8mn_evk"
  
++<<<<<<< HEAD
++=======
+ config IMX8MN_FORCE_NOM_SOC
+ 	bool "Force to use nominal mode for SOC and ARM"
+ 	default n
+ 
+ config IDT_VALID_AVBKEY
+ 	bool "IDT validate avb key before booting"
+ 	help
+ 	  This option should be enable when the vbmeta is signed by
+ 	  IDT key (This will be done on BoardCOnfig.mk), then u-boot
+ 	  should validate this key with build-in public key before
+ 	  booting into kernel.
+ 
+ config IDT_DUAL_SPL
+ 	bool "IDT dual spl feature"
+ 	help
+ 	  This option could be enabled when CONFIG_DUAL_BOOTLOADER
+ 	  is also enabled. It will help switch to new spl/bootloader
+ 	  pair even if SRK key set is changed.
+ 
+ config IDT_BACKUP_SPL
+ 	bool "IDT backup spl feature"
+ 	help
+ 	  This option could be enabled when CONFIG_DUAL_BOOTLOADER
+ 	  is also enabled. It will backup primary spl to offset
+ 	  0x200000 as secondary spl which will be loaded by Boot_ROM
+ 	  once if primary spl is corrupted.
+ 
++>>>>>>> test_tagg
  source "board/freescale/common/Kconfig"
  
  endif
diff --cc board/freescale/imx8mq_evk/imx8mq_evk.c
index 73dc82f7cf,6a386665db..1923cfc54b
--- a/board/freescale/imx8mq_evk/imx8mq_evk.c
+++ b/board/freescale/imx8mq_evk/imx8mq_evk.c
@@@ -64,7 -65,41 +65,28 @@@ int board_qspi_init(void
  }
  #endif
  
++<<<<<<< HEAD
++=======
+ int dram_init(void)
+ {
+ 	unsigned int mem_size = PHYS_SDRAM_SIZE;
+ #if defined(CONFIG_IDT_MULTIPLE_DDR)
+ 	memcpy((void*)&mem_size, (void*)DEV_MEM_SIZE_BASE, sizeof(unsigned int));
+ 	mem_size *= 1024;
+ 	printf("idt set to ");
+ #endif
+ 
+ 	/* rom_pointer[1] contains the size of TEE occupies */
+ 	if (rom_pointer[1])
+ 		gd->ram_size = mem_size - rom_pointer[1];
+ 	else
+ 		gd->ram_size = mem_size;
+ 
+ 	return 0;
+ }
+ 
++>>>>>>> test_tagg
  #ifdef CONFIG_FEC_MXC
 -#define FEC_RST_PAD IMX_GPIO_NR(1, 9)
 -static iomux_v3_cfg_t const fec1_rst_pads[] = {
 -	IMX8MQ_PAD_GPIO1_IO09__GPIO1_IO9 | MUX_PAD_CTRL(NO_PAD_CTRL),
 -};
 -
 -static void setup_iomux_fec(void)
 -{
 -	imx_iomux_v3_setup_multiple_pads(fec1_rst_pads,
 -					 ARRAY_SIZE(fec1_rst_pads));
 -
 -	gpio_request(IMX_GPIO_NR(1, 9), "fec1_rst");
 -	gpio_direction_output(IMX_GPIO_NR(1, 9), 0);
 -	udelay(500);
 -	gpio_direction_output(IMX_GPIO_NR(1, 9), 1);
 -}
 -
  static int setup_fec(void)
  {
  	struct iomuxc_gpr_base_regs *gpr =
diff --cc board/freescale/imx8mq_evk/spl.c
index bb8211dd7c,05431e67d9..5127ad0bca
--- a/board/freescale/imx8mq_evk/spl.c
+++ b/board/freescale/imx8mq_evk/spl.c
@@@ -28,8 -26,9 +28,9 @@@
  DECLARE_GLOBAL_DATA_PTR;
  
  extern struct dram_timing_info dram_timing_b0;
+ extern void idt_spl_dram_init(void);
  
 -void spl_dram_init(void)
 +static void spl_dram_init(void)
  {
  	/* ddr init */
  	if ((get_cpu_rev() & 0xfff) == CHIP_REV_2_1)
diff --cc common/board_f.c
index 977a027444,e99e154143..d7f3c93053
--- a/common/board_f.c
+++ b/common/board_f.c
@@@ -914,9 -877,12 +915,10 @@@ static const init_fnc_t init_sequence_f
  	serial_init,		/* serial communications setup */
  #endif
  	console_init_f,		/* stage 1 init of console */
+ #endif
  	display_options,	/* say that we are here */
  	display_text_info,	/* show debugging info if required */
 -#if defined(CONFIG_PPC) || defined(CONFIG_SH) || defined(CONFIG_X86)
  	checkcpu,
 -#endif
  #if defined(CONFIG_SYSRESET)
  	print_resetinfo,
  #endif
diff --cc common/spl/spl_mmc.c
index 748f6e0970,e35500d860..122a4972d3
--- a/common/spl/spl_mmc.c
+++ b/common/spl/spl_mmc.c
@@@ -143,8 -133,11 +143,8 @@@ static int spl_mmc_get_device_index(u3
  	return -ENODEV;
  }
  
- static int spl_mmc_find_device(struct mmc **mmcp, u32 boot_device)
+ int spl_mmc_find_device(struct mmc **mmcp, u32 boot_device)
  {
 -#if CONFIG_IS_ENABLED(DM_MMC)
 -	struct udevice *dev;
 -#endif
  	int err, mmc_dev;
  
  	mmc_dev = spl_mmc_get_device_index(boot_device);
diff --cc drivers/fastboot/fb_fsl/fb_fsl_boot.c
index 9df5e85a9e,af7bf1358f..3ab2ef8ad8
--- a/drivers/fastboot/fb_fsl/fb_fsl_boot.c
+++ b/drivers/fastboot/fb_fsl/fb_fsl_boot.c
@@@ -544,8 -545,91 +545,96 @@@ static int find_partition_data_by_name(
  		return 0;
  }
  
++<<<<<<< HEAD
 +bool __weak is_power_key_pressed(void) {
 +	return false;
++=======
+ #define GET_BYTE(x, n)  ((x & (0xff << 8 * n)) >> 8 * n)
+ #define FDT_ID_SIZE	128 /* the maximun size of idt,prod-id is 128 */
+ 
+ int find_dtb_in_dtbo(struct dt_table_header *dt_img)
+ {
+ 	int fdt_idx = 1;
+ 	u32 dtbo_id;
+ 	u32 fdt_size;
+ 	int len;
+ 	char *fdt_blob;
+ 	char *fdt_id;
+ 	struct dt_table_entry *dt_entry;
+ 	const struct fdt_property *fdt_prop;
+ 
+ 	fdt_id = malloc(sizeof(char) * FDT_ID_SIZE);
+ 	if (get_dtb_id(fdt_id, FDT_ID_SIZE)) {
+ 		printf("Selected ID: %s
", fdt_id);
+ 	} else {
+ 		puts("Can't get ID from Board info partition
");
+ 		fdt_idx = -1;
+ 		goto find_out;
+ 	}
+ 
+ 	while (fdt_idx < fdt32_to_cpu(dt_img->dt_entry_count) + 1) {
+ 		dt_entry = (struct dt_table_entry *)
+ 			   ((ulong)dt_img +
+ 			    fdt32_to_cpu(dt_img->dt_entries_offset) * fdt_idx);
+ 		fdt_size = fdt32_to_cpu(dt_entry->dt_size);
+ 		dtbo_id = fdt32_to_cpu(dt_entry->id);
+ 		printf("DTBO ID: %lx (", (ulong)dtbo_id);
+ 		for (len = 3; len >= 0; len--) {
+ 			if ((GET_BYTE(dtbo_id, len) > 31) &&
+ 			    (GET_BYTE(dtbo_id, len) < 127))
+ 				printf("%c", GET_BYTE(dtbo_id, len));
+ 		}
+ 		printf(")	 @ %lx (%d)
",
+ 		       ((ulong)dt_img +
+ 		        fdt32_to_cpu(dt_entry->dt_offset)),
+ 		       fdt_size);
+ 		fdt_blob = (void *)(ulong)dt_img + fdt32_to_cpu(dt_entry->dt_offset);
+ 		if (fdt_check_header(fdt_blob) != 0) {
+ 			puts("image is not a fdt
");
+ 			fdt_idx = -1;
+ 			break;
+ 		}
+ 
+ 		if (fdt_totalsize(fdt_blob) != fdt_size) {
+ 			printf("fdt size != image size (%d)
", fdt_size);
+ 			fdt_idx = -1;
+ 			break;
+ 		}
+ 
+ 		fdt_prop = fdt_get_property(fdt_blob,
+ 					    fdt_path_offset(fdt_blob,
+ 							    "/"),
+ 					    "compatible",
+ 					    &len);
+ 		if (len >= 0)
+ 			printf("FDT compatible: %s
", fdt_prop->data);
+ 
+ 		fdt_prop = fdt_get_property(fdt_blob,
+ 		                            fdt_path_offset(fdt_blob,
+ 							    "/"),
+ 					    "idt,prod-id",
+ 					    &len);
+ 		if (len >= 0) {
+ 			printf("FDT idt,prod-id: %s
", fdt_prop->data);
+ 			if (!strncmp(fdt_id, fdt_prop->data,
+ 				     strlen(fdt_prop->data))) {
+ 				printf("## Selected Flattened"
+ 				       " Device Tree: %s
", fdt_prop->data);
+ 				break;
+ 			}
+ 		}
+ 		fdt_idx++;
+ 	}
+ 	if (fdt_idx > fdt32_to_cpu(dt_img->dt_entry_count)) {
+ 		puts("Can't find ID in DTBO
");
+ 		fdt_idx = -1;
+ 	}
+ 
+ find_out:
+ 	free(fdt_id);
+ 
+ 	return fdt_idx;
++>>>>>>> test_tagg
  }
  
  int do_boota(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[]) {
diff --cc drivers/fastboot/fb_fsl/fb_fsl_command.c
index fdbb2c0fbb,15a097f8f2..3a1ed73341
mode 100644,100755..100644
--- a/drivers/fastboot/fb_fsl/fb_fsl_command.c
+++ b/drivers/fastboot/fb_fsl/fb_fsl_command.c
diff --cc drivers/fastboot/fb_fsl/fb_fsl_dev.c
index 57caab63e0,be2547e9c4..17a8e5e557
--- a/drivers/fastboot/fb_fsl/fb_fsl_dev.c
+++ b/drivers/fastboot/fb_fsl/fb_fsl_dev.c
@@@ -17,9 -17,10 +17,10 @@@
  #include <asm/mach-imx/boot_mode.h>
  #include <asm/arch/sys_proto.h>
  #include <asm/setup.h>
 -#include <environment.h>
 +#include <env.h>
  
  #include "fb_fsl_common.h"
+ #include <persist_idt.h>
  
  static lbaint_t mmc_sparse_write(struct sparse_storage *info,
  		lbaint_t blk, lbaint_t blkcnt, const void *buffer)
diff --cc drivers/fastboot/fb_fsl/fb_fsl_partitions.c
index b1a3d591f2,ee72ce1b31..35910bc91f
--- a/drivers/fastboot/fb_fsl/fb_fsl_partitions.c
+++ b/drivers/fastboot/fb_fsl/fb_fsl_partitions.c
@@@ -51,9 -55,9 +55,9 @@@ enum 
  struct fastboot_ptentry g_ptable[MAX_PTN];
  unsigned int g_pcount;
  
- static ulong bootloader_mmc_offset(void)
+ ulong bootloader_mmc_offset(void)
  {
 -	if (is_imx8mq() || is_imx8mm() || (is_imx8() && is_soc_rev(CHIP_REV_A)))
 +	if (is_imx8mq() || is_imx8mm() || ((is_imx8qm() || is_imx8qxp()) && is_soc_rev(CHIP_REV_A)))
  		return 0x8400;
  	else if (is_imx8qm() || (is_imx8qxp() && !is_soc_rev(CHIP_REV_B))) {
  		if (MEK_8QM_EMMC == fastboot_devinfo.dev_id)
diff --cc drivers/usb/gadget/f_fastboot.c
index e6a7c7afd3,7a22101687..b2cd329955
--- a/drivers/usb/gadget/f_fastboot.c
+++ b/drivers/usb/gadget/f_fastboot.c
@@@ -20,8 -19,7 +20,12 @@@
  #include <linux/usb/composite.h>
  #include <linux/compiler.h>
  #include <g_dnl.h>
++<<<<<<< HEAD
 +#include <serial.h>
 +#include <stdio_dev.h>
++=======
+ #include <persist_idt.h>
++>>>>>>> test_tagg
  
  #define FASTBOOT_INTERFACE_CLASS	0xff
  #define FASTBOOT_INTERFACE_SUB_CLASS	0x42
@@@ -290,14 -283,10 +293,14 @@@ static int fastboot_bind(struct usb_con
  		f->ss_descriptors = fb_ss_function;
  	}
  
- 	s = env_get("serial#");
- 	if (s)
- 		g_dnl_set_serialnumber((char *)s);
+ 	char idt_serial[BDINFO_DATA_SIZE] = "";
+ 	idt_get_board_serial(idt_serial);
+ 	g_dnl_set_serialnumber((char *)idt_serial);
  
 +#if CONFIG_IS_ENABLED(FASTBOOT_UUU_SUPPORT)
 +	stdio_register(&g_fastboot_stdio);
 +#endif
 +
  	return 0;
  }
  
diff --cc include/configs/imx8mn_evk_android.h
index 629798d542,d3a59e8c4d..ba19a6f39b
--- a/include/configs/imx8mn_evk_android.h
+++ b/include/configs/imx8mn_evk_android.h
@@@ -7,7 -7,13 +7,13 @@@
  #ifndef IMX8MN_EVK_ANDROID_H
  #define IMX8MN_EVK_ANDROID_H
  
 -#define CONFIG_BCB_SUPPORT
 -#define CONFIG_CMD_READ
 -
  #define CONFIG_ANDROID_AB_SUPPORT
++<<<<<<< HEAD
++=======
+ #define CONFIG_AVB_SUPPORT
+ #define CONFIG_IDT_VALID_AVBKEY
+ #define CONFIG_SUPPORT_EMMC_RPMB
++>>>>>>> test_tagg
  #ifdef CONFIG_ANDROID_AB_SUPPORT
  #define CONFIG_SYSTEM_RAMDISK_SUPPORT
  #endif
@@@ -21,11 -31,24 +27,18 @@@
  #undef CONFIG_EXTRA_ENV_SETTINGS
  #undef CONFIG_BOOTCOMMAND
  
+ #ifdef CONFIG_SECURE_BOOT
+ #define UBOOT_DELAY_TIME 0	/* seconds */
+ #else
+ #define UBOOT_DELAY_TIME 1	/* seconds */
+ #endif /* CONFIG_SECURE_BOOT */
+ 
  #define CONFIG_EXTRA_ENV_SETTINGS		\
  	"splashpos=m,m "			\
 +	"splashimage=0x50000000 "		\
  	"fdt_high=0xffffffffffffffff "		\
  	"initrd_high=0xffffffffffffffff "	\
+ 	"bootdelay="__stringify(UBOOT_DELAY_TIME)" "	\
  
  /* Enable mcu firmware flash */
  #ifdef CONFIG_FLASH_MCUFIRMWARE_SUPPORT
diff --cc include/configs/imx8mq_evk_android.h
index f105d4070f,f86a1e685d..74e60b125d
--- a/include/configs/imx8mq_evk_android.h
+++ b/include/configs/imx8mq_evk_android.h
@@@ -7,7 -7,12 +7,13 @@@
  #ifndef IMX8MQ_EVK_ANDROID_H
  #define IMX8MQ_EVK_ANDROID_H
  
 -#define CONFIG_CMD_READ
 -
  #define CONFIG_ANDROID_AB_SUPPORT
++<<<<<<< HEAD
++=======
+ #define CONFIG_AVB_SUPPORT
+ #define CONFIG_IDT_VALID_AVBKEY
+ #define CONFIG_SUPPORT_EMMC_RPMB
++>>>>>>> test_tagg
  #ifdef CONFIG_ANDROID_AB_SUPPORT
  #define CONFIG_SYSTEM_RAMDISK_SUPPORT
  #endif
@@@ -21,11 -30,25 +27,19 @@@
  #undef CONFIG_EXTRA_ENV_SETTINGS
  #undef CONFIG_BOOTCOMMAND
  
+ #ifdef CONFIG_SECURE_BOOT
+ #define UBOOT_DELAY_TIME 0	/* seconds */
+ #else
+ #define UBOOT_DELAY_TIME 1	/* seconds */
+ #endif /* CONFIG_SECURE_BOOT */
+ 
  #define CONFIG_EXTRA_ENV_SETTINGS		\
  	"splashpos=m,m "			\
 +	"splashimage=0x50000000 "		\
  	"fdt_high=0xffffffffffffffff "		\
  	"initrd_high=0xffffffffffffffff "	\
+ 	"bootdelay="__stringify(UBOOT_DELAY_TIME)" "	\
+ 	"idt,prod-id=idt_imx8mq_evt-1_evk_dvt-1"\
  
  /* Enable mcu firmware flash */
  #ifdef CONFIG_FLASH_MCUFIRMWARE_SUPPORT
diff --cc lib/Makefile
index a8bbb50553,ae7093de95..2b63cd6d0a
--- a/lib/Makefile
+++ b/lib/Makefile
@@@ -59,7 -54,8 +59,12 @@@ obj-$(CONFIG_TPM_V1) += tpm-v1.
  obj-$(CONFIG_TPM_V2) += tpm-v2.o
  endif
  
++<<<<<<< HEAD
 +obj-$(CONFIG_$(SPL_)RSA) += rsa/
++=======
+ obj-y += persist_idt/
+ obj-$(CONFIG_RSA) += rsa/
++>>>>>>> test_tagg
  obj-$(CONFIG_SHA1) += sha1.o
  obj-$(CONFIG_SHA256) += sha256.o
  
diff --cc lib/avb/fsl/fsl_avb_ab_flow.c
index e56d350a0b,76cdceea4f..b5da9d1d0f
--- a/lib/avb/fsl/fsl_avb_ab_flow.c
+++ b/lib/avb/fsl/fsl_avb_ab_flow.c
@@@ -274,10 -276,214 +276,219 @@@ static int spl_verify_rbidx(struct mmc 
  	}
  
  }
 -#endif /* CONFIG_XEN */
 +#endif /* !CONFIG_XEN && CONFIG_IMX_TRUSTY_OS */
  
++<<<<<<< HEAD
 +int mmc_load_image_raw_sector_dual_uboot(struct spl_image_info *spl_image,
 +					 struct mmc *mmc)
++=======
+ #ifdef CONFIG_PARSE_CONTAINER
+ int mmc_load_image_parse_container_dual_uboot(
+ 		struct spl_image_info *spl_image, struct mmc *mmc)
+ {
+ 	disk_partition_t info;
+ 	int ret = 0, n = 0;
+ 	char partition_name[PARTITION_NAME_LEN];
+ 	struct blk_desc *dev_desc;
+ 	AvbABData ab_data, ab_data_orig;
+ 	size_t slot_index_to_boot, target_slot;
+ #if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
+ 	struct keyslot_package kp;
+ #endif
+ 
+ 	/* Check if gpt is valid */
+ 	dev_desc = mmc_get_blk_desc(mmc);
+ 	if (dev_desc) {
+ 		if (part_get_info(dev_desc, 1, &info)) {
+ 			printf("GPT is invalid, please flash correct GPT!
");
+ 			return -1;
+ 		}
+ 	} else {
+ 		printf("Get block desc fail!
");
+ 		return -1;
+ 	}
+ 
+ #if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
+ 	/* Read RPMB keyslot package, xen won't check this. */
+ 	read_keyslot_package(&kp);
+ 	if (strcmp(kp.magic, KEYPACK_MAGIC)) {
+ 		if (rpmbkey_is_set()) {
+ 			printf("
FATAL - RPMB key was destroyed!
");
+ 			hang();
+ 		} else
+ 			printf("keyslot package magic error, do nothing here!
");
+ 	} else {
+ 		/* Set power-on write protection to boot1 partition. */
+ 		if (mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_BOOT_WP, BOOT1_PWR_WP)) {
+ 			printf("Unable to set power-on write protection to boot1!
");
+ 			return -1;
+ 		}
+ 	}
+ #endif
+ 
+ 	/* Load AB metadata from misc partition */
+ 	if (fsl_load_metadata_dual_uboot(dev_desc, &ab_data,
+ 					&ab_data_orig)) {
+ 		return -1;
+ 	}
+ 
+ 	slot_index_to_boot = 2;  // Means not 0 or 1
+ 	target_slot =
+ 	    (ab_data.slots[1].priority > ab_data.slots[0].priority) ? 1 : 0;
+ 
+ 	for (n = 0; n < 2; n++) {
+ 		if (!fsl_slot_is_bootable(&ab_data.slots[target_slot])) {
+ 			target_slot = (target_slot == 1 ? 0 : 1);
+ 			continue;
+ 		}
+ 		/* Choose slot to load. */
+ 		snprintf(partition_name, PARTITION_NAME_LEN,
+ 			 PARTITION_BOOTLOADER"%s",
+ 			 slot_suffixes[target_slot]);
+ 
+ 		/* Read part info from gpt */
+ 		if (part_get_info_by_name(dev_desc, partition_name, &info) == -1) {
+ 			printf("Can't get partition info of partition bootloader%s
",
+ 				slot_suffixes[target_slot]);
+ 			ret = -1;
+ 			goto end;
+ 		} else {
+ 			ret = mmc_load_image_parse_container(spl_image, mmc, info.start);
+ 
+ 			/* Don't need to check rollback index for xen. */
+ #if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
+ 			/* Image loaded successfully, go to verify rollback index */
+ 			if (!ret && rpmbkey_is_set())
+ 				ret = spl_verify_rbidx(mmc, &ab_data.slots[target_slot], spl_image);
+ 
+ 			/* Copy rpmb keyslot to secure memory. */
+ 			if (!ret)
+ 				fill_secure_keyslot_package(&kp);
+ #endif
+ 		}
+ 
+ 		/* Set current slot to unbootable if load/verify fail. */
+ 		if (ret != 0) {
+ 			/* Reboot if current slot has booted succefully before, this prevents
+ 			 * slot been marked as "unbootable" due to some random failures (like
+ 			 * eMMC/DRAM access error at some critical temperature).
+ 			 */
+ 			if (ab_data.slots[target_slot].successful_boot)
+ 				do_reset(NULL, 0, 0, NULL);
+ 			else {
+ 				printf("Load or verify bootloader%s fail, setting unbootable..
",
+ 				       slot_suffixes[target_slot]);
+ 				fsl_slot_set_unbootable(&ab_data.slots[target_slot]);
+ 				/* Switch to another slot. */
+ 				target_slot = (target_slot == 1 ? 0 : 1);
+ 			}
+ 		} else {
+ 			slot_index_to_boot = target_slot;
+ 			n = 2;
+ 		}
+ 	}
+ 
+ 	if (slot_index_to_boot == 2) {
+ 		/* No bootable slots, try to boot into recovery! */
+ 		printf("No bootable slots found, try to boot into recovery mode...
");
+ 
+ 		ab_data.spl_recovery = true;
+ 		if ((ab_data.last_boot != 0) && (ab_data.last_boot != 1))
+ 			slot_index_to_boot = 0;
+ 		else
+ 			slot_index_to_boot = ab_data.last_boot;
+ 
+ 		snprintf(partition_name, PARTITION_NAME_LEN,
+ 			 PARTITION_BOOTLOADER"%s",
+ 			 slot_suffixes[slot_index_to_boot]);
+ 
+ 		/* Read part info from gpt */
+ 		if (part_get_info_by_name(dev_desc, partition_name, &info) == -1) {
+ 			printf("Can't get partition info of partition bootloader%s
",
+ 				slot_suffixes[slot_index_to_boot]);
+ 			ret = -1;
+ 			goto end;
+ 		} else {
+ 			ret = mmc_load_image_parse_container(spl_image, mmc, info.start);
+ 
+ 			/* Don't need to check rollback index for xen. */
+ #if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
+ 			/* Image loaded successfully, go to verify rollback index */
+ 			if (!ret && rpmbkey_is_set())
+ 				ret = spl_verify_rbidx(mmc, &ab_data.slots[slot_index_to_boot], spl_image);
+ 
+ 			/* Copy rpmb keyslot to secure memory. */
+ 			if (!ret)
+ 				fill_secure_keyslot_package(&kp);
+ #endif
+ 		}
+ 
+ 		if (ret)
+ 			goto end;
+ 	} else if (!ab_data.slots[slot_index_to_boot].successful_boot &&
+ 		   (ab_data.slots[slot_index_to_boot].tries_remaining > 0)) {
+ 		/* Set the bootloader_verified flag if current slot only has one chance. */
+ 		if (ab_data.slots[slot_index_to_boot].tries_remaining == 1)
+ 			ab_data.slots[slot_index_to_boot].bootloader_verified = 1;
+ 		ab_data.slots[slot_index_to_boot].tries_remaining -= 1;
+ 
+ 		ab_data.last_boot = slot_index_to_boot;
+ 	}
+ 	printf("Booting from bootloader%s...
", slot_suffixes[slot_index_to_boot]);
+ 
+ end:
+ 	/* Save metadata if changed. */
+ 	if (fsl_save_metadata_if_changed_dual_uboot(dev_desc, &ab_data, &ab_data_orig)) {
+ 		ret = -1;
+ 	}
+ 
+ 	if (ret)
+ 		return -1;
+ 	else
+ 		return 0;
+ }
+ #else /* CONFIG_PARSE_CONTAINER */
+ #ifdef CONFIG_IDT_BACKUP_SPL
+ #define SRC_GPR10 0x30390098
+ #define PERSIST_SECONDARY_BOOT (1<<30)
+ bool mmcboot_secondary(void)
+ {
+ 	return (bool)(readl(SRC_GPR10) & PERSIST_SECONDARY_BOOT);
+ }
+ #endif
+ #ifdef CONFIG_IDT_DUAL_SPL
+ int check_hwpart_with_current_slot(struct mmc *mmc, size_t target_slot)
+ {
+ 	int hwpart = -1, slot_part = -1;
+ 
+ 	slot_part = target_slot + 1; /* (target_slot + 1) equals hwpart */
+ 	if (slot_part != FASTBOOT_MMC_BOOT_PARTITION_ID &&
+ 	    slot_part != FASTBOOT_MMC_BOOT1_PARTITION_ID) {
+ 		printf("ERROR: Get the wrong slot_part=%d
", slot_part);
+ 		return -1;
+ 	}
+ 	hwpart = (mmc->part_config >> 3) & PART_ACCESS_MASK;
+ 	if (hwpart != FASTBOOT_MMC_BOOT_PARTITION_ID &&
+ 	    hwpart != FASTBOOT_MMC_BOOT1_PARTITION_ID) {
+ 		printf("WARN: Get the unexpected hwpart=%d
", hwpart);
+ 		return -1;
+ 	}
+ 	printf("hwpart=%d, slot_part=%d
", hwpart, slot_part);
+ 	if (hwpart == slot_part) {
+ 		/* no more action */
+ 		return -1;
+ 	}
+ 	/* store slot_part */
+ 	printf("Force to set hwpart from %d to %d due to the changed slot
",
+ 	    hwpart, slot_part);
+ 	mmc_set_part_conf(mmc, (u8)1, (u8)slot_part, (u8)0);
+ 	printf("Need to reboot
");
+ 	return 0;
+ }
+ #endif
+ int mmc_load_image_raw_sector_dual_uboot(
+ 		struct spl_image_info *spl_image, struct mmc *mmc)
++>>>>>>> test_tagg
  {
  	unsigned long count;
  	disk_partition_t info;
diff --cc lib/libavb/avb_slot_verify.c
index 63b80711ac,9b22b26087..0d0b229c5a
--- a/lib/libavb/avb_slot_verify.c
+++ b/lib/libavb/avb_slot_verify.c
@@@ -1493,58 -1208,20 +1502,75 @@@ AvbSlotVerifyResult avb_slot_verify(Avb
      goto fail;
    }
  
++<<<<<<< HEAD
 +  if (flags & AVB_SLOT_VERIFY_FLAGS_NO_VBMETA_PARTITION) {
 +    if (requested_partitions == NULL || requested_partitions[0] == NULL) {
 +      avb_fatal(
 +          "Requested partitions cannot be empty when using "
 +          "AVB_SLOT_VERIFY_FLAGS_NO_VBMETA_PARTITION");
 +      ret = AVB_SLOT_VERIFY_RESULT_ERROR_INVALID_ARGUMENT;
 +      goto fail;
 +    }
 +
 +    /* No vbmeta partition, go through each of the requested partitions... */
 +    for (size_t n = 0; requested_partitions[n] != NULL; n++) {
 +      ret = load_and_verify_vbmeta(ops,
 +                                   requested_partitions,
 +                                   ab_suffix,
 +                                   flags,
 +                                   allow_verification_error,
 +                                   0 /* toplevel_vbmeta_flags */,
 +                                   0 /* rollback_index_location */,
 +                                   requested_partitions[n],
 +                                   avb_strlen(requested_partitions[n]),
 +                                   NULL /* expected_public_key */,
 +                                   0 /* expected_public_key_length */,
 +                                   slot_data,
 +                                   &algorithm_type,
 +                                   additional_cmdline_subst);
 +      if (!allow_verification_error && ret != AVB_SLOT_VERIFY_RESULT_OK) {
 +        goto fail;
 +      }
 +    }
 +
 +  } else {
 +    /* Usual path, load "vbmeta"... */
 +    ret = load_and_verify_vbmeta(ops,
 +                                 requested_partitions,
 +                                 ab_suffix,
 +                                 flags,
 +                                 allow_verification_error,
 +                                 0 /* toplevel_vbmeta_flags */,
 +                                 0 /* rollback_index_location */,
 +                                 "vbmeta",
 +                                 avb_strlen("vbmeta"),
 +                                 NULL /* expected_public_key */,
 +                                 0 /* expected_public_key_length */,
 +                                 slot_data,
 +                                 &algorithm_type,
 +                                 additional_cmdline_subst);
 +    if (!allow_verification_error && ret != AVB_SLOT_VERIFY_RESULT_OK) {
 +      goto fail;
 +    }
 +  }
 +
 +  if (!result_should_continue(ret)) {
++=======
+   ret = load_and_verify_vbmeta(ops,
+                                requested_partitions,
+                                ab_suffix,
+                                allow_verification_error,
+                                0 /* toplevel_vbmeta_flags */,
+                                0 /* rollback_index_location */,
+                                "vbmeta",
+                                avb_strlen("vbmeta"),
+                                expect_pubkey /* expected_public_key */,
+                                expect_pubkey_size /* expected_public_key_length */,
+                                slot_data,
+                                &algorithm_type,
+                                additional_cmdline_subst);
+   if (!allow_verification_error && ret != AVB_SLOT_VERIFY_RESULT_OK) {
++>>>>>>> test_tagg
      goto fail;
    }
  
