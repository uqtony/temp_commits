9fcc10fb47fe owen.wen 2021-12-27

AOS-796: file node for adjust focus distance

adjust VCM of front camera
echo 0 > /dev/focus
echo 1023 > /dev/focus

this is a temp work around before we have fully functional v4l2 camera

Change-Id: Ia203832049fd98278a326856f7ea514bb682c800

diff --git a/drivers/media/i2c/dw9714.c b/drivers/media/i2c/dw9714.c
index 3f0b082f863f..ff599b735c7a 100644
--- a/drivers/media/i2c/dw9714.c
+++ b/drivers/media/i2c/dw9714.c
@@ -7,6 +7,7 @@
 #include <linux/pm_runtime.h>
 #include <media/v4l2-ctrls.h>
 #include <media/v4l2-device.h>
+#include <linux/miscdevice.h>
 
 #define DW9714_NAME		"dw9714"
 #define DW9714_MAX_FOCUS_POS	1023
@@ -30,6 +31,8 @@
 #define DW9714_DEFAULT_S 0x0
 #define DW9714_VAL(data, s) ((data) << 4 | (s))
 
+#define MAX_BUFFER_SIZE 8
+
 /* dw9714 device structure */
 struct dw9714_device {
 	struct v4l2_ctrl_handler ctrls_vcm;
@@ -37,6 +40,71 @@ struct dw9714_device {
 	u16 current_val;
 };
 
+struct i2c_client *vcm_i2c_client;
+
+static int
+focus_open(struct inode *inode, struct file *filp)
+{
+	filp->private_data = vcm_i2c_client;
+	return 0;
+}
+
+static int
+focus_release(struct inode *inode, struct file *filp)
+{
+	filp->private_data = NULL;
+	return 0;
+}
+
+static int dw9714_i2c_write(struct i2c_client *, u16);
+
+static ssize_t
+focus_write(struct file *filp, const char __user *buf, size_t count, loff_t *pos)
+{
+	char *user_buf = NULL;
+	int value = 0;
+	struct i2c_client *dw9714_vcm = NULL;
+
+	user_buf = kzalloc(MAX_BUFFER_SIZE, GFP_KERNEL);
+	if (!user_buf)
+		goto error;
+	if (copy_from_user(user_buf, buf, count)) {
+		pr_err("%s: copy_from_user failed", __func__);
+		goto error;
+	}
+	if (kstrtol(user_buf, 10, &value))
+		goto error;
+	if (value < 0)
+		value = 0;
+	if (value > 1023)
+		value = 1023;
+	if (filp->private_data) {
+		dw9714_vcm = (struct i2c_client *)filp->private_data;
+		dw9714_i2c_write(dw9714_vcm, DW9714_VAL(value, DW9714_DEFAULT_S));
+		pr_info("%s: dw9714_vcm set value: %d", __func__, value);
+	} else {
+		pr_err("%s: dw9714_vcm is NULL", __func__);
+	}
+
+error:
+	if (user_buf != NULL)
+		kfree(user_buf);
+	return count;
+}
+
+static const struct file_operations focus_fops = {
+	.owner		= THIS_MODULE,
+	.open           = focus_open,
+	.release        = focus_release,
+	.write		= focus_write,
+};
+
+static struct miscdevice focus_misc = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name  = "focus",
+	.fops  = &focus_fops
+};
+
 static inline struct dw9714_device *to_dw9714_vcm(struct v4l2_ctrl *ctrl)
 {
 	return container_of(ctrl->handler, struct dw9714_device, ctrls_vcm);
@@ -162,6 +230,14 @@ static int dw9714_probe(struct i2c_client *client)
 	if (rval < 0)
 		goto err_cleanup;
 
+	// add a filenode for userspace to control VCM
+	rval = misc_register(&focus_misc);
+	if (rval) {
+		pr_err("%s: misc_register failed(%d)", __func__, rval);
+		goto err_cleanup;
+	}
+	vcm_i2c_client = client;
+
 	pm_runtime_set_active(&client->dev);
 	pm_runtime_enable(&client->dev);
 	pm_runtime_idle(&client->dev);
