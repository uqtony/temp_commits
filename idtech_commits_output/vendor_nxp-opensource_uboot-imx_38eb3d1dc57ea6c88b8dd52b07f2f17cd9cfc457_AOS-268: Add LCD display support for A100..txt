38eb3d1dc5 Arthur Chen 2020-09-21

AOS-268: Add LCD display support for A100.

    - Add U-boot panel driver source.
    - Patch MIPI module driver about PLL calculation formula
    - Add video output target selection (default: panel).
    if needed to use MIPItoHDMI bridge: video_link=0 or
    removing U-boot env about video_link.
    if needed to use NXP official panel (RM67191): video_link=1 .
    - Add backlight support as GPIO (PWM full duty).

Change-Id: I9f79612a0f1cf44444e29ff2e70685a7b3412582

diff --git a/drivers/video/Kconfig b/drivers/video/Kconfig
index 46aee0f992..eafad9549f 100644
--- a/drivers/video/Kconfig
+++ b/drivers/video/Kconfig
@@ -355,6 +355,15 @@ config VIDEO_LCD_RAYDIUM_RM67191
 	Say Y here if you want to enable support for Raydium RM68200
 	1080x1920 DSI video mode panel.
 
+config VIDEO_LCD_HIMAX_HX8394F
+	bool "HX8394F DSI LCD panel support"
+	depends on DM_VIDEO
+	select VIDEO_MIPI_DSI
+	default n
+	help
+	Say Y here if you want to enable support for Himax HX8394F
+	720x1280 DSI video mode panel.
+
 config VIDEO_LCD_SSD2828
 	bool "SSD2828 bridge chip"
 	default n
diff --git a/drivers/video/Makefile b/drivers/video/Makefile
index 63b38d1552..56c5ce7af7 100644
--- a/drivers/video/Makefile
+++ b/drivers/video/Makefile
@@ -55,6 +55,7 @@ obj-$(CONFIG_VIDEO_LCD_HITACHI_TX18D42VM) += hitachi_tx18d42vm_lcd.o
 obj-$(CONFIG_VIDEO_LCD_ORISETECH_OTM8009A) += orisetech_otm8009a.o
 obj-$(CONFIG_VIDEO_LCD_RAYDIUM_RM68200) += raydium-rm68200.o
 obj-$(CONFIG_VIDEO_LCD_RAYDIUM_RM67191) += raydium-rm67191.o
+obj-$(CONFIG_VIDEO_LCD_HIMAX_HX8394F) += himax-hx8394f.o
 obj-$(CONFIG_VIDEO_LCD_SSD2828) += ssd2828.o
 obj-$(CONFIG_VIDEO_ADV7535) += adv7535.o
 obj-$(CONFIG_VIDEO_MB862xx) += mb862xx.o videomodes.o
diff --git a/drivers/video/himax-hx8394f.c b/drivers/video/himax-hx8394f.c
new file mode 100644
index 0000000000..4f8db5c775
--- /dev/null
+++ b/drivers/video/himax-hx8394f.c
@@ -0,0 +1,279 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020 IDTECH - All Rights Reserved
+ * Author(s): Arthur Chen <arthur.chen@idtechproducts.com> for IDTECH.
+ *
+ */
+#include <common.h>
+#include <backlight.h>
+#include <dm.h>
+#include <mipi_dsi.h>
+#include <panel.h>
+#include <asm/gpio.h>
+#include <dm/device_compat.h>
+
+struct hx8394f_panel_priv {
+	struct udevice *backlight;
+	struct gpio_desc reset;
+	unsigned int lanes;
+	enum mipi_dsi_pixel_format format;
+	unsigned long mode_flags;
+};
+
+static const struct display_timing default_timing = {
+	.pixelclock.typ		= 82000000,
+	.hactive.typ		= 720,
+	.hfront_porch.typ	= 62,
+	.hback_porch.typ	= 110,
+	.hsync_len.typ		= 20,
+	.vactive.typ		= 1280,
+	.vfront_porch.typ	= 200,
+	.vback_porch.typ	= 16,
+	.vsync_len.typ		= 2,
+};
+
+static void hx8394f_dcs_write_buf(struct udevice *dev, const void *data,
+				  size_t len)
+{
+	struct mipi_dsi_panel_plat *plat = dev_get_platdata(dev);
+	struct mipi_dsi_device *device = plat->device;
+	int err;
+
+	err = mipi_dsi_dcs_write_buffer(device, data, len);
+	if (err < 0)
+		dev_err(dev, "MIPI DSI DCS write buffer failed: %d
", err);
+}
+
+static void hx8394f_dcs_write_cmd(struct udevice *dev, u8 cmd, u8 value)
+{
+	struct mipi_dsi_panel_plat *plat = dev_get_platdata(dev);
+	struct mipi_dsi_device *device = plat->device;
+	int err;
+
+	err = mipi_dsi_dcs_write(device, cmd, &value, 1);
+	if (err < 0)
+		dev_err(dev, "MIPI DSI DCS write failed: %d
", err);
+}
+
+#define dcs_write_seq(ctx, seq...)				\
+({								\
+	static const u8 d[] = { seq };				\
+								\
+	hx8394f_dcs_write_buf(ctx, d, ARRAY_SIZE(d));		\
+})
+
+/*
+ * This panel is not able to auto-increment all cmd addresses so for some of
+ * them, we need to send them one by one...
+ */
+#define dcs_write_cmd_seq(ctx, cmd, seq...)			\
+({								\
+	static const u8 d[] = { seq };				\
+	unsigned int i;						\
+								\
+	for (i = 0; i < ARRAY_SIZE(d) ; i++)			\
+		hx8394f_dcs_write_cmd(ctx, cmd + i, d[i]);	\
+})
+
+static void hx8394f_init_sequence(struct udevice *dev)
+{
+	dcs_write_seq(dev, 0xB9, 0xFF, 0x83, 0x94);
+	dcs_write_seq(dev, 0xB1, 0x48, 0x12, 0x72, 0x09, 0x33,
+			   0x24, 0x51, 0x51, 0x30, 0x43);
+	dcs_write_seq(dev, 0xBA, 0x63, 0x03, 0x68, 0x6B, 0xB2, 0xC0);
+	dcs_write_seq(dev, 0xB2, 0x00, 0x80, 0x64, 0x0C, 0x06, 0x2F);
+	dcs_write_seq(dev, 0xB4, 0x76, 0x74, 0x76, 0x74, 0x76, 0x74, 0x01,
+			   0x0C, 0x86, 0x75, 0x00, 0x3F, 0x76, 0x74, 0x76,
+			   0x74, 0x76, 0x74, 0x01, 0x0C);
+	dcs_write_seq(dev, 0xD3, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x12,
+			   0x10, 0x32, 0x10, 0x00, 0x00, 0x00, 0x32, 0x13,
+			   0xC0, 0x00, 0x00, 0x32, 0x10, 0x08, 0x00, 0x00,
+			   0x47, 0x04, 0x02, 0x02, 0x47, 0x04, 0x00, 0x47,
+			   0x0C, 0x40);
+	dcs_write_seq(dev, 0xD5, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
+			   0x07, 0x20, 0x21, 0x22, 0x23, 0x18, 0x18, 0x18,
+			   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			   0x18, 0x19, 0x19, 0x18, 0x18);
+	dcs_write_seq(dev, 0xD6, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
+			   0x00, 0x23, 0x22, 0x21, 0x20, 0x18, 0x18, 0x18,
+			   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			   0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+			   0x18, 0x18, 0x18, 0x19, 0x19);
+	dcs_write_seq(dev, 0xB6, 0x5B, 0x5B);
+	dcs_write_cmd_seq(dev, 0xCC, 0x0B);
+	dcs_write_seq(dev, 0xC0, 0x1F, 0x31);
+	dcs_write_cmd_seq(dev, 0xD4, 0x02);
+	dcs_write_cmd_seq(dev, 0xBD, 0x01);
+	dcs_write_cmd_seq(dev, 0xB1, 0x00);
+	dcs_write_cmd_seq(dev, 0xBD, 0x00);
+	dcs_write_cmd_seq(dev, 0xC6, 0xED);
+}
+
+static int hx8394f_reset_sequence(struct gpio_desc reset)
+{
+	int ret = 0;
+
+	ret = dm_gpio_set_value(&reset, false);
+	if (ret)
+		goto reset_out;
+
+	mdelay(10);
+	dm_gpio_set_value(&reset, true);
+	if (ret)
+		goto reset_out;
+
+	mdelay(10);
+	dm_gpio_set_value(&reset, false);
+	if (ret)
+		goto reset_out;
+
+	mdelay(10);
+	dm_gpio_set_value(&reset, true);
+	if (ret)
+		goto reset_out;
+
+	mdelay(80);
+
+reset_out:
+	if (ret)
+		printf("hx8394f_reset_sequence fail
");
+
+	return ret;
+}
+
+static int hx8394f_panel_enable_backlight(struct udevice *dev)
+{
+	struct mipi_dsi_panel_plat *plat = dev_get_platdata(dev);
+	struct mipi_dsi_device *device = plat->device;
+	struct hx8394f_panel_priv *priv = dev_get_priv(dev);
+	int ret;
+
+	ret = hx8394f_reset_sequence(priv->reset);
+	if (ret < 0)
+		return ret;
+
+	ret = mipi_dsi_attach(device);
+	if (ret < 0)
+		return ret;
+
+	hx8394f_init_sequence(dev);
+	ret = mipi_dsi_dcs_exit_sleep_mode(device);
+	if (ret)
+		return ret;
+
+	mdelay(125);
+	ret = mipi_dsi_dcs_set_display_on(device);
+	if (ret)
+		return ret;
+
+	mdelay(40);
+	ret = backlight_enable(priv->backlight);
+	if (ret)
+		return ret;
+
+
+	return ret;
+}
+
+static int hx8394f_panel_get_display_timing(struct udevice *dev,
+					    struct display_timing *timings)
+{
+	struct mipi_dsi_panel_plat *plat = dev_get_platdata(dev);
+	struct mipi_dsi_device *device = plat->device;
+	struct hx8394f_panel_priv *priv = dev_get_priv(dev);
+
+	memcpy(timings, &default_timing, sizeof(*timings));
+
+	/* fill characteristics of DSI data link */
+	device->lanes = priv->lanes;
+	device->format = priv->format;
+	device->mode_flags = priv->mode_flags;
+
+	return 0;
+}
+
+static int hx8394f_panel_probe(struct udevice *dev)
+{
+	struct hx8394f_panel_priv *priv = dev_get_priv(dev);
+	int ret;
+	u32 video_mode;
+
+	priv->format = MIPI_DSI_FMT_RGB888;
+	priv->mode_flags = MIPI_DSI_MODE_VIDEO_HSE | MIPI_DSI_MODE_VIDEO;
+
+	ret = dev_read_u32(dev, "video-mode", &video_mode);
+	if (!ret) {
+		switch (video_mode) {
+		case 0:
+			/* burst mode */
+			priv->mode_flags |= MIPI_DSI_MODE_VIDEO_BURST;
+			break;
+		case 1:
+			/* non-burst mode with sync event */
+			break;
+		case 2:
+			/* non-burst mode with sync pulse */
+			priv->mode_flags |= MIPI_DSI_MODE_VIDEO_SYNC_PULSE;
+			break;
+		default:
+			dev_warn(dev, "invalid video mode %d
", video_mode);
+			break;
+		}
+	}
+
+	ret = dev_read_u32(dev, "dsi-lanes", &priv->lanes);
+	if (ret) {
+		printf("Failed to get dsi-lanes property (%d)
", ret);
+		return ret;
+	}
+
+	ret = gpio_request_by_name(dev, "reset-gpio", 0, &priv->reset,
+				   GPIOD_IS_OUT);
+	if (ret) {
+		printf("Warning: cannot get reset GPIO
");
+		if (ret != -ENOENT)
+			return ret;
+	}
+
+	ret = uclass_get_device_by_phandle(UCLASS_PANEL_BACKLIGHT, dev,
+					   "backlight", &priv->backlight);
+	if (ret) {
+		dev_err(dev, "Cannot get backlight: ret=%d
", ret);
+		return ret;
+	}
+
+	return ret;
+}
+
+static int hx8394f_panel_disable(struct udevice *dev)
+{
+	struct hx8394f_panel_priv *priv = dev_get_priv(dev);
+
+	dm_gpio_set_value(&priv->reset, false);
+
+	return 0;
+}
+
+static const struct panel_ops hx8394f_panel_ops = {
+	.enable_backlight = hx8394f_panel_enable_backlight,
+	.get_display_timing = hx8394f_panel_get_display_timing,
+};
+
+static const struct udevice_id hx8394f_panel_ids[] = {
+	{ .compatible = "himax,hx8394f", 2 },
+	{ }
+};
+
+U_BOOT_DRIVER(hx8394f_panel) = {
+	.name			  = "hx8394f_panel",
+	.id			  = UCLASS_PANEL,
+	.of_match		  = hx8394f_panel_ids,
+	.ops			  = &hx8394f_panel_ops,
+	.probe			  = hx8394f_panel_probe,
+	.remove			  = hx8394f_panel_disable,
+	.platdata_auto_alloc_size = sizeof(struct mipi_dsi_panel_plat),
+	.priv_auto_alloc_size	= sizeof(struct hx8394f_panel_priv),
+};
diff --git a/drivers/video/imx/sec_mipi_dsim.c b/drivers/video/imx/sec_mipi_dsim.c
index cad99f7024..5142907889 100644
--- a/drivers/video/imx/sec_mipi_dsim.c
+++ b/drivers/video/imx/sec_mipi_dsim.c
@@ -8,6 +8,7 @@
 #include <dm.h>
 #include <asm/io.h>
 #include <linux/err.h>
+#include <linux/log2.h>
 #include <asm/unaligned.h>
 #include <asm/arch/clock.h>
 #include <asm/arch/imx-regs.h>
@@ -278,6 +279,39 @@
  *
  */
 
+#define PLLCTRL_SET_P(x)         REG_PUT(x, 18, 13)
+#define PLLCTRL_SET_M(x)         REG_PUT(x, 12,  3)
+#define PLLCTRL_SET_S(x)         REG_PUT(x,  2,  0)
+
+/* fixed phy ref clk rate */
+#define PHY_REF_CLK		27000000
+
+/* DPHY PLL structure */
+struct sec_mipi_dsim_range {
+	uint32_t min;
+	uint32_t max;
+};
+
+struct sec_mipi_dsim_pll {
+	struct sec_mipi_dsim_range p;
+	struct sec_mipi_dsim_range m;
+	struct sec_mipi_dsim_range s;
+	struct sec_mipi_dsim_range k;
+	struct sec_mipi_dsim_range fin;
+	struct sec_mipi_dsim_range fpref;
+	struct sec_mipi_dsim_range fvco;
+};
+
+const struct sec_mipi_dsim_pll pll_1432x = {
+	.p	= { .min = 1,		.max = 63,	},
+	.m	= { .min = 64,		.max = 1023,	},
+	.s	= { .min = 0,		.max = 5,	},
+	.k	= { .min = 0,		.max = 32768,	},	/* abs(k) */
+	.fin	= { .min = 6000,	.max = 300000,	},	/* in KHz */
+	.fpref	= { .min = 2000,	.max = 30000,	},	/* in KHz */
+	.fvco	= { .min = 1050000,	.max = 2100000,	},	/* in KHz */
+};
+
 struct sec_mipi_dsim {
 	void __iomem *base;
 
@@ -795,6 +829,20 @@ static int sec_mipi_dsim_bridge_clk_set(struct sec_mipi_dsim *dsim_host)
 {
 	int bpp;
 	uint64_t pix_clk, bit_clk;
+	uint32_t p, m, s;
+	uint32_t best_p = 0, best_m = 0, best_s = 0;
+	uint32_t fin, fout;
+	uint32_t s_pow_2, raw_s;
+	uint64_t mfin, pfvco, pfout, psfout;
+	uint32_t delta, best_delta = ~0U;
+	struct sec_mipi_dsim_range *prange = &pll_1432x.p;
+	struct sec_mipi_dsim_range *mrange = &pll_1432x.m;
+	struct sec_mipi_dsim_range *srange = &pll_1432x.s;
+	struct sec_mipi_dsim_range *krange = &pll_1432x.k;
+	struct sec_mipi_dsim_range *fvco_range  = &pll_1432x.fvco;
+	struct sec_mipi_dsim_range *fpref_range = &pll_1432x.fpref;
+	struct sec_mipi_dsim_range pr_new = *prange;
+	struct sec_mipi_dsim_range sr_new = *srange;
 
 	bpp = mipi_dsi_pixel_format_to_bpp(dsim_host->format);
 	if (bpp < 0)
@@ -813,15 +861,90 @@ static int sec_mipi_dsim_bridge_clk_set(struct sec_mipi_dsim *dsim_host)
 	dsim_host->pix_clk = DIV_ROUND_UP_ULL(pix_clk, 1000);
 	dsim_host->bit_clk = DIV_ROUND_UP_ULL(bit_clk, 1000);
 
-	if (dsim_host->mode_flags & MIPI_DSI_MODE_VIDEO_SYNC_PULSE) {
-		/* TODO: add PMS calculate and check
-		 * Only support '1080p@60Hz' for now,
-		 * add other modes support later
-		 */
+	fout = dsim_host->bit_clk;
+	fin = DIV_ROUND_UP_ULL(PHY_REF_CLK, 1000);  /* pref_clk */
+
+	krange->min = 0;
+	krange->max = 0;
+
+	prange->min = max(prange->min, DIV_ROUND_UP(fin, fpref_range->max));
+	prange->max = min(prange->max, fin / fpref_range->min);
+
+	pfvco = (uint64_t)fvco_range->min * prange->min;
+	mrange->min = max_t(uint32_t, mrange->min,
+			    DIV_ROUND_UP_ULL(pfvco, fin));
+	pfvco = (uint64_t)fvco_range->max * prange->max;
+	mrange->max = min_t(uint32_t, mrange->max,
+			    DIV_ROUND_UP_ULL(pfvco, fin));
+
+	debug("p: min = %u, max = %u, "
+		     "m: min = %u, max = %u, "
+		     "s: min = %u, max = %u
",
+		prange->min, prange->max, mrange->min,
+		mrange->max, srange->min, srange->max);
+
+	for (m = mrange->min; m <= mrange->max; m++) {
+		/* p = m * Fin / Fvco */
+		mfin = (uint64_t)m * fin;
+		pr_new.min = max_t(uint32_t, prange->min,
+				   DIV_ROUND_UP_ULL(mfin, fvco_range->max));
+		pr_new.max = min_t(uint32_t, prange->max,
+				   (mfin / fvco_range->min));
+
+		if (pr_new.max < pr_new.min || pr_new.min < prange->min)
+			continue;
+
+		for (p = pr_new.min; p <= pr_new.max; p++) {
+			/* s = order_pow_of_two((m * Fin) / (p * Fout)) */
+			pfout = (uint64_t)p * fout;
+			raw_s = DIV_ROUND_CLOSEST_ULL(mfin, pfout);
+
+			s_pow_2 = rounddown_pow_of_two(raw_s);
+			sr_new.min = max_t(uint32_t, srange->min,
+					   order_base_2(s_pow_2));
+
+			s_pow_2 = roundup_pow_of_two(DIV_ROUND_CLOSEST_ULL(mfin, pfout));
+			sr_new.max = min_t(uint32_t, srange->max,
+					   order_base_2(s_pow_2));
+
+			if (sr_new.max < sr_new.min || sr_new.min < srange->min)
+				continue;
+
+			for (s = sr_new.min; s <= sr_new.max; s++) {
+				/* fout = m * Fin / (p * 2^s) */
+				psfout = pfout * (1 << s);
+				delta = abs(psfout - mfin);
+				if (delta < best_delta) {
+					best_p = p;
+					best_m = m;
+					best_s = s;
+					best_delta = delta;
+				}
+			}
+		}
+	}
+
+	if (best_delta == ~0U) {
+		printf("%s: Can't find out PMS using default
", __func__);
 		dsim_host->pms = 0x4210;
+		return 0;
 	}
 
 	debug("%s: bitclk %llu pixclk %llu
", __func__, dsim_host->bit_clk, dsim_host->pix_clk);
+	dsim_host->p = best_p;
+	dsim_host->m = best_m;
+	dsim_host->s = best_s;
+
+	if (dsim_host->mode_flags & MIPI_DSI_MODE_VIDEO_SYNC_PULSE)
+		dsim_host->pms = PLLCTRL_SET_P(dsim_host->p) |
+				 PLLCTRL_SET_M(dsim_host->m) |
+				 PLLCTRL_SET_S(dsim_host->s);
+
+	debug("%s: fout = %u, fin = %u, m = %u, "
+	      "p = %u, s = %u, best_delta = %u
"
+	      " dsim_host->pms = 0x%x
",
+	      __func__, fout, fin, dsim_host->m, dsim_host->p, dsim_host->s,
+	      best_delta, dsim_host->pms);
 
 	return 0;
 }
diff --git a/include/configs/imx8mn_a100_android.h b/include/configs/imx8mn_a100_android.h
index cc76ac8f40..46f39816a1 100644
--- a/include/configs/imx8mn_a100_android.h
+++ b/include/configs/imx8mn_a100_android.h
@@ -36,6 +36,7 @@
 	"fdt_high=0xffffffffffffffff "		\
 	"initrd_high=0xffffffffffffffff "	\
 	"bootdelay="__stringify(UBOOT_DELAY_TIME)" "	\
+	"video_link=2 "	\
 
 /* Enable mcu firmware flash */
 #ifdef CONFIG_FLASH_MCUFIRMWARE_SUPPORT
diff --git a/include/configs/imx8mn_evk_android.h b/include/configs/imx8mn_evk_android.h
index 215504d880..f0f87504c5 100644
--- a/include/configs/imx8mn_evk_android.h
+++ b/include/configs/imx8mn_evk_android.h
@@ -36,6 +36,7 @@
 	"fdt_high=0xffffffffffffffff "		\
 	"initrd_high=0xffffffffffffffff "	\
 	"bootdelay="__stringify(UBOOT_DELAY_TIME)" "	\
+	"video_link=2 "	\
 
 /* Enable mcu firmware flash */
 #ifdef CONFIG_FLASH_MCUFIRMWARE_SUPPORT
