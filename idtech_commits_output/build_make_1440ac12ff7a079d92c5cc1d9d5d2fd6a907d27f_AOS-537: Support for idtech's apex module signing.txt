1440ac12f max.yang 2021-03-22

AOS-537: Support for idtech's apex module signing

  Apex module needs to sign payload key and container key:
  When updating apex module, the two keys need to sign as the same
  key built-in module under system, for post signing:
    1. Payload key are hard-coded path everywhere in codebase, we tend to
       sign single one google's 4096 test key.
       - to sign 2048 will violate avb's descriptors record
    2. Container key is used to sign whole module just like apk, we
       treat it as an apk file, sign platform key and replace signature
       from CA.
    3. A workaround introduced due to apksigner customize function didn't
       signing with alignment option.

Change-Id: I96600cd9534f05b4c9f5eef3fee94f89138e8101

diff --git a/tools/releasetools/idt_sign_target_files_ca.py b/tools/releasetools/idt_sign_target_files_ca.py
index d9675a5f7..f7414a9b6 100644
--- a/tools/releasetools/idt_sign_target_files_ca.py
+++ b/tools/releasetools/idt_sign_target_files_ca.py
@@ -11,6 +11,7 @@ import tempfile
 import shutil
 import add_img_to_target_files
 import sign_target_files_apks
+import apex_utils
 import post_sign_vbmeta
 import idt_web_service
 from xml.etree import ElementTree
@@ -23,10 +24,12 @@ WS = idt_web_service.web_service()
 idt_key_map = {}
 #TODO: replace cert path once we get it
 idt_cert_dir = "device/idtech/common/security/IDT_CA_TESTING/"
+idt_apex_payload_key = "device/idtech/common/security/testkey_rsa4096.pem"
 
 # Check execution environment and binaries
 def check_executable():
-  exec_list = ["unzip", "apksigner", "openssl", "mkbootfs", "mkbootimg", "java"]
+  exec_list = ["unzip", "apksigner", "openssl", "mkbootfs", "mkbootimg", "java",
+               "zipalign", "apexer", "deapexer"]
   for exe_file in exec_list:
     if find_executable(exe_file) is None:
       raise ValueError('No executable: {}'.format(exe_file))
@@ -130,6 +133,108 @@ def handle_apks_CA_sign(data, key):
 
   return signed
 
+def handle_apex_container_sign(apex_file, key):
+  aligned_apex = common.MakeTempFile(prefix='apex-container-', suffix='.apex')
+  common.RunAndCheckOutput(['zipalign', '-f', '4096', apex_file, aligned_apex])
+
+  # Since apksigner have no '-a 4096' option, output signed apex module will
+  # fail to boot. Here is a workaround that using signapk.jar option to align
+  # by signing whatever key. Then use customized apksigner to get/combine
+  # signature from CA server.
+  signed_apex = common.MakeTempFile(prefix='apex-container-', suffix='.apex')
+  extra_signapk_args = ['-a', '4096']
+  common.SignFile(
+          aligned_apex,
+          signed_apex,
+          "device/idtech/common/security/platform",
+          None,
+          None,
+          extra_signapk_args=extra_signapk_args)
+
+  with open(signed_apex, 'rb') as f:
+    data = f.read()
+
+  signed_data = handle_apks_CA_sign(data, key)
+  return signed_data
+
+def handle_apex_payload_sign(apex_file, payload_key):
+  APEX_PUBKEY = 'apex_pubkey'
+  APEX_PAYLOAD_IMAGE = 'apex_payload.img'
+  avbtool = "./bin/avbtool"
+
+  payload_dir = common.MakeTempDir(prefix='apex-payload-')
+  with zipfile.ZipFile(apex_file) as apex_fd:
+    payload_file = apex_fd.extract(APEX_PAYLOAD_IMAGE, payload_dir)
+    zip_items = apex_fd.namelist()
+
+  payload_info = apex_utils.ParseApexPayloadInfo(avbtool, payload_file)
+  apex_utils.SignApexPayload(
+          avbtool,
+          payload_file,
+          payload_key,
+          payload_info['apex.key'],
+          payload_info['Algorithm'],
+          payload_info['Salt'],
+          payload_info['Hash Algorithm'],
+          True,
+          None)
+  payload_public_key = common.ExtractAvbPublicKey(avbtool, payload_key)
+  common.ZipDelete(apex_file, APEX_PAYLOAD_IMAGE)
+  if APEX_PUBKEY in zip_items:
+    common.ZipDelete(apex_file, APEX_PUBKEY)
+  apex_zip = zipfile.ZipFile(apex_file, 'a')
+  common.ZipWrite(apex_zip, payload_file, arcname=APEX_PAYLOAD_IMAGE)
+  common.ZipWrite(apex_zip, payload_public_key, arcname=APEX_PUBKEY)
+  common.ZipClose(apex_zip)
+
+  return apex_file
+
+# Return an Apex file path, re-pack payload.img if needed
+def idt_process_apex_file(filename, data, apk_keys, codename_to_api_level_map):
+  apex_file = common.MakeTempFile(prefix='apex-', suffix='.apex')
+  with open(apex_file, 'wb') as apex_fp:
+    apex_fp.write(data)
+
+  apk_signer = apex_utils.ApexApkSigner(apex_file, None, codename_to_api_level_map)
+
+  list_cmd = ['deapexer', 'list', apex_file]
+  entries_names = common.RunAndCheckOutput(list_cmd).split()
+  apk_entries = [name for name in entries_names if name.endswith('.apk')]
+  if not apk_entries:
+    return apex_file
+  for entry in apk_entries:
+    apk_name = os.path.basename(entry)
+    if apk_name not in apk_keys:
+      raise ApexSigningError("Failed to find signing keys for apk file {}".foramt(apk_name))
+
+  payload_dir = common.MakeTempDir()
+  extract_cmd = ['deapexer', 'extract', apex_file, payload_dir]
+  common.RunAndCheckOutput(extract_cmd)
+
+  has_signed_apk = False
+  for entry in apk_entries:
+    apk_path = os.path.join(payload_dir, entry)
+    key_name = apk_keys.get(os.path.basename(entry))
+    if key_name in common.SPECIAL_CERT_STRINGS:
+      continue
+    if key_name not in idt_key_map:
+      print("Keep orig sign: {}, {}".format(apk_path, key_name))
+      continue
+    print("sign apk: {}, key: {}".format(apk_path, idt_key_map[key_name]))
+    unsigned_apk = common.MakeTempFile()
+    os.rename(apk_path, unsigned_apk)
+    with open(unsigned_apk, 'rb') as uapk_f:
+      unsigned_data = uapk_f.read()
+    signed_data = handle_apks_CA_sign(unsigned_data, idt_key_map[key_name])
+    with open(apk_path, 'wb+') as sapk_f:
+      sapk_f.write(signed_data)
+    has_signed_apk = True
+
+  if not has_signed_apk:
+    return apex_file
+
+  return apk_signer.RepackApexPayload(payload_dir, idt_apex_payload_key, None)
+
 def handle_all_files_verbatim(input_zip, output_zip):
   misc_info = common.LoadInfoDict(input_zip)
   IDTBuildKeyMap(misc_info)
@@ -137,6 +242,11 @@ def handle_all_files_verbatim(input_zip, output_zip):
   apk_keys_info, compressed_extension = common.ReadApkCerts(input_zip)
   apk_keys = sign_target_files_apks.GetApkCerts(apk_keys_info)
 
+  apex_keys_info = sign_target_files_apks.ReadApexKeysInfo(input_zip)
+  apex_keys = sign_target_files_apks.GetApexKeys(apex_keys_info, apk_keys)
+
+  codename_to_api_level_map = sign_target_files_apks.GetCodenameToApiLevelMap(input_zip)
+
   for info in input_zip.infolist():
     filename = info.filename
 
@@ -153,6 +263,7 @@ def handle_all_files_verbatim(input_zip, output_zip):
     out_info = copy.copy(info)
     (is_apk, is_compressed, should_be_skipped) = sign_target_files_apks.GetApkFileInfo(
              filename, compressed_extension, [])
+    # APK singing
     if is_apk and should_be_skipped:
       print("Skip signing apk (should skip): {}".format(filename))
       common.ZipWriteStr(output_zip, out_info, data)
@@ -167,6 +278,19 @@ def handle_all_files_verbatim(input_zip, output_zip):
         print("Signing apk: {} by key: {}".format(name, idt_key_map[apk_keys[name]]))
         signed_data = handle_apks_CA_sign(data, idt_key_map[apk_keys[name]])
         common.ZipWriteStr(output_zip, out_info, signed_data)
+    # Apex module signing
+    elif filename.startswith("SYSTEM/apex") and filename.endswith(".apex"):
+      name = os.path.basename(filename)
+      payload_key, container_key = apex_keys[name]
+      if (payload_key in common.SPECIAL_CERT_STRINGS or
+          container_key in common.SPECIAL_CERT_STRINGS):
+        print("SKIP signing apex (special cert): {}".format(filename))
+        common.ZipWriteStr(output_zip, out_info, data)
+      else:
+        apex_file = idt_process_apex_file(filename, data, apk_keys, codename_to_api_level_map)
+        apex_file = handle_apex_payload_sign(apex_file, idt_apex_payload_key)
+        signed_data = handle_apex_container_sign(apex_file, "SYS_Platform")
+        common.ZipWriteStr(output_zip, out_info, signed_data)
     elif filename in ("SYSTEM/build.prop",
                       "VENDOR/build.prop",
                       "SYSTEM/vendor/build.prop",
