c83bd8190b Arthur Chen 2020-10-19

AOS-338: Add parser calls into panel initialization.

    - change the timing data source to be from Linux kernel DTS.
    - adjust panel driver to match the initialization flow.

Change-Id: Ife2085a793c658789fb3ba4efed367e53fea3a15

diff --git a/drivers/video/himax-hx8394f.c b/drivers/video/himax-hx8394f.c
index 4f8db5c775..ed4a32f19d 100644
--- a/drivers/video/himax-hx8394f.c
+++ b/drivers/video/himax-hx8394f.c
@@ -151,6 +151,11 @@ static int hx8394f_panel_enable_backlight(struct udevice *dev)
 	struct hx8394f_panel_priv *priv = dev_get_priv(dev);
 	int ret;
 
+	/* fill characteristics of DSI data link */
+	device->lanes = priv->lanes;
+	device->format = priv->format;
+	device->mode_flags = priv->mode_flags;
+
 	ret = hx8394f_reset_sequence(priv->reset);
 	if (ret < 0)
 		return ret;
@@ -181,17 +186,8 @@ static int hx8394f_panel_enable_backlight(struct udevice *dev)
 static int hx8394f_panel_get_display_timing(struct udevice *dev,
 					    struct display_timing *timings)
 {
-	struct mipi_dsi_panel_plat *plat = dev_get_platdata(dev);
-	struct mipi_dsi_device *device = plat->device;
-	struct hx8394f_panel_priv *priv = dev_get_priv(dev);
-
 	memcpy(timings, &default_timing, sizeof(*timings));
 
-	/* fill characteristics of DSI data link */
-	device->lanes = priv->lanes;
-	device->format = priv->format;
-	device->mode_flags = priv->mode_flags;
-
 	return 0;
 }
 
diff --git a/drivers/video/video_link.c b/drivers/video/video_link.c
index d4e9755de7..349c2a2a5e 100644
--- a/drivers/video/video_link.c
+++ b/drivers/video/video_link.c
@@ -15,6 +15,9 @@
 #include <video.h>
 #include <panel.h>
 #include <hdmi_timing_idt.h>
+#ifdef CONFIG_IDT_BOARD_INFO_PARSER
+#include <idt_bdinfo_parser.h>
+#endif /* CONFIG_IDT_BOARD_INFO_PARSER */
 
 struct of_endpoint {
 	unsigned int port;
@@ -374,6 +377,29 @@ struct udevice *video_link_get_video_device(void)
 	return video_links[curr_video_link].link_devs[0];
 }
 
+#ifdef CONFIG_IDT_LINUX_DTB
+int idt_get_panel_display_timing(struct display_timing *timings)
+{
+	int idx = 0, slot = -1;
+	char *env_value;
+	int ret = 0;
+
+	env_value = env_get("entry_idx");
+	if (env_value != NULL)
+		idx = (int)simple_strtol(env_value, NULL, 10);
+	else
+		return -ENOENT;
+
+	slot = get_ab_slot_index();
+	if (slot < 0)
+		return -EBADR;
+
+	ret = get_dtbo_mipi_dsi_timing(slot, idx, timings);
+
+	return ret;
+}
+#endif /* CONFIG_IDT_LINUX_DTB */
+
 int video_link_get_display_timings(struct display_timing *timings)
 {
 	int i = 0;
@@ -397,6 +423,9 @@ int video_link_get_display_timings(struct display_timing *timings)
 				printf("fail to probe panel device %s
", dev->name);
 				return ret;
 			}
+#ifdef CONFIG_IDT_LINUX_DTB
+			return idt_get_panel_display_timing(timings);
+#endif /* CONFIG_IDT_LINUX_DTB*/
 
 			ret = panel_get_display_timing(dev, timings);
 			if (ret) {
