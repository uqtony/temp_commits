f7c7b019f170 Jay 2021-07-19

AOS-520: Locate memory to match new version spi driver.

New version linux kernel add timestamp function into
spi driver, we need to locate memory to store timestamp.
Otherwise, system will crash.

Change-Id: Id7048342c5f91ba5895629310bdb34c2539cac54

diff --git a/drivers/misc/idg_spi.c b/drivers/misc/idg_spi.c
index d8251b7df70a..5d47bf87f8ed 100644
--- a/drivers/misc/idg_spi.c
+++ b/drivers/misc/idg_spi.c
@@ -33,6 +33,7 @@
 #include <linux/stat.h>
 #include <linux/uaccess.h>
 #include <linux/semaphore.h>
+#include <linux/ptp_clock_kernel.h>
 
 #include "idg_spi.h"
 
@@ -283,6 +284,13 @@ static ssize_t idgv5_spi_tty_write(struct file *file, const char __user *buffer,
 		pr_err("%s: idgv5 spi tty write failed(%d)", DRVNAME, status);
 		goto ttyv5_write_out;
 	}
+	x_init->ptp_sts = kmalloc(sizeof(struct ptp_system_timestamp), GFP_KERNEL);
+	if (!x_init->ptp_sts) {
+		status = -ENOMEM;
+		pr_err("%s: idgv5 spi tty write failed(%d)", DRVNAME, status);
+		goto ttyv5_write_out;
+	}
+
 	x = x_init;
 #if IDG_INPUT_HEX_NUMBER
 	memcpy(idg_tx, CLIENT_NEOII_Header_V5, IDG_HEADER_LEN);
@@ -353,6 +361,7 @@ static ssize_t idgv5_spi_tty_write(struct file *file, const char __user *buffer,
 	else
 		pr_err("%s: idgv5 spi tty write failed(%d)", DRVNAME, status);
 
+	kfree(x_init->ptp_sts);
 	kfree(x_init);
 
 	return status;
@@ -473,6 +482,12 @@ static ssize_t idg_spi_tty_write(struct file *file, const char __user *buffer,
 		pr_err("%s: idgv2 spi tty write failed(%d)", DRVNAME, status);
 		goto tty_write_out;
 	}
+	x_init->ptp_sts = kmalloc(sizeof(struct ptp_system_timestamp), GFP_KERNEL);
+	if (!x_init->ptp_sts) {
+		status = -ENOMEM;
+		pr_err("%s: idgv2 spi tty write failed(%d)", DRVNAME, status);
+		goto tty_write_out;
+	}
 	x = x_init;
 #if IDG_INPUT_HEX_NUMBER
 	memcpy(idg_tx, CLIENT_NEOII_Header_V2, IDG_HEADER_LEN);
@@ -543,6 +558,7 @@ static ssize_t idg_spi_tty_write(struct file *file, const char __user *buffer,
 	else
 		pr_err("%s: idg spi tty write failed(%d)", DRVNAME, status);
 
+	kfree(x_init->ptp_sts);
 	kfree(x_init);
 
 	return status;
@@ -624,12 +640,22 @@ static void idg_spi_report(struct idg_spi_device *idg_dev)
 		status = -ENOMEM;
 		goto spi_report_out;
 	}
+	x_init->ptp_sts = kmalloc(sizeof(struct ptp_system_timestamp), GFP_KERNEL);
+	if (!x_init->ptp_sts) {
+		status = -ENOMEM;
+		goto spi_report_out;
+	}
 	x = x_init;
 	x_s_init = kmalloc(sizeof(struct spi_transfer), GFP_KERNEL);
 	if (x_s_init == NULL) {
 		status = -ENOMEM;
 		goto spi_report_out;
 	}
+	x_s_init->ptp_sts = kmalloc(sizeof(struct ptp_system_timestamp), GFP_KERNEL);
+	if (!x_s_init->ptp_sts) {
+		status = -ENOMEM;
+		goto spi_report_out;
+	}
 	x_s = x_s_init;
 	spin_lock_irq(&idg_dev->spi_lock);
 	spi = spi_dev_get(idg_dev->spi_dev);
@@ -1065,9 +1091,12 @@ static void idg_spi_report(struct idg_spi_device *idg_dev)
 			fifo_add_msg(idg_dev->v2_fifo, data);
 		}
 	}
+	kfree(x_init->ptp_sts);
 	kfree(x_init);
-	if (x_s_init != NULL)
+	if (x_s_init != NULL) {
+		kfree(x_s_init->ptp_sts);
 		kfree(x_s_init);
+	}
 
 }
 
