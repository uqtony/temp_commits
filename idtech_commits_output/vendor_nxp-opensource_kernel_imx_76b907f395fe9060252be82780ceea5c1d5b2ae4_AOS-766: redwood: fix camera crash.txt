76b907f395fe owen.wen 2021-11-05

AOS-766: redwood: fix camera crash

Symptom: camera crash
RootCause: capture resolution setting not correct

set 800x480 as default resolution for camera preview

Change-Id: I36a9523e95dd30a526e2ae8d11019d14d31bd7f2

diff --git a/drivers/media/platform/mxc/capture/gc02m2_mipi.c b/drivers/media/platform/mxc/capture/gc02m2_mipi.c
index e23548e390eb..2e2b4a4f03e3 100644
--- a/drivers/media/platform/mxc/capture/gc02m2_mipi.c
+++ b/drivers/media/platform/mxc/capture/gc02m2_mipi.c
@@ -38,31 +38,35 @@
 #define GC02M2_MCLK_MIN		6000000
 #define GC02M2_MCLK_MAX		27000000
 
+#define GC02M2_SENSOR_MAX_WIDTH		1612
+#define GC02M2_SENSOR_MAX_HEIGHT	1230
+#define GC02M2_SENSOR_MIN_WIDTH		32
+#define GC02M2_SENSOR_MIN_HEIGHT	32
+
 enum gc02m2_mode {
-        gc02m2_mode_MIN = 0,
+	gc02m2_mode_MIN = 0,
 	/* currently only support 1600x1200 */
-        gc02m2_mode_UXGA_1600_1200 = 0,
-        gc02m2_mode_MAX = 1,
-        gc02m2_mode_INIT = 0xff, /*only for sensor init*/
-};
-
-enum gc02m2_frame_rate {
-        gc02m2_30_fps
+	gc02m2_mode_1600_1200 = 0,
+	gc02m2_mode_1280_720,
+	gc02m2_mode_800_480,
+	gc02m2_mode_MAX,
+	gc02m2_mode_INIT = 0xff, /*only for sensor init*/
 };
 
 struct gc02m2 {
-        struct v4l2_subdev subdev;
-        struct i2c_client *i2c_client;
-        struct v4l2_pix_format pix;
-        const struct ov2685_datafmt *fmt;
-        struct v4l2_captureparm streamcap;
-        bool on;
-
-        u32 mclk;
-        struct clk *sensor_clk;
-        int csi;
-
-        void (*io_init)(struct gc02m2 *);
+	struct v4l2_subdev subdev;
+	struct i2c_client *i2c_client;
+	struct v4l2_pix_format pix;
+	const struct ov2685_datafmt *fmt;
+	struct mutex lock;
+	struct v4l2_mbus_framefmt format;
+	struct v4l2_captureparm streamcap;
+	bool on;
+	unsigned int streaming:1;
+	u32 mclk;
+	struct clk *sensor_clk;
+	int csi;
+	void (*io_init)(struct gc02m2 *sensor);
 	struct gpio_desc *xshutdown_gpio;
 	struct gpio_desc *power_gpio;
 };
@@ -73,24 +77,26 @@ struct gc02m2_datafmt {
 };
 
 static const struct gc02m2_datafmt gc02m2_colour_fmts[] = {
-        {MEDIA_BUS_FMT_YUYV8_2X8, V4L2_COLORSPACE_JPEG},
+	{MEDIA_BUS_FMT_SGBRG10_1X10, V4L2_COLORSPACE_JPEG},
 };
 
 
 struct gc02m2_res {
-        int width;
-        int height;
+	int width;
+	int height;
 };
 
 struct gc02m2_res gc02m2_res[] = {
-        [0] = {1600, 1200},
+	[0] = {1600, 1200},
+	[1] = {1280, 720},
+	[2] = {800, 480},
 };
 
 #define RES_SIZE (ARRAY_SIZE(gc02m2_res))
 
 struct sensor_reg_value {
-        u8 addr;
-        u8 val;
+	u8 addr;
+	u8 val;
 };
 
 static struct sensor_reg_value gc02m2_stream_on[] = {
@@ -101,7 +107,7 @@ static struct sensor_reg_value gc02m2_stream_off[] = {
 	{0xfe, 0x00}, {0x3e, 0x00}
 };
 
-static struct sensor_reg_value gc02m2_init_setting[] = {
+static struct sensor_reg_value gc02m2_1600_1200_setting[] = {
 	/*system*/
 	{0xfc, 0x01}, {0xf4, 0x41}, {0xf5, 0xc0}, {0xf6, 0x44},
 	{0xf8, 0x38}, {0xf9, 0x82}, {0xfa, 0x00}, {0xfd, 0x80},
@@ -186,22 +192,180 @@ static struct sensor_reg_value gc02m2_init_setting[] = {
 	{0xfe, 0x01}, {0x8c, 0x10}, {0xfe, 0x00}, {0x3e, 0x00},
 };
 
-static inline struct gc02m2 *to_gc02m2(const struct i2c_client *client)
-{
-	return container_of(i2c_get_clientdata(client), struct gc02m2, subdev);
-}
+static struct sensor_reg_value gc02m2_1280_720_setting[] = {
+	/*system*/
+	{0xfc, 0x01}, {0xf4, 0x41}, {0xf5, 0xc0}, {0xf6, 0x44},
+	{0xf8, 0x38}, {0xf9, 0x82}, {0xfa, 0x00}, {0xfd, 0x80},
+	{0xfc, 0x81}, {0xfe, 0x03}, {0x01, 0x0b}, {0xf7, 0x01},
+	{0xfc, 0x80}, {0xfc, 0x80}, {0xfc, 0x80}, {0xfc, 0x8e},
 
-/* Find a data format by a pixel code in an array */
-static const struct gc02m2_datafmt
-			*gc02m2_find_datafmt(u32 code)
-{
-	int i;
+	/*CISCTL*/
+	{0xfe, 0x00}, {0x87, 0x09}, {0xee, 0x72}, {0xfe, 0x01},
+	{0x8c, 0x90}, {0xfe, 0x00}, {0x90, 0x00}, {0x03, 0x04},
+	{0x04, 0x7d}, {0x41, 0x04}, {0x42, 0xf4}, {0x05, 0x04},
+	{0x06, 0x48}, {0x07, 0x00}, {0x08, 0x18}, {0x9d, 0x18},
+	{0x09, 0x00}, {0x0a, 0x02}, {0x0d, 0x04}, {0x0e, 0xbc},
+	{0x17, 0x80}, {0x19, 0x04}, {0x24, 0x00}, {0x56, 0x20},
+	{0x5b, 0x00}, {0x5e, 0x01},
 
-	for (i = 0; i < ARRAY_SIZE(gc02m2_colour_fmts); i++)
-		if (gc02m2_colour_fmts[i].code == code)
-			return gc02m2_colour_fmts + i;
+	/*analog Register width*/
+	{0x21, 0x3c}, {0x44, 0x20}, {0xcc, 0x01},
+
+	/*analog mode*/
+	{0x1a, 0x14}, {0x1f, 0x11}, {0x27, 0x30}, {0x2b, 0x00},
+	{0x33, 0x00}, {0x53, 0x90}, {0xe6, 0x50},
+
+	/*analog voltage*/
+	{0x39, 0x07}, {0x43, 0x04}, {0x46, 0x2a}, {0x7c, 0xa0},
+	{0xd0, 0xbe}, {0xd1, 0x40}, {0xd2, 0x40}, {0xd3, 0xb3},
+	{0xde, 0x1c},
+
+	/*analog current*/
+	{0xcd, 0x06}, {0xce, 0x6f},
+
+	/*CISCTL RESET*/
+	{0xfc, 0x88}, {0xfe, 0x10}, {0xfe, 0x00}, {0xfc, 0x8e},
+	{0xfe, 0x00}, {0xfe, 0x00}, {0xfe, 0x00}, {0xfe, 0x00},
+	{0xfc, 0x88}, {0xfe, 0x10}, {0xfe, 0x00}, {0xfc, 0x8e},
+	{0xfe, 0x04}, {0xe0, 0x01}, {0xfe, 0x00},
+
+	/*ISP*/
+	{0xfe, 0x01}, {0x53, 0x54}, {0x87, 0x53}, {0x89, 0x03},
+
+	/*Gain*/
+	{0xfe, 0x00}, {0xb0, 0x74}, {0xb1, 0x04}, {0xb2, 0x00},
+	{0xb6, 0x00}, {0xfe, 0x04}, {0xd8, 0x00}, {0xc0, 0x40},
+	{0xc0, 0x00}, {0xc0, 0x00}, {0xc0, 0x00}, {0xc0, 0x60},
+	{0xc0, 0x00}, {0xc0, 0xc0}, {0xc0, 0x2a}, {0xc0, 0x80},
+	{0xc0, 0x00}, {0xc0, 0x00}, {0xc0, 0x40}, {0xc0, 0xa0},
+	{0xc0, 0x00}, {0xc0, 0x90}, {0xc0, 0x19}, {0xc0, 0xc0},
+	{0xc0, 0x00}, {0xc0, 0xD0}, {0xc0, 0x2F}, {0xc0, 0xe0},
+	{0xc0, 0x00}, {0xc0, 0x90}, {0xc0, 0x39}, {0xc0, 0x00},
+	{0xc0, 0x01}, {0xc0, 0x20}, {0xc0, 0x04}, {0xc0, 0x20},
+	{0xc0, 0x01}, {0xc0, 0xe0}, {0xc0, 0x0f}, {0xc0, 0x40},
+	{0xc0, 0x01}, {0xc0, 0xe0}, {0xc0, 0x1a}, {0xc0, 0x60},
+	{0xc0, 0x01}, {0xc0, 0x20}, {0xc0, 0x25}, {0xc0, 0x80},
+	{0xc0, 0x01}, {0xc0, 0xa0}, {0xc0, 0x2c}, {0xc0, 0xa0},
+	{0xc0, 0x01}, {0xc0, 0xe0}, {0xc0, 0x32}, {0xc0, 0xc0},
+	{0xc0, 0x01}, {0xc0, 0x20}, {0xc0, 0x38}, {0xc0, 0xe0},
+	{0xc0, 0x01}, {0xc0, 0x60}, {0xc0, 0x3c}, {0xc0, 0x00},
+	{0xc0, 0x02}, {0xc0, 0xa0}, {0xc0, 0x40}, {0xc0, 0x80},
+	{0xc0, 0x02}, {0xc0, 0x18}, {0xc0, 0x5c}, {0xfe, 0x00},
+	{0x9f, 0x10},
+
+	/*BLK*/
+	{0xfe, 0x00}, {0x26, 0x20}, {0xfe, 0x01}, {0x40, 0x22},
+	{0x46, 0x7f}, {0x49, 0x0f}, {0x4a, 0xf0}, {0xfe, 0x04},
+	{0x14, 0x80}, {0x15, 0x80}, {0x16, 0x80}, {0x17, 0x80},
+
+	/*ant_blooming*/
+	{0xfe, 0x01}, {0x41, 0x20}, {0x4c, 0x00}, {0x4d, 0x0c},
+	{0x44, 0x08}, {0x48, 0x03},
 
-	return NULL;
+	/*Window 1280X720*/
+	{0xfe, 0x01}, {0x90, 0x01}, {0x91, 0x00}, {0x92, 0xf6},
+	{0x93, 0x00}, {0x94, 0xa6}, {0x95, 0x02}, {0x96, 0xd0},
+	{0x97, 0x05}, {0x98, 0x00},
+
+	/*mipi*/
+	{0xfe, 0x03}, {0x01, 0x23}, {0x03, 0xce}, {0x04, 0x48},
+	{0x15, 0x00}, {0x21, 0x10}, {0x22, 0x05}, {0x23, 0x20},
+	{0x25, 0x20}, {0x26, 0x08}, {0x29, 0x06}, {0x2a, 0x0a},
+	{0x2b, 0x08},
+
+	/*out*/
+	{0xfe, 0x01}, {0x8c, 0x10}, {0xfe, 0x00}, {0x3e, 0x90},
+};
+
+static struct sensor_reg_value gc02m2_800_480_setting[] = {
+	/*system*/
+	{0xfc, 0x01}, {0xf4, 0x41}, {0xf5, 0xe1}, {0xf6, 0x44},
+	{0xf8, 0x38}, {0xf9, 0x82}, {0xfa, 0x01}, {0xfd, 0xc0},
+	{0xfc, 0x81}, {0xfe, 0x03}, {0x01, 0x0b}, {0xf7, 0x11},
+	{0xfc, 0x80}, {0xfc, 0x80}, {0xfc, 0x80}, {0xfc, 0x8e},
+
+	/*CISCTL*/
+	{0xfe, 0x00}, {0x87, 0x09}, {0xee, 0x72}, {0xfe, 0x01},
+	{0x8c, 0x90}, {0xfe, 0x00}, {0x90, 0x00}, {0x03, 0x02},
+	{0x04, 0x40}, {0x41, 0x02}, {0x42, 0x7a}, {0x05, 0x04},
+	{0x06, 0x48}, {0x07, 0x00}, {0x08, 0x18}, {0x9d, 0x18},
+	{0x09, 0x00}, {0x0a, 0x02}, {0x0d, 0x04}, {0x0e, 0xbc},
+	{0x17, 0x80}, {0x19, 0x04}, {0x24, 0x41}, {0x56, 0x20},
+	{0x5b, 0x00}, {0x5e, 0x01},
+
+	/*analog Register width*/
+	{0x21, 0x1e}, {0x29, 0x20}, {0x44, 0x10},
+	{0x4b, 0x08}, {0x55, 0x0d}, {0xcc, 0x01},
+
+	/*analog mode*/
+	{0x1a, 0x14}, {0x1f, 0x19}, {0x27, 0x30}, {0x2b, 0x00},
+	{0x33, 0x00}, {0x53, 0x90}, {0xe6, 0x50},
+
+	/*analog voltage*/
+	{0x39, 0x07}, {0x43, 0x04}, {0x46, 0x2a}, {0x7c, 0xa0},
+	{0xd0, 0xbe}, {0xd1, 0x40}, {0xd2, 0x40}, {0xd3, 0xb3},
+	{0xde, 0x1c},
+
+	/*analog current*/
+	{0xcd, 0x06}, {0xce, 0x6f},
+
+	/*CISCTL RESET*/
+	{0xfc, 0x88}, {0xfe, 0x10}, {0xfe, 0x00}, {0xfc, 0x8e},
+	{0xfe, 0x00}, {0xfe, 0x00}, {0xfe, 0x00}, {0xfe, 0x00},
+	{0xfc, 0x88}, {0xfe, 0x10}, {0xfe, 0x00}, {0xfc, 0x8e},
+	{0xfe, 0x04}, {0xe0, 0x01}, {0xfe, 0x00},
+
+	/*ISP*/
+	{0xfe, 0x01}, {0x53, 0x54}, {0x87, 0x53}, {0x89, 0x03},
+
+	/*Gain*/
+	{0xfe, 0x00}, {0xb0, 0x74}, {0xb1, 0x04}, {0xb2, 0x00},
+	{0xb6, 0x00}, {0xfe, 0x04}, {0xd8, 0x00}, {0xc0, 0x40},
+	{0xc0, 0x00}, {0xc0, 0x00}, {0xc0, 0x00}, {0xc0, 0x60},
+	{0xc0, 0x00}, {0xc0, 0xc0}, {0xc0, 0x2a}, {0xc0, 0x80},
+	{0xc0, 0x00}, {0xc0, 0x00}, {0xc0, 0x40}, {0xc0, 0xa0},
+	{0xc0, 0x00}, {0xc0, 0x90}, {0xc0, 0x19}, {0xc0, 0xc0},
+	{0xc0, 0x00}, {0xc0, 0xD0}, {0xc0, 0x2F}, {0xc0, 0xe0},
+	{0xc0, 0x00}, {0xc0, 0x90}, {0xc0, 0x39}, {0xc0, 0x00},
+	{0xc0, 0x01}, {0xc0, 0x20}, {0xc0, 0x04}, {0xc0, 0x20},
+	{0xc0, 0x01}, {0xc0, 0xe0}, {0xc0, 0x0f}, {0xc0, 0x40},
+	{0xc0, 0x01}, {0xc0, 0xe0}, {0xc0, 0x1a}, {0xc0, 0x60},
+	{0xc0, 0x01}, {0xc0, 0x20}, {0xc0, 0x25}, {0xc0, 0x80},
+	{0xc0, 0x01}, {0xc0, 0xa0}, {0xc0, 0x2c}, {0xc0, 0xa0},
+	{0xc0, 0x01}, {0xc0, 0xe0}, {0xc0, 0x32}, {0xc0, 0xc0},
+	{0xc0, 0x01}, {0xc0, 0x20}, {0xc0, 0x38}, {0xc0, 0xe0},
+	{0xc0, 0x01}, {0xc0, 0x60}, {0xc0, 0x3c}, {0xc0, 0x00},
+	{0xc0, 0x02}, {0xc0, 0xa0}, {0xc0, 0x40}, {0xc0, 0x80},
+	{0xc0, 0x02}, {0xc0, 0x18}, {0xc0, 0x5c}, {0xfe, 0x00},
+	{0x9f, 0x10},
+
+	/*BLK*/
+	{0xfe, 0x00}, {0x26, 0x20}, {0xfe, 0x01}, {0x40, 0x22},
+	{0x46, 0x7f}, {0x49, 0x0f}, {0x4a, 0xf0}, {0xfe, 0x04},
+	{0x14, 0x80}, {0x15, 0x80}, {0x16, 0x80}, {0x17, 0x80},
+
+	/*ant_blooming*/
+	{0xfe, 0x01}, {0x41, 0x20}, {0x4c, 0x00}, {0x4d, 0x0c},
+	{0x44, 0x08}, {0x48, 0x03},
+
+	/*Window 800X480*/
+	{0xfe, 0x01}, {0x90, 0x01}, {0x91, 0x00}, {0x92, 0x04},
+	{0x93, 0x00}, {0x94, 0x03}, {0x95, 0x01}, {0x96, 0xe0},
+	{0x97, 0x03}, {0x98, 0x20},
+
+	/*mipi*/
+	{0xfe, 0x03}, {0x01, 0x23}, {0x03, 0xce}, {0x04, 0x48},
+	{0x15, 0x00}, {0x21, 0x08}, {0x22, 0x03}, {0x23, 0x0e},
+	{0x25, 0x13}, {0x26, 0x05}, {0x29, 0x03}, {0x2a, 0x04},
+	{0x2b, 0x05},
+
+	/*out*/
+	{0xfe, 0x01}, {0x8c, 0x10}, {0xfe, 0x00}, {0x3e, 0x90},
+};
+
+static inline struct gc02m2 *to_gc02m2(const struct i2c_client *client)
+{
+	return container_of(i2c_get_clientdata(client), struct gc02m2, subdev);
 }
 
 /* i2c read/write stuff */
@@ -210,15 +374,13 @@ static int gc02m2_read_reg(struct i2c_client *client, u16 reg, u8 *val)
 	int ret;
 	unsigned char data;
 
-        if ((ret = i2c_master_send(client, &reg, 1)) != 1) {
-                return ret;
-        }
-
-        if ((ret = i2c_master_recv(client, &data, 1)) != 1) {
-                return ret;
-        }
-
-        *val = data;
+	ret = i2c_master_send(client, &reg, 1);
+	if (ret != 1)
+		return ret;
+	ret = i2c_master_recv(client, &data, 1);
+	if (ret != 1)
+		return ret;
+	*val = data;
 
 	return 0;
 }
@@ -301,30 +463,16 @@ static int gc02m2_s_power(struct v4l2_subdev *subdev, int on)
 	int ret;
 	struct gc02m2 *sensor = to_gc02m2(subdev);
 
+	mutex_lock(&sensor->lock);
 	if (on)
 		ret = gc02m2_power_on(sensor);
 	else
 		ret = gc02m2_power_off(sensor);
+	mutex_unlock(&sensor->lock);
 
 	return ret;
 }
 
-static int get_resolution_index(int w, int h)
-{
-	int i;
-
-	for (i = 0; i < RES_SIZE; i++) {
-		if (w != gc02m2_res[i].width)
-			continue;
-		if (h != gc02m2_res[i].height)
-			continue;
-
-		return i;
-	}
-
-	return -1;
-}
-
 static int gc02m2_g_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
@@ -377,6 +525,20 @@ static int gc02m2_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
 	        sensor->streamcap.capturemode = 0;
 		sensor->streamcap.timeperframe.denominator = DEFAULT_FPS;
 	        sensor->streamcap.timeperframe.numerator = 1;
+		switch (a->parm.capture.capturemode) {
+		case gc02m2_mode_1600_1200:
+			ret = gc02m2_write_reg_array(sensor->i2c_client, gc02m2_1600_1200_setting,
+				sizeof(gc02m2_1600_1200_setting)/sizeof(struct sensor_reg_value));
+			break;
+		case gc02m2_mode_1280_720:
+			ret = gc02m2_write_reg_array(sensor->i2c_client, gc02m2_1280_720_setting,
+				sizeof(gc02m2_1280_720_setting)/sizeof(struct sensor_reg_value));
+			break;
+		case gc02m2_mode_800_480:
+			ret = gc02m2_write_reg_array(sensor->i2c_client, gc02m2_800_480_setting,
+				sizeof(gc02m2_800_480_setting)/sizeof(struct sensor_reg_value));
+			break;
+		}
 		break;
 
 	/* These are all the possible cases. */
@@ -400,40 +562,58 @@ static int gc02m2_s_parm(struct v4l2_subdev *sd, struct v4l2_streamparm *a)
 	return ret;
 }
 
+static const struct v4l2_mbus_framefmt *find_sensor_format(
+	struct v4l2_mbus_framefmt *mf)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(gc02m2_colour_fmts); i++)
+		if (mf->code == gc02m2_colour_fmts[i].code)
+			return &gc02m2_colour_fmts[i];
+
+	return &gc02m2_colour_fmts[0];
+}
+
+static void gc02m2_try_format(struct v4l2_mbus_framefmt *mf)
+{
+	const struct v4l2_mbus_framefmt *fmt;
+
+	fmt = find_sensor_format(mf);
+	mf->code = fmt->code;
+	mf->field = V4L2_FIELD_NONE;
+	v4l_bound_align_image(&mf->width, GC02M2_SENSOR_MIN_WIDTH,
+			      GC02M2_SENSOR_MAX_WIDTH, 0,
+			      &mf->height, GC02M2_SENSOR_MIN_HEIGHT,
+			      GC02M2_SENSOR_MAX_HEIGHT, 0, 0);
+}
+
+static struct v4l2_mbus_framefmt *__gc02m2_get_format(
+		struct gc02m2 *sensor, struct v4l2_subdev_pad_config *cfg,
+		u32 pad, enum v4l2_subdev_format_whence which)
+{
+	if (which == V4L2_SUBDEV_FORMAT_TRY)
+		return cfg ? v4l2_subdev_get_try_format(&sensor->subdev, cfg, pad) : NULL;
+
+	return &sensor->format;
+}
+
 static int gc02m2_set_fmt(struct v4l2_subdev *sd,
 			  struct v4l2_subdev_pad_config *cfg,
-			  struct v4l2_subdev_format *format)
+			  struct v4l2_subdev_format *fmt)
 {
-	struct v4l2_mbus_framefmt *mf = &format->format;
-	const struct gc02m2_datafmt *fmt = gc02m2_find_datafmt(mf->code);
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
 	struct gc02m2 *sensor = to_gc02m2(client);
-	int index;
-
-	if (!fmt) {
-		mf->code	= gc02m2_colour_fmts[0].code;
-		mf->colorspace	= gc02m2_colour_fmts[0].colorspace;
-		fmt		= &gc02m2_colour_fmts[0];
-	}
-
-	mf->field	= V4L2_FIELD_NONE;
-
-	if (format->which == V4L2_SUBDEV_FORMAT_TRY)
-		return 0;
+	struct v4l2_mbus_framefmt *mf;
 
-	sensor->fmt = fmt;
+	gc02m2_try_format(&fmt->format);
 
-	index = get_resolution_index(mf->width, mf->height);
-	if (index >= 0) {
-		sensor->streamcap.capturemode = index;
-		sensor->pix.width = mf->width;
-		sensor->pix.height = mf->height;
-		return 0;
+	mf = __gc02m2_get_format(sensor, cfg, fmt->pad, fmt->which);
+	if (mf) {
+		mutex_lock(&sensor->lock);
+		*mf = fmt->format;
+		mutex_unlock(&sensor->lock);
 	}
-
-	dev_err(&client->dev, "Set format failed %d, %d
",
-		fmt->code, fmt->colorspace);
-	return -EINVAL;
+	return 0;
 }
 
 static int gc02m2_get_fmt(struct v4l2_subdev *sd,
@@ -448,12 +628,13 @@ static int gc02m2_get_fmt(struct v4l2_subdev *sd,
 	if (format->pad)
 		return -EINVAL;
 
+	mutex_lock(&sensor->lock);
 	mf->code	= fmt->code;
 	mf->colorspace	= fmt->colorspace;
 	mf->field	= V4L2_FIELD_NONE;
-
 	mf->width	= sensor->pix.width;
 	mf->height	= sensor->pix.height;
+	mutex_unlock(&sensor->lock);
 
 	return 0;
 }
@@ -485,14 +666,17 @@ static int gc02m2_detect(struct i2c_client *client)
 static int gc02m2_s_stream(struct v4l2_subdev *sd, int enable)
 {
 	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	struct gc02m2 *state = to_gc02m2(client);
 	int ret;
 
+	mutex_lock(&state->lock);
 	if (enable)
 		ret = gc02m2_write_reg_array(client, gc02m2_stream_on,
 				sizeof(gc02m2_stream_on)/sizeof(struct sensor_reg_value));
 	else
 		ret = gc02m2_write_reg_array(client, gc02m2_stream_off,
 				sizeof(gc02m2_stream_off)/sizeof(struct sensor_reg_value));
+	mutex_unlock(&state->lock);
 
 	return ret;
 }
@@ -523,11 +707,11 @@ static int gc02m2_enum_mbus_code(struct v4l2_subdev *sd,
 				 struct v4l2_subdev_pad_config *cfg,
 				 struct v4l2_subdev_mbus_code_enum *code)
 {
-        if (code->pad || code->index >= ARRAY_SIZE(gc02m2_colour_fmts))
-                return -EINVAL;
+	if (code->pad || code->index >= ARRAY_SIZE(gc02m2_colour_fmts))
+		return -EINVAL;
 
-        code->code = gc02m2_colour_fmts[code->index].code;
-        return 0;
+	code->code = gc02m2_colour_fmts[code->index].code;
+	return 0;
 }
 
 static int gc02m2_enum_frame_size(struct v4l2_subdev *sd,
@@ -550,8 +734,9 @@ static int gc02m2_enum_frame_size(struct v4l2_subdev *sd,
 static int init_device(struct gc02m2 *sensor)
 {
 	int ret;
-	ret = gc02m2_write_reg_array(sensor->i2c_client, gc02m2_init_setting,
-			sizeof(gc02m2_init_setting)/sizeof(struct sensor_reg_value));
+
+	ret = gc02m2_write_reg_array(sensor->i2c_client, gc02m2_800_480_setting,
+			sizeof(gc02m2_800_480_setting)/sizeof(struct sensor_reg_value));
 	return ret;
 }
 
@@ -603,6 +788,7 @@ static int gc02m2_probe(struct i2c_client *client)
 	struct gc02m2 *sensor;
 
 	sensor = devm_kzalloc(dev, sizeof(struct gc02m2), GFP_KERNEL);
+	mutex_init(&sensor->lock);
 
 	/* request power pin */
 	sensor->power_gpio = devm_gpiod_get(dev, "power", GPIOD_OUT_LOW);
@@ -635,24 +821,24 @@ static int gc02m2_probe(struct i2c_client *client)
 	}
 
 
-        ret = of_property_read_u32(dev->of_node, "csi_id", &(sensor->csi));
-        if (ret) {
+	ret = of_property_read_u32(dev->of_node, "csi_id", &(sensor->csi));
+	if (ret) {
 		dev_err(dev, "csi id missing or invalid
");
 		goto err_free;
-        }
+	}
 
-        clk_prepare_enable(sensor->sensor_clk);
+	clk_prepare_enable(sensor->sensor_clk);
 
 	sensor->io_init = gc02m2_reset;
-        sensor->i2c_client = client;
-        sensor->pix.pixelformat = V4L2_PIX_FMT_YUYV;
-        sensor->pix.width = 1600;
-        sensor->pix.height = 1200;
-        sensor->streamcap.capability = V4L2_MODE_HIGHQUALITY |
+	sensor->i2c_client = client;
+	sensor->pix.pixelformat = V4L2_PIX_FMT_SGBRG10;
+	sensor->pix.width = 800;
+	sensor->pix.height = 480;
+	sensor->streamcap.capability = V4L2_MODE_HIGHQUALITY |
                                            V4L2_CAP_TIMEPERFRAME;
-        sensor->streamcap.capturemode = 0;
-        sensor->streamcap.timeperframe.denominator = DEFAULT_FPS;
-        sensor->streamcap.timeperframe.numerator = 1;
+	sensor->streamcap.capturemode = 0;
+	sensor->streamcap.timeperframe.denominator = DEFAULT_FPS;
+	sensor->streamcap.timeperframe.numerator = 1;
 
 	/* power on sensor */
 	ret = gc02m2_power_on(sensor);
@@ -664,7 +850,7 @@ static int gc02m2_probe(struct i2c_client *client)
 	/* check i2c and sensor id */
 	ret = gc02m2_detect(client);
 	if (ret) {
-                dev_warn(dev, "Camera detect failed");
+		dev_warn(dev, "Camera detect failed");
 		goto err_free;
 	}
 
@@ -676,27 +862,27 @@ static int gc02m2_probe(struct i2c_client *client)
 		goto err_free;
 	}
 
-        v4l2_i2c_subdev_init(&sensor->subdev, client, &gc02m2_ops);
+	v4l2_i2c_subdev_init(&sensor->subdev, client, &gc02m2_ops);
 
-        sensor->subdev.grp_id = 678;
-        ret = v4l2_async_register_subdev(&sensor->subdev);
-        if (ret < 0) {
-                dev_err(&client->dev, "Async register failed, ret=%d
",
-                        ret);
+	sensor->subdev.grp_id = 678;
+	ret = v4l2_async_register_subdev(&sensor->subdev);
+	if (ret < 0) {
+		dev_err(&client->dev, "Async register failed, ret=%d
",
+			ret);
 		goto err_free;
 	}
 
 	gc02m2_s_stream(&sensor->subdev, 0);
-        dev_info(dev, "Camera is found
");
-        return ret;
+	dev_info(dev, "Camera is found
");
+	return ret;
 err_free:
 	devm_kfree(dev, sensor);
 	return ret;
 }
 
 static const struct of_device_id gc02m2_mipi_of_match[] = {
-        { .compatible = "galaxycore,gc02m2_mipi", },
-        { /* end */ }
+	{ .compatible = "galaxycore,gc02m2_mipi", },
+	{ /* end */ }
 };
 
 MODULE_DEVICE_TABLE(of, gc02m2_mipi_of_match);
diff --git a/drivers/media/platform/mxc/capture/mx6s_capture.c b/drivers/media/platform/mxc/capture/mx6s_capture.c
index 1166260c3e5a..1193f46c39c3 100644
--- a/drivers/media/platform/mxc/capture/mx6s_capture.c
+++ b/drivers/media/platform/mxc/capture/mx6s_capture.c
@@ -266,6 +266,18 @@ static struct mx6s_fmt formats[] = {
 		.pixelformat	= V4L2_PIX_FMT_SBGGR8,
 		.mbus_code	= MEDIA_BUS_FMT_SBGGR8_1X8,
 		.bpp		= 1,
+	}, {
+		.name		= "RAWRGB10 (SRGGB10)",
+		.fourcc		= V4L2_PIX_FMT_SRGGB10,
+		.pixelformat	= V4L2_PIX_FMT_SRGGB10,
+		.mbus_code	= MEDIA_BUS_FMT_SRGGB10_1X10,
+		.bpp		= 2,
+	}, {
+		.name		= "RAWRGB10 (SGBRG10)",
+		.fourcc		= V4L2_PIX_FMT_SGBRG10,
+		.pixelformat	= V4L2_PIX_FMT_SGBRG10,
+		.mbus_code	= MEDIA_BUS_FMT_SGBRG10_1X10,
+		.bpp		= 2,
 	}, {
 		.name		= "RAWRGB10 (SGRBG10)",
 		.fourcc		= V4L2_PIX_FMT_SGRBG10,
@@ -861,6 +873,8 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 		break;
 	case V4L2_PIX_FMT_UYVY:
 	case V4L2_PIX_FMT_YUYV:
+	case V4L2_PIX_FMT_SRGGB10:
+	case V4L2_PIX_FMT_SGBRG10:
 	case V4L2_PIX_FMT_SGRBG10:
 	case V4L2_PIX_FMT_SBGGR10:
 		if (csi_dev->csi_mipi_mode == true)
@@ -891,6 +905,8 @@ static int mx6s_configure_csi(struct mx6s_csi_dev *csi_dev)
 		case V4L2_PIX_FMT_SBGGR8:
 			cr18 |= BIT_MIPI_DATA_FORMAT_RAW8;
 			break;
+		case V4L2_PIX_FMT_SRGGB10:
+		case V4L2_PIX_FMT_SGBRG10:
 		case V4L2_PIX_FMT_SGRBG10:
 		case V4L2_PIX_FMT_SBGGR10:
 			cr18 |= BIT_MIPI_DATA_FORMAT_RAW10;
