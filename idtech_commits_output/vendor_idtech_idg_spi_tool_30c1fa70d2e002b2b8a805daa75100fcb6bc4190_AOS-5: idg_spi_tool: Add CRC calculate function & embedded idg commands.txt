30c1fa7 Arthur Chen 2019-10-30

AOS-5: idg_spi_tool: Add CRC calculate function & embedded idg commands

    Replace the CRC from hard code to be appending the function result.
    The added idg command supports are as following list:
        Activate_Transaction_Command
        Get_Transaction_Result
        legacy Activate_Transaction_Command
        legacy Get_Transaction_Result
        Exchange_APDU_Data
        Contact_Transaction_Power_Off

Change-Id: I91b60f297c4af1ee496a59c2515556e30fac2329
Reviewed-on: https://gerrit.idtechproducts.com/c/android-imx/idg_spi_tool/+/359
Reviewed-by: Arthur Chen <Arthur.Chen@idtechproducts.com>
Reviewed-by: Owen Wen <Owen.Wen@idtechproducts.com>
Reviewed-by: Sergii Postulga <Sergii.Postulga@idtechproducts.com>
Tested-by: Arthur Chen <Arthur.Chen@idtechproducts.com>

diff --git a/main.c b/main.c
index 980a66c..a11198d 100644
--- a/main.c
+++ b/main.c
@@ -13,21 +13,22 @@
 #include "./os_idg_spi.h"
 
 static const char *device = "/dev/spidev1.0";
-static uint8_t mode;
+static uint8_t mode = 0;
 static uint8_t bits = 8;
 static uint32_t speed = 50000;
-static uint32_t wait = 100000;
-static uint16_t delay;
+static uint32_t wait = 50000;
+static uint16_t delay = 0;
 static int read_times = 1;
 
 static void print_usage(const char *prog)
 {
-	printf("Usage: %s [-DsdhbrlvIHOLC3]
", prog);
+	printf("Usage: %s [-DIcsdhbrlvHOLC3]
", prog);
 	puts("  -D --device   device to use (default /dev/spidev1.0)
"
 	     "  -I --idgcmd   send neoii idg command
"
+	     "  -c --crc      CRC-16/CCTT caculator
"
 	     "  -s --speed    max speed (Hz) (default 50000Hz 50 KHz)
"
 	     "  -w --wait     waiting time for read response (usec) "
-	     "(default 100000us 100ms)
"
+	     "(default 50000us 50ms)
"
 	     "  -d --delay    delay (usec)  (default 0 usec)
"
 	     "  -h --help     print usage info
"
 	     "  -b --bpw      bits per word (default 8 bits)
"
@@ -51,12 +52,14 @@ static void print_version(const char *prog)
 static int parse_opts(int argc, char *argv[], uint8_t *buf)
 {
 	char *parameter;
+	unsigned char crc[256] = {};
 	int i, pos, num;
 	int data_size = 0;
 	while (1) {
 		static const struct option lopts[] = {
 			{ "device",  1, 0, 'D' },
 			{ "idgcmd",  1, 0, 'I' },
+			{ "crc",     1, 0, 'c' },
 			{ "speed",   1, 0, 's' },
 			{ "wait",    1, 0, 'w' },
 			{ "delay",   1, 0, 'd' },
@@ -76,7 +79,7 @@ static int parse_opts(int argc, char *argv[], uint8_t *buf)
 		};
 		int c;
 
-		c = getopt_long(argc, argv, "D:I:s:w:d:h:b:r:l:vHOLC3NR",
+		c = getopt_long(argc, argv, "D:I:c:s:w:d:h:b:r:l:vHOLC3NR",
 				lopts, NULL);
 
 		if (c == -1)
@@ -109,6 +112,7 @@ static int parse_opts(int argc, char *argv[], uint8_t *buf)
 				       "size = %d should be lower "
 				       "than %d
", data_size,
 				       MAX_BUFFER_SIZE);
+				data_size = -1;
 				break;
 			}
 			if (data_size <= 0) {
@@ -129,6 +133,35 @@ static int parse_opts(int argc, char *argv[], uint8_t *buf)
 				i--;
 			}
 			break;
+		case 'c':
+			data_size = atoi(optarg);
+			if (data_size > MAX_BUFFER_SIZE) {
+				printf("Over the IDG max package size, "
+				       "size = %d should be lower "
+				       "than %d
", data_size,
+				       MAX_BUFFER_SIZE);
+				break;
+			}
+			if (data_size <= 0) {
+				printf("Please assign the count of "
+				       "raw data to caculate
");
+				break;
+			}
+			for (i = 0; i < argc; i++) {
+				if (strncmp("-c", argv[i] , 2) == 0)
+				pos = i;
+			}
+			parameter = argv[pos++];
+			i = data_size;
+			while (i > 0) {
+				parameter = argv[pos++];
+				num = (int)strtol(parameter, NULL, 16);
+				crc[data_size - i] = (unsigned char)num;
+				i--;
+			}
+			showCRC(CalculateCRC(crc, data_size));
+			data_size = 0;
+			break;
 		case 'l':
 			mode |= SPI_LOOP;
 			break;
@@ -180,6 +213,7 @@ int main(int argc, char *argv[])
 
 	if (size > MAX_BUFFER_SIZE) {
 		size -= (MAX_BUFFER_SIZE + 1);
+		read_times = os_idg4receive(size);
 		size = os_idg4send(size, buffer);
 	}
 	printf("size: %d
", size);
@@ -249,6 +283,7 @@ int main(int argc, char *argv[])
 					       speed, delay, bits) < 1)
 				goto IOerror;
 
+			usleep(10000); /* wait 10 ms for next response */
 			read_times--;
 		} else {
 			break;
@@ -257,6 +292,7 @@ int main(int argc, char *argv[])
 
 IOerror:
 	close(fd);
+
 Outofsize:
 	free(buffer);
 
diff --git a/neoii_idg.h b/neoii_idg.h
index 2716a8f..69be2d2 100644
--- a/neoii_idg.h
+++ b/neoii_idg.h
@@ -208,15 +208,11 @@
 #define Wake_Up_Notification						"\xF1\x00"
 #define Switches_Notification						"\xF2\x00"
 
-
-#define LEN_Get_Version_Protocol_II					16
-#define LEN_Get_Firmware_Full_Version					16
-#define LEN_VM6800_Wake_Up						17
-#define LEN_Get_Contact_Reader_Status					17
-#define LEN_Pass_Through_Mode_Start_Stop				17
-#define LEN_Get_ATR							17
-#define LEN_Get_Serial_Number						16
-#define LEN_Ping							16
+#define LEN_Common							14
+#define LEN_VM6800_Wake_Up						15
+#define LEN_Get_Contact_Reader_Status					15
+#define LEN_Pass_Through_Mode_Start_Stop				15
+#define LEN_Get_ATR							15
 
 #endif /* _NEOII_IDG_H_ */
 
diff --git a/os_idg_spi.c b/os_idg_spi.c
index fffa56c..3074356 100644
--- a/os_idg_spi.c
+++ b/os_idg_spi.c
@@ -11,6 +11,58 @@
 #include "./os_idg_spi.h"
 #include "./neoii_idg.h"
 
+static const unsigned short CrcTable[ 256 ] = {
+	0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
+	0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
+	0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
+	0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
+	0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
+	0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
+	0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
+	0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
+	0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
+	0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
+	0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
+	0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
+	0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
+	0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
+	0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
+	0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
+	0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
+	0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
+	0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
+	0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
+	0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
+	0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
+	0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
+	0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
+	0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
+	0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
+	0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
+	0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
+	0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
+	0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
+	0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
+	0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
+};
+
+unsigned short CalculateCRC(unsigned char *Buffer, unsigned int Len)
+{
+	unsigned short Crc = 0xffff;
+		while (Len--)
+			Crc = CrcTable[((Crc >> 8) ^ *Buffer++)] ^ (Crc << 8);
+
+	return(Crc);
+}
+
+void showCRC(unsigned short result)
+{
+	uint8_t crc1 = (uint8_t) (result & 0xFF);
+	uint8_t crc2 = (uint8_t) (result >> 8);
+
+	printf("	CRC = 0x%.2X, 0x%.2X
", crc1, crc2);
+}
+
 int os_idg_spi_send(int fd, uint8_t *buf, int data_size, int speed,
 		     int delay, int bits)
 {
@@ -130,63 +182,131 @@ os_poll_out:
 
 int os_idg4send(int index, uint8_t *buf)
 {
-	int i, cmd_size = 0;
+	bool para = false;
+	int i, plen, cmd_size = 0;
 	char *command = NULL;
+	uint8_t *data;
+	unsigned short crc;
+
 	printf("IDG index = %d
", index);
 	switch (index) {
 	case 1:
 		puts("IDG command: Get_Firmware_Full_Version");
-		asprintf(&command, "%s%c%s%c%c%c%s",
+		asprintf(&command, "%s%c%s%c%c%c",
 			 NEOII_Header, ' ', Get_Firmware_Full_Version,
-			 ' ', ' ', ' ', "\xA0\xDE");
-		cmd_size = LEN_Get_Firmware_Full_Version;
+			 ' ', ' ', ' ');
+		cmd_size = LEN_Common;
 		break;
 	case 2:
 		puts("IDG command: Get_Contact_Reader_Status");
-		asprintf(&command, "%s%c%s%c%c%c%s",
+		asprintf(&command, "%s%c%s%c%c%c",
 			 NEOII_Header, ' ', Get_Contact_Reader_Status,
-			 ' ', '\x01', '\x20', "\xFB\x14");
+			 ' ', '\x01', '\x20');
 		cmd_size = LEN_Get_Contact_Reader_Status;
 		break;
 	case 3:
 		puts("IDG command: Pass_Through_Mode_Start_Stop");
-		asprintf(&command, "%s%c%s%c%c%c%s",
+		asprintf(&command, "%s%c%s%c%c%c",
 			 NEOII_Header, ' ', Pass_Through_Mode_Start_Stop,
-			 ' ', '\x01', '\x01', "\x1D\x19");
+			 ' ', '\x01', '\x01');
 		cmd_size = LEN_Pass_Through_Mode_Start_Stop;
 		break;
 	case 4:
 		puts("IDG command: Get_ATR");
-		asprintf(&command, "%s%c%s%c%c%c%s",
+		asprintf(&command, "%s%c%s%c%c%c",
 			 NEOII_Header, ' ', Get_ATR,
-			 ' ', '\x01', '\x20', "\x21\xA9");
+			 ' ', '\x01', '\x20');
 		cmd_size = LEN_Get_ATR;
 		break;
 	case 5:
 		puts("IDG command: Get_Serial_Number");
-		asprintf(&command, "%s%c%s%c%c%s",
+		asprintf(&command, "%s%c%s%c%c",
 			 NEOII_Header, ' ', Get_Serial_Number,
-			 ' ', '\x0', "\x18\xA5");
-		cmd_size = LEN_Get_Serial_Number;
+			 ' ', ' ');
+		cmd_size = LEN_Common;
 		break;
 	case 6:
 		puts("IDG command: Ping");
-		asprintf(&command, "%s%c%s%c%c%s",
+		asprintf(&command, "%s%c%s%c%c",
 			 NEOII_Header, ' ', Ping,
-			 ' ', '\x0', "\xB3\xCD");
-		cmd_size = LEN_Ping;
+			 ' ', ' ');
+		cmd_size = LEN_Common;
 		break;
 	case 7:
+		puts("IDG command: Activate_Transaction_Command_b");
+		para = true;
+		puts("Enter parameter size:");
+		scanf("%d", &plen);
+		data = malloc(sizeof(uint8_t) * (int)plen);
+		for (i = 0; i < plen; i++) {
+			printf("Enter %d parameter (in hex):
", i+1);
+			scanf("%x", (unsigned int *)&data[i]);
+		}
+		asprintf(&command, "%s%c%s%c%c",
+			 NEOII_Header, ' ', Activate_Transaction_Command_b,
+			 (char)(plen >> 8), (char)(plen & 0xFF));
+		cmd_size = LEN_Common;
 		break;
 	case 8:
+		puts("IDG command: Get_Transaction_Result_b");
+		asprintf(&command, "%s%c%s%c%c",
+			 NEOII_Header, ' ', Get_Transaction_Result_b,
+			 ' ', ' ');
+		cmd_size = LEN_Common;
 		break;
 	case 9:
+		puts("IDG command: Activate_Transaction_Command_a");
+		/* legacy Activate Transaction Command */
+		para = true;
+		puts("Enter parameter size:");
+		scanf("%d", &plen);
+		data = malloc(sizeof(uint8_t) * (int)plen);
+		for (i = 0; i < plen; i++) {
+			printf("Enter %d parameter (in hex):
", i+1);
+			scanf("%x", (unsigned int *)&data[i]);
+		}
+		asprintf(&command, "%s%c%s%c%c",
+			 NEOII_Header, ' ', Activate_Transaction_Command_a,
+			 (char)(plen >> 8), (char)(plen & 0xFF));
+		cmd_size = LEN_Common;
 		break;
 	case 10:
+		puts("IDG command: Get_Transaction_Result_a");
+		/* legacy Get Transaction Result */
+		asprintf(&command, "%s%c%s%c%c%c",
+			 NEOII_Header, ' ', Get_Transaction_Result_a,
+			 ' ', ' ', ' ');
+		cmd_size = LEN_Common;
 		break;
 	case 11:
+		puts("IDG command: Exchange_APDU_Data");
+		para = true;
+		puts("Enter parameter size:");
+		scanf("%d", &plen);
+		data = malloc(sizeof(uint8_t) * (int)plen);
+		for (i = 0; i < plen; i++) {
+			printf("Enter %d parameter (in hex):
", i+1);
+			scanf("%x", (unsigned int *)&data[i]);
+		}
+		asprintf(&command, "%s%c%s%c%c",
+			 NEOII_Header, ' ', Exchange_APDU_Data,
+			 (char)(plen >> 8), (char)(plen & 0xFF));
+		cmd_size = LEN_Common;
 		break;
 	case 12:
+		puts("IDG command: Contact_Transaction_Power_Off");
+		para = true;
+		puts("Enter parameter size:");
+		scanf("%d", &plen);
+		data = malloc(sizeof(uint8_t) * (int)plen);
+		for (i = 0; i < plen; i++) {
+			printf("Enter %d parameter (in hex):
", i+1);
+			scanf("%x", (unsigned int *)&data[i]);
+		}
+		asprintf(&command, "%s%c%s%c%c",
+			 NEOII_Header, ' ', Contact_Transaction_Power_Off,
+			 (char)(plen >> 8), (char)(plen & 0xFF));
+		cmd_size = LEN_Common;
 		break;
 	case 13:
 		break;
@@ -573,11 +693,51 @@ int os_idg4send(int index, uint8_t *buf)
 	for (i = 0; i < cmd_size; i++)
 		buf[i] = (uint8_t)command[i];
 
+	if (para) {
+		for (i = cmd_size; i < cmd_size + plen; i++)
+			buf[i] = (uint8_t)data[i - cmd_size];
+
+		free(data);
+		cmd_size += plen;
+	}
+	crc = CalculateCRC((unsigned char *)buf, cmd_size);
+	buf[i] = (uint8_t) (crc & 0xFF);
+	buf[i + 1] = (uint8_t) (crc >> 8);
+	if (cmd_size <= 0)
+		cmd_size = -2;
+
 	free(command);
 
-	return cmd_size;
+	return cmd_size + 2; /* append CRC-16/CCITT */
 }
 
+int os_idg4receive(int index)
+{
+	int times = 0;
+
+	switch (index) {
+	case 1: /* Get_Firmware_Full_Version */
+	case 2: /* Get_Contact_Reader_Status */
+	case 3: /* Pass_Through_Mode_Start_Stop */
+	case 4: /* Get_ATR */
+	case 5: /* Get_Serial_Number */
+	case 6: /* Ping */
+	case 7: /* Activate_Transaction_Command_b */
+	case 8: /* Get_Transaction_Result_b */
+	case 9: /* Activate_Transaction_Command_a */
+	case 10: /* Get_Transaction_Result_a */
+	/*legacy Activate Transaction Command */
+	case 11: /* Exchange_APDU_Data */
+	case 12: /* Contact_Transaction_Power_Off */
+		times = 1;
+		break;
+	default:
+		times = 0;
+		break;
+	}
+
+	return times;
+}
 void print_idg_support()
 {
 	puts("  Supported IDG commands table:
"
@@ -588,5 +748,11 @@ void print_idg_support()
 	     "  	  4			Get_ATR
"
 	     "  	  5			Get_Serial_Number
"
 	     "  	  6			Ping
"
+	     "  	  7			Activate_Transaction_Command
"
+	     "  	  8			Get_Transaction_Result
"
+	     "  	  9			legacy Activate_Transaction_Command
"
+	     "  	  10			legacy Get_Transaction_Result
"
+	     "  	  11			Exchange_APDU_Data
"
+	     "  	  12			Contact_Transaction_Power_Off
"
 	     "  	  TBD			TBD
");
 }
diff --git a/os_idg_spi.h b/os_idg_spi.h
index 0d3aa49..57f137d 100644
--- a/os_idg_spi.h
+++ b/os_idg_spi.h
@@ -16,6 +16,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <stdbool.h>
 #include <getopt.h>
 #include <fcntl.h>
 #include <sys/ioctl.h>
@@ -27,6 +28,10 @@
 #define READ_POLL_TIME		500 /* poll for 500 ms */
 #define POLL_GOT		1
 
+/* calculate CRC-16/CCTT */
+unsigned short CalculateCRC(unsigned char *Buffer, unsigned int Len);
+/* print CRC-16/CCTT result in console */
+void showCRC(unsigned short result);
 /* costumized pull function */
 int os_idg_spi_poll(int fd, int timeout);
 /* spi receive hex raw data */
@@ -37,6 +42,8 @@ int os_idg_spi_send(int fd, uint8_t *buf, int data_size, int speed,
 		    int delay, int bits);
 /* prepare idg command by index number */
 int os_idg4send(int index, uint8_t *buf);
+/* prepare idg receive times by index number */
+int os_idg4receive(int index);
 /* print idg commands embedded in this program */
 void print_idg_support();
 
