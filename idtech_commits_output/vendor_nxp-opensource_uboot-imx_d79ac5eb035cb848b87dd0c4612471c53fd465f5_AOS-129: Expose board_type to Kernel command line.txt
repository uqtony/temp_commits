d79ac5eb03 George.Huang 2020-04-07

AOS-129: Expose board_type to Kernel command line

Change-Id: I2c91d121564f386216fc6ee27671e461e26769e4

diff --git a/common/image-android.c b/common/image-android.c
index ee247cbd1f..36802458fa 100644
--- a/common/image-android.c
+++ b/common/image-android.c
@@ -152,6 +152,17 @@ int android_image_get_kernel(const struct andr_img_hdr *hdr, int verify,
 		strncat(commandline, newbootargs, sizeof(commandline) - strlen(commandline));
 	}
 
+	/* append board type into bootargs */
+	char idt_board_type[BDINFO_DATA_SIZE] = "";
+
+	if (idt_get_board_type(idt_board_type, BDINFO_DATA_SIZE)) {
+		sprintf(newbootargs, " androidboot.board_type=%s", idt_board_type);
+		strncat(commandline, newbootargs, sizeof(commandline) - strlen(commandline));
+	} else {
+		printf("WARN: failed to get idt_get_board_type
");
+	}
+
+
 	sprintf(newbootargs,
 			" androidboot.boot_device_root=mmcblk%d", mmc_map_to_kernel_blk(mmc_get_env_dev()));
 	strncat(commandline, newbootargs, sizeof(commandline) - strlen(commandline));
diff --git a/include/persist_idt.h b/include/persist_idt.h
index ac064cafd4..41af5bffa5 100644
--- a/include/persist_idt.h
+++ b/include/persist_idt.h
@@ -107,6 +107,8 @@ extern AvbIOResult fsl_write_to_partition(AvbOps* ops, const char* partition,
 
 void idt_get_board_serial(char *serialnr);
 
+bool idt_get_board_type(char *buf, size_t buf_size);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/lib/persist_idt/persist_idt.c b/lib/persist_idt/persist_idt.c
index 2f9bb7aebb..d60f6196e6 100644
--- a/lib/persist_idt/persist_idt.c
+++ b/lib/persist_idt/persist_idt.c
@@ -248,3 +248,20 @@ void idt_get_board_serial(char *serialnr) {
 
 	return;
 }
+
+bool idt_get_board_type(char *buf, size_t buf_size)
+{
+	if (!buf || buf_size < BDINFO_DATA_SIZE) {
+		printf("Error: wrong input buffer or size
");
+		return false;
+	}
+	BoardInfoData bdinfo_data;
+	char response[FASTBOOT_RESPONSE_LEN];
+
+	if (bdinfo_read(&bdinfo_data, response, FASTBOOT_RESPONSE_LEN) != 0) {
+		printf("Error: bdinfo read failed: %s
", response);
+		return false;
+	}
+	avb_memcpy(buf, (char *)bdinfo_data.mb_model, buf_size);
+	return true;
+}
