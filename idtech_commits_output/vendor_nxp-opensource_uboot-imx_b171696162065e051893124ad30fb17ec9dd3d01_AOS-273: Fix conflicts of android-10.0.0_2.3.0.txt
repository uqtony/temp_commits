b171696162 George.Huang 2020-07-22

AOS-273: Fix conflicts of android-10.0.0_2.3.0

Change-Id: I921ac773c541f27cd0e058ffe7f687a35a5d1c85

diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
index 07710e7d3f..cd506c2e7a 100644
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -773,7 +773,6 @@ dtb-$(CONFIG_ARCH_IMX8) += \
 	fsl-imx8qxp-lpddr4-val-gpmi-nand.dtb \
 	fsl-imx8qxp-17x17-val.dtb \
 	fsl-imx8dx-17x17-val.dtb \
-<<<<<<< HEAD
 	fsl-imx8qxp-mek-auto.dtb \
 	fsl-imx8dx-mek.dtb \
 	fsl-imx8dxl-phantom-mek.dtb \
@@ -799,21 +798,6 @@ dtb-$(CONFIG_ARCH_IMX8M) += \
 	imx8mn-ab2.dtb
 
 dtb-$(CONFIG_ARCH_IMXRT) += imxrt1050-evk.dtb
-=======
-	fsl-imx8dxl-phantom-mek.dtb
-
-dtb-$(CONFIG_ARCH_IMX8M) += fsl-imx8mq-evk.dtb \
-		fsl-imx8mq-ddr3l-arm2.dtb \
-		fsl-imx8mq-ddr4-arm2.dtb \
-		fsl-imx8mm-evk.dtb \
-		fsl-imx8mm-ddr3l-val.dtb \
-		fsl-imx8mm-ddr4-evk.dtb \
-		fsl-imx8mm-ddr4-val.dtb \
-		fsl-imx8mm-evk.dtb \
-		fsl-imx8mn-ddr4-evk.dtb \
-		fsl-imx8mn-a100.dtb \
-		fsl-imx8mq-aiy.dtb
->>>>>>> test_tagg
 
 dtb-$(CONFIG_RCAR_GEN2) += \
 	r8a7790-lager-u-boot.dtb \
diff --git a/arch/arm/include/asm/arch-imx8/sci/sci.h b/arch/arm/include/asm/arch-imx8/sci/sci.h
index 073bf02c01..5459d7e28b 100644
--- a/arch/arm/include/asm/arch-imx8/sci/sci.h
+++ b/arch/arm/include/asm/arch-imx8/sci/sci.h
@@ -122,7 +122,6 @@ int sc_rm_set_master_sid(sc_ipc_t ipc, sc_rsrc_t resource, sc_rm_sid_t sid);
 int sc_timer_set_wdog_window(sc_ipc_t ipc, sc_timer_wdog_time_t window);
 
 /* SECO API */
-<<<<<<< HEAD
 int sc_seco_authenticate(sc_ipc_t ipc, sc_seco_auth_cmd_t cmd,
 			 sc_faddr_t addr);
 int sc_seco_forward_lifecycle(sc_ipc_t ipc, u32 change);
@@ -143,24 +142,5 @@ int sc_seco_secvio_config(sc_ipc_t ipc, u8 id, u8 access,
 	u32 *data4, u8 size);
 int sc_seco_secvio_dgo_config(sc_ipc_t ipc, u8 id, u8 access,
 	u32 *data);
-=======
-int sc_seco_authenticate(sc_ipc_t ipc,
-	sc_seco_auth_cmd_t cmd, sc_faddr_t addr);
-int sc_seco_forward_lifecycle(sc_ipc_t ipc, uint32_t change);
-int sc_seco_chip_info(sc_ipc_t ipc, uint16_t *lc,
-	uint16_t *monotonic, uint32_t *uid_l, uint32_t *uid_h);
-void sc_seco_build_info(sc_ipc_t ipc, uint32_t *version,
-	uint32_t *commit);
-int sc_seco_get_event(sc_ipc_t ipc, uint8_t idx,
-	uint32_t *event);
-int sc_seco_gen_key_blob(sc_ipc_t ipc, uint32_t id,
-	sc_faddr_t load_addr, sc_faddr_t export_addr, uint16_t max_size);
-int sc_seco_get_mp_key(sc_ipc_t ipc, sc_faddr_t dst_addr,
-			uint16_t dst_size);
-int sc_seco_update_mpmr(sc_ipc_t ipc, sc_faddr_t addr,
-			uint8_t size, uint8_t lock);
-int sc_seco_get_mp_sign(sc_ipc_t ipc, sc_faddr_t msg_addr,
-			uint16_t msg_size, sc_faddr_t dst_addr, uint16_t dst_size);
->>>>>>> test_tagg
 
 #endif
diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index 4ee305dd15..d3369eaee6 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -159,11 +159,7 @@ config CMD_NANDBCB
 
 config FSL_MFGPROT
 	bool "Support the 'mfgprot' command"
-<<<<<<< HEAD
 	depends on IMX_HAB || AHAB_BOOT
-=======
-	depends on SECURE_BOOT || AHAB_BOOT
->>>>>>> test_tagg
 	select IMX_CAAM_MFG_PROT if ARCH_MX7
 	select IMX_SECO_MFG_PROT if ARCH_IMX8
 	help
diff --git a/arch/arm/mach-imx/imx8m/Kconfig b/arch/arm/mach-imx/imx8m/Kconfig
index 3eee48dcfa..90f2630861 100644
--- a/arch/arm/mach-imx/imx8m/Kconfig
+++ b/arch/arm/mach-imx/imx8m/Kconfig
@@ -105,7 +105,6 @@ config TARGET_IMX8MN_DDR4_EVK
 	select SUPPORT_SPL
 	select IMX8M_DDR4
 
-<<<<<<< HEAD
 config TARGET_IMX8MP_EVK
 	bool "imx8mp LPDDR4 EVK board"
 	select IMX8MP
@@ -120,15 +119,16 @@ config TARGET_IMX8MM_AB2
 
 config TARGET_IMX8MN_AB2
 	bool "imx8mn LPDDR4 Audio board 2.0"
-=======
+	select IMX8MN
+	select SUPPORT_SPL
+	select IMX8M_LPDDR4
+
 config TARGET_IMX8MN_A100
 	bool "imx8mn_a100"
->>>>>>> test_tagg
 	select IMX8MN
 	select SUPPORT_SPL
 	select IMX8M_LPDDR4
 
-<<<<<<< HEAD
 config TARGET_IMX8MN_DDR4_AB2
 	bool "imx8mn DDR4 Audio board 2.0"
 	select IMX8MN
@@ -145,23 +145,13 @@ endchoice
 
 source "board/freescale/imx8mq_evk/Kconfig"
 source "board/freescale/imx8mq_val/Kconfig"
+source "board/freescale/imx8mq_a300/Kconfig"
 source "board/freescale/imx8mm_ab2/Kconfig"
 source "board/freescale/imx8mm_evk/Kconfig"
 source "board/freescale/imx8mm_val/Kconfig"
 source "board/freescale/imx8mn_evk/Kconfig"
+source "board/freescale/imx8mn_a100/Kconfig"
 source "board/freescale/imx8mp_evk/Kconfig"
 source "board/toradex/verdin-imx8mm/Kconfig"
-=======
-endchoice
-
-source "board/freescale/imx8mq_evk/Kconfig"
-source "board/freescale/imx8mq_arm2/Kconfig"
-source "board/freescale/imx8mq_aiy/Kconfig"
-source "board/freescale/imx8mq_a300/Kconfig"
-source "board/freescale/imx8mm_evk/Kconfig"
-source "board/freescale/imx8mm_val/Kconfig"
-source "board/freescale/imx8mn_evk/Kconfig"
-source "board/freescale/imx8mn_a100/Kconfig"
->>>>>>> test_tagg
 
 endif
diff --git a/board/freescale/imx8mn_evk/Kconfig b/board/freescale/imx8mn_evk/Kconfig
index d205dea44e..d42b9133b2 100644
--- a/board/freescale/imx8mn_evk/Kconfig
+++ b/board/freescale/imx8mn_evk/Kconfig
@@ -9,12 +9,6 @@ config SYS_VENDOR
 config SYS_CONFIG_NAME
 	default "imx8mn_evk"
 
-<<<<<<< HEAD
-=======
-config IMX8MN_FORCE_NOM_SOC
-	bool "Force to use nominal mode for SOC and ARM"
-	default n
-
 config IDT_VALID_AVBKEY
 	bool "IDT validate avb key before booting"
 	help
@@ -38,7 +32,6 @@ config IDT_BACKUP_SPL
 	  0x200000 as secondary spl which will be loaded by Boot_ROM
 	  once if primary spl is corrupted.
 
->>>>>>> test_tagg
 source "board/freescale/common/Kconfig"
 
 endif
diff --git a/board/freescale/imx8mq_evk/imx8mq_evk.c b/board/freescale/imx8mq_evk/imx8mq_evk.c
index 1923cfc54b..f030d815b1 100644
--- a/board/freescale/imx8mq_evk/imx8mq_evk.c
+++ b/board/freescale/imx8mq_evk/imx8mq_evk.c
@@ -65,8 +65,6 @@ int board_qspi_init(void)
 }
 #endif
 
-<<<<<<< HEAD
-=======
 int dram_init(void)
 {
 	unsigned int mem_size = PHYS_SDRAM_SIZE;
@@ -85,7 +83,6 @@ int dram_init(void)
 	return 0;
 }
 
->>>>>>> test_tagg
 #ifdef CONFIG_FEC_MXC
 static int setup_fec(void)
 {
diff --git a/configs/imx8mn_a100_devboard_android_defconfig b/configs/imx8mn_a100_devboard_android_defconfig
index 66e2e93418..547106a420 100644
--- a/configs/imx8mn_a100_devboard_android_defconfig
+++ b/configs/imx8mn_a100_devboard_android_defconfig
@@ -21,8 +21,8 @@ CONFIG_CMD_EXT2=y
 CONFIG_CMD_EXT4=y
 CONFIG_CMD_EXT4_WRITE=y
 CONFIG_CMD_FAT=y
-CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8mn-a100"
-CONFIG_DEFAULT_FDT_FILE="fsl-imx8mn-a100.dtb"
+CONFIG_DEFAULT_DEVICE_TREE="imx8mn-evk"
+CONFIG_DEFAULT_FDT_FILE="imx8mn-evk.dtb"
 CONFIG_ENV_IS_IN_MMC=y
 CONFIG_ENV_IS_IN_SPI_FLASH=y
 CONFIG_CMD_SF=y
diff --git a/configs/imx8mn_a100_devboard_android_dual_defconfig b/configs/imx8mn_a100_devboard_android_dual_defconfig
index 5f28284ae7..b7e1df9024 100644
--- a/configs/imx8mn_a100_devboard_android_dual_defconfig
+++ b/configs/imx8mn_a100_devboard_android_dual_defconfig
@@ -21,8 +21,8 @@ CONFIG_CMD_EXT2=y
 CONFIG_CMD_EXT4=y
 CONFIG_CMD_EXT4_WRITE=y
 CONFIG_CMD_FAT=y
-CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8mn-a100"
-CONFIG_DEFAULT_FDT_FILE="fsl-imx8mn-a100.dtb"
+CONFIG_DEFAULT_DEVICE_TREE="imx8mn-evk"
+CONFIG_DEFAULT_FDT_FILE="imx8mn-evk.dtb"
 CONFIG_ENV_IS_IN_MMC=y
 CONFIG_ENV_IS_IN_SPI_FLASH=y
 CONFIG_CMD_SF=y
diff --git a/configs/imx8mn_a100_devboard_android_trusty_defconfig b/configs/imx8mn_a100_devboard_android_trusty_defconfig
index 63787b09a8..ae215b80fc 100644
--- a/configs/imx8mn_a100_devboard_android_trusty_defconfig
+++ b/configs/imx8mn_a100_devboard_android_trusty_defconfig
@@ -21,8 +21,8 @@ CONFIG_CMD_EXT2=y
 CONFIG_CMD_EXT4=y
 CONFIG_CMD_EXT4_WRITE=y
 CONFIG_CMD_FAT=y
-CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8mn-a100"
-CONFIG_DEFAULT_FDT_FILE="fsl-imx8mn-a100.dtb"
+CONFIG_DEFAULT_DEVICE_TREE="imx8mn-evk"
+CONFIG_DEFAULT_FDT_FILE="imx8mn-.dtb"
 CONFIG_ENV_IS_IN_MMC=y
 CONFIG_CMD_SF=y
 CONFIG_CMD_I2C=y
diff --git a/configs/imx8mn_a100_devboard_android_trusty_dual_defconfig b/configs/imx8mn_a100_devboard_android_trusty_dual_defconfig
index 955f86f173..c8d3dabb44 100644
--- a/configs/imx8mn_a100_devboard_android_trusty_dual_defconfig
+++ b/configs/imx8mn_a100_devboard_android_trusty_dual_defconfig
@@ -21,8 +21,8 @@ CONFIG_CMD_EXT2=y
 CONFIG_CMD_EXT4=y
 CONFIG_CMD_EXT4_WRITE=y
 CONFIG_CMD_FAT=y
-CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8mn-a100"
-CONFIG_DEFAULT_FDT_FILE="fsl-imx8mn-a100.dtb"
+CONFIG_DEFAULT_DEVICE_TREE="imx8mn-evk"
+CONFIG_DEFAULT_FDT_FILE="imx8mn-evk.dtb"
 CONFIG_ENV_IS_IN_MMC=y
 CONFIG_CMD_SF=y
 CONFIG_CMD_I2C=y
diff --git a/configs/imx8mn_a100_devboard_android_trusty_secure_unlock_defconfig b/configs/imx8mn_a100_devboard_android_trusty_secure_unlock_defconfig
index 02ec1a6a40..e0a091afbf 100644
--- a/configs/imx8mn_a100_devboard_android_trusty_secure_unlock_defconfig
+++ b/configs/imx8mn_a100_devboard_android_trusty_secure_unlock_defconfig
@@ -21,8 +21,8 @@ CONFIG_CMD_EXT2=y
 CONFIG_CMD_EXT4=y
 CONFIG_CMD_EXT4_WRITE=y
 CONFIG_CMD_FAT=y
-CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8mn-a100"
-CONFIG_DEFAULT_FDT_FILE="fsl-imx8mn-a100.dtb"
+CONFIG_DEFAULT_DEVICE_TREE="imx8mn-evk"
+CONFIG_DEFAULT_FDT_FILE="imx8mn-evk.dtb"
 CONFIG_ENV_IS_IN_MMC=y
 CONFIG_CMD_SF=y
 CONFIG_CMD_I2C=y
diff --git a/configs/imx8mn_a100_devboard_android_uuu_defconfig b/configs/imx8mn_a100_devboard_android_uuu_defconfig
index b4f1552846..7e5dfe3af7 100644
--- a/configs/imx8mn_a100_devboard_android_uuu_defconfig
+++ b/configs/imx8mn_a100_devboard_android_uuu_defconfig
@@ -21,8 +21,8 @@ CONFIG_CMD_EXT2=y
 CONFIG_CMD_EXT4=y
 CONFIG_CMD_EXT4_WRITE=y
 CONFIG_CMD_FAT=y
-CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8mn-a100"
-CONFIG_DEFAULT_FDT_FILE="fsl-imx8mn-a100.dtb"
+CONFIG_DEFAULT_DEVICE_TREE="imx8mn-evk"
+CONFIG_DEFAULT_FDT_FILE="imx8mn-evk.dtb"
 CONFIG_ENV_IS_IN_MMC=y
 CONFIG_ENV_IS_IN_SPI_FLASH=y
 CONFIG_CMD_SF=y
diff --git a/drivers/fastboot/fb_fsl/fb_fsl_boot.c b/drivers/fastboot/fb_fsl/fb_fsl_boot.c
index 3ab2ef8ad8..a9eec4e492 100644
--- a/drivers/fastboot/fb_fsl/fb_fsl_boot.c
+++ b/drivers/fastboot/fb_fsl/fb_fsl_boot.c
@@ -545,10 +545,10 @@ static int find_partition_data_by_name(char* part_name,
 		return 0;
 }
 
-<<<<<<< HEAD
 bool __weak is_power_key_pressed(void) {
 	return false;
-=======
+}
+
 #define GET_BYTE(x, n)  ((x & (0xff << 8 * n)) >> 8 * n)
 #define FDT_ID_SIZE	128 /* the maximun size of idt,prod-id is 128 */
 
@@ -634,7 +634,6 @@ find_out:
 	free(fdt_id);
 
 	return fdt_idx;
->>>>>>> test_tagg
 }
 
 int do_boota(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[]) {
diff --git a/drivers/usb/gadget/f_fastboot.c b/drivers/usb/gadget/f_fastboot.c
index b2cd329955..d9e151a043 100644
--- a/drivers/usb/gadget/f_fastboot.c
+++ b/drivers/usb/gadget/f_fastboot.c
@@ -20,12 +20,9 @@
 #include <linux/usb/composite.h>
 #include <linux/compiler.h>
 #include <g_dnl.h>
-<<<<<<< HEAD
 #include <serial.h>
 #include <stdio_dev.h>
-=======
 #include <persist_idt.h>
->>>>>>> test_tagg
 
 #define FASTBOOT_INTERFACE_CLASS	0xff
 #define FASTBOOT_INTERFACE_SUB_CLASS	0x42
diff --git a/include/configs/imx8mn_evk_android.h b/include/configs/imx8mn_evk_android.h
index ba19a6f39b..244ea512f4 100644
--- a/include/configs/imx8mn_evk_android.h
+++ b/include/configs/imx8mn_evk_android.h
@@ -8,12 +8,7 @@
 #define IMX8MN_EVK_ANDROID_H
 
 #define CONFIG_ANDROID_AB_SUPPORT
-<<<<<<< HEAD
-=======
-#define CONFIG_AVB_SUPPORT
 #define CONFIG_IDT_VALID_AVBKEY
-#define CONFIG_SUPPORT_EMMC_RPMB
->>>>>>> test_tagg
 #ifdef CONFIG_ANDROID_AB_SUPPORT
 #define CONFIG_SYSTEM_RAMDISK_SUPPORT
 #endif
diff --git a/include/configs/imx8mq_evk_android.h b/include/configs/imx8mq_evk_android.h
index 74e60b125d..c12a83ea48 100644
--- a/include/configs/imx8mq_evk_android.h
+++ b/include/configs/imx8mq_evk_android.h
@@ -8,12 +8,7 @@
 #define IMX8MQ_EVK_ANDROID_H
 
 #define CONFIG_ANDROID_AB_SUPPORT
-<<<<<<< HEAD
-=======
-#define CONFIG_AVB_SUPPORT
 #define CONFIG_IDT_VALID_AVBKEY
-#define CONFIG_SUPPORT_EMMC_RPMB
->>>>>>> test_tagg
 #ifdef CONFIG_ANDROID_AB_SUPPORT
 #define CONFIG_SYSTEM_RAMDISK_SUPPORT
 #endif
diff --git a/lib/Makefile b/lib/Makefile
index 2b63cd6d0a..6efcb2f1cb 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -59,12 +59,8 @@ obj-$(CONFIG_TPM_V1) += tpm-v1.o
 obj-$(CONFIG_TPM_V2) += tpm-v2.o
 endif
 
-<<<<<<< HEAD
 obj-$(CONFIG_$(SPL_)RSA) += rsa/
-=======
 obj-y += persist_idt/
-obj-$(CONFIG_RSA) += rsa/
->>>>>>> test_tagg
 obj-$(CONFIG_SHA1) += sha1.o
 obj-$(CONFIG_SHA256) += sha256.o
 
diff --git a/lib/avb/fsl/fsl_avb_ab_flow.c b/lib/avb/fsl/fsl_avb_ab_flow.c
index b5da9d1d0f..161dc621a9 100644
--- a/lib/avb/fsl/fsl_avb_ab_flow.c
+++ b/lib/avb/fsl/fsl_avb_ab_flow.c
@@ -278,176 +278,6 @@ static int spl_verify_rbidx(struct mmc *mmc, AvbABSlotData *slot,
 }
 #endif /* !CONFIG_XEN && CONFIG_IMX_TRUSTY_OS */
 
-<<<<<<< HEAD
-int mmc_load_image_raw_sector_dual_uboot(struct spl_image_info *spl_image,
-					 struct mmc *mmc)
-=======
-#ifdef CONFIG_PARSE_CONTAINER
-int mmc_load_image_parse_container_dual_uboot(
-		struct spl_image_info *spl_image, struct mmc *mmc)
-{
-	disk_partition_t info;
-	int ret = 0, n = 0;
-	char partition_name[PARTITION_NAME_LEN];
-	struct blk_desc *dev_desc;
-	AvbABData ab_data, ab_data_orig;
-	size_t slot_index_to_boot, target_slot;
-#if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
-	struct keyslot_package kp;
-#endif
-
-	/* Check if gpt is valid */
-	dev_desc = mmc_get_blk_desc(mmc);
-	if (dev_desc) {
-		if (part_get_info(dev_desc, 1, &info)) {
-			printf("GPT is invalid, please flash correct GPT!
");
-			return -1;
-		}
-	} else {
-		printf("Get block desc fail!
");
-		return -1;
-	}
-
-#if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
-	/* Read RPMB keyslot package, xen won't check this. */
-	read_keyslot_package(&kp);
-	if (strcmp(kp.magic, KEYPACK_MAGIC)) {
-		if (rpmbkey_is_set()) {
-			printf("
FATAL - RPMB key was destroyed!
");
-			hang();
-		} else
-			printf("keyslot package magic error, do nothing here!
");
-	} else {
-		/* Set power-on write protection to boot1 partition. */
-		if (mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_BOOT_WP, BOOT1_PWR_WP)) {
-			printf("Unable to set power-on write protection to boot1!
");
-			return -1;
-		}
-	}
-#endif
-
-	/* Load AB metadata from misc partition */
-	if (fsl_load_metadata_dual_uboot(dev_desc, &ab_data,
-					&ab_data_orig)) {
-		return -1;
-	}
-
-	slot_index_to_boot = 2;  // Means not 0 or 1
-	target_slot =
-	    (ab_data.slots[1].priority > ab_data.slots[0].priority) ? 1 : 0;
-
-	for (n = 0; n < 2; n++) {
-		if (!fsl_slot_is_bootable(&ab_data.slots[target_slot])) {
-			target_slot = (target_slot == 1 ? 0 : 1);
-			continue;
-		}
-		/* Choose slot to load. */
-		snprintf(partition_name, PARTITION_NAME_LEN,
-			 PARTITION_BOOTLOADER"%s",
-			 slot_suffixes[target_slot]);
-
-		/* Read part info from gpt */
-		if (part_get_info_by_name(dev_desc, partition_name, &info) == -1) {
-			printf("Can't get partition info of partition bootloader%s
",
-				slot_suffixes[target_slot]);
-			ret = -1;
-			goto end;
-		} else {
-			ret = mmc_load_image_parse_container(spl_image, mmc, info.start);
-
-			/* Don't need to check rollback index for xen. */
-#if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
-			/* Image loaded successfully, go to verify rollback index */
-			if (!ret && rpmbkey_is_set())
-				ret = spl_verify_rbidx(mmc, &ab_data.slots[target_slot], spl_image);
-
-			/* Copy rpmb keyslot to secure memory. */
-			if (!ret)
-				fill_secure_keyslot_package(&kp);
-#endif
-		}
-
-		/* Set current slot to unbootable if load/verify fail. */
-		if (ret != 0) {
-			/* Reboot if current slot has booted succefully before, this prevents
-			 * slot been marked as "unbootable" due to some random failures (like
-			 * eMMC/DRAM access error at some critical temperature).
-			 */
-			if (ab_data.slots[target_slot].successful_boot)
-				do_reset(NULL, 0, 0, NULL);
-			else {
-				printf("Load or verify bootloader%s fail, setting unbootable..
",
-				       slot_suffixes[target_slot]);
-				fsl_slot_set_unbootable(&ab_data.slots[target_slot]);
-				/* Switch to another slot. */
-				target_slot = (target_slot == 1 ? 0 : 1);
-			}
-		} else {
-			slot_index_to_boot = target_slot;
-			n = 2;
-		}
-	}
-
-	if (slot_index_to_boot == 2) {
-		/* No bootable slots, try to boot into recovery! */
-		printf("No bootable slots found, try to boot into recovery mode...
");
-
-		ab_data.spl_recovery = true;
-		if ((ab_data.last_boot != 0) && (ab_data.last_boot != 1))
-			slot_index_to_boot = 0;
-		else
-			slot_index_to_boot = ab_data.last_boot;
-
-		snprintf(partition_name, PARTITION_NAME_LEN,
-			 PARTITION_BOOTLOADER"%s",
-			 slot_suffixes[slot_index_to_boot]);
-
-		/* Read part info from gpt */
-		if (part_get_info_by_name(dev_desc, partition_name, &info) == -1) {
-			printf("Can't get partition info of partition bootloader%s
",
-				slot_suffixes[slot_index_to_boot]);
-			ret = -1;
-			goto end;
-		} else {
-			ret = mmc_load_image_parse_container(spl_image, mmc, info.start);
-
-			/* Don't need to check rollback index for xen. */
-#if !defined(CONFIG_XEN) && defined(CONFIG_IMX_TRUSTY_OS)
-			/* Image loaded successfully, go to verify rollback index */
-			if (!ret && rpmbkey_is_set())
-				ret = spl_verify_rbidx(mmc, &ab_data.slots[slot_index_to_boot], spl_image);
-
-			/* Copy rpmb keyslot to secure memory. */
-			if (!ret)
-				fill_secure_keyslot_package(&kp);
-#endif
-		}
-
-		if (ret)
-			goto end;
-	} else if (!ab_data.slots[slot_index_to_boot].successful_boot &&
-		   (ab_data.slots[slot_index_to_boot].tries_remaining > 0)) {
-		/* Set the bootloader_verified flag if current slot only has one chance. */
-		if (ab_data.slots[slot_index_to_boot].tries_remaining == 1)
-			ab_data.slots[slot_index_to_boot].bootloader_verified = 1;
-		ab_data.slots[slot_index_to_boot].tries_remaining -= 1;
-
-		ab_data.last_boot = slot_index_to_boot;
-	}
-	printf("Booting from bootloader%s...
", slot_suffixes[slot_index_to_boot]);
-
-end:
-	/* Save metadata if changed. */
-	if (fsl_save_metadata_if_changed_dual_uboot(dev_desc, &ab_data, &ab_data_orig)) {
-		ret = -1;
-	}
-
-	if (ret)
-		return -1;
-	else
-		return 0;
-}
-#else /* CONFIG_PARSE_CONTAINER */
 #ifdef CONFIG_IDT_BACKUP_SPL
 #define SRC_GPR10 0x30390098
 #define PERSIST_SECONDARY_BOOT (1<<30)
@@ -486,9 +316,9 @@ int check_hwpart_with_current_slot(struct mmc *mmc, size_t target_slot)
 	return 0;
 }
 #endif
-int mmc_load_image_raw_sector_dual_uboot(
-		struct spl_image_info *spl_image, struct mmc *mmc)
->>>>>>> test_tagg
+
+int mmc_load_image_raw_sector_dual_uboot(struct spl_image_info *spl_image,
+					 struct mmc *mmc)
 {
 	unsigned long count;
 	disk_partition_t info;
diff --git a/lib/libavb/avb_slot_verify.c b/lib/libavb/avb_slot_verify.c
index 0d0b229c5a..7818dc5337 100644
--- a/lib/libavb/avb_slot_verify.c
+++ b/lib/libavb/avb_slot_verify.c
@@ -1502,7 +1502,6 @@ AvbSlotVerifyResult avb_slot_verify(AvbOps* ops,
     goto fail;
   }
 
-<<<<<<< HEAD
   if (flags & AVB_SLOT_VERIFY_FLAGS_NO_VBMETA_PARTITION) {
     if (requested_partitions == NULL || requested_partitions[0] == NULL) {
       avb_fatal(
@@ -1544,8 +1543,8 @@ AvbSlotVerifyResult avb_slot_verify(AvbOps* ops,
                                  0 /* rollback_index_location */,
                                  "vbmeta",
                                  avb_strlen("vbmeta"),
-                                 NULL /* expected_public_key */,
-                                 0 /* expected_public_key_length */,
+                                 expect_pubkey /* expected_public_key */,
+                                 expect_pubkey_size /* expected_public_key_length */,
                                  slot_data,
                                  &algorithm_type,
                                  additional_cmdline_subst);
@@ -1555,22 +1554,6 @@ AvbSlotVerifyResult avb_slot_verify(AvbOps* ops,
   }
 
   if (!result_should_continue(ret)) {
-=======
-  ret = load_and_verify_vbmeta(ops,
-                               requested_partitions,
-                               ab_suffix,
-                               allow_verification_error,
-                               0 /* toplevel_vbmeta_flags */,
-                               0 /* rollback_index_location */,
-                               "vbmeta",
-                               avb_strlen("vbmeta"),
-                               expect_pubkey /* expected_public_key */,
-                               expect_pubkey_size /* expected_public_key_length */,
-                               slot_data,
-                               &algorithm_type,
-                               additional_cmdline_subst);
-  if (!allow_verification_error && ret != AVB_SLOT_VERIFY_RESULT_OK) {
->>>>>>> test_tagg
     goto fail;
   }
 
