f19a0a1c38dd jay deng 2021-03-18

AOS-523: Add thermal zone feature into LM75

Change-Id: I8b115424128ec93c5fb36ef76245106fe25e572d

diff --git a/arch/arm64/boot/dts/freescale/idt_imx8mq_evt-0_ibr210_evt-0.dtsi b/arch/arm64/boot/dts/freescale/idt_imx8mq_evt-0_ibr210_evt-0.dtsi
index 518fa238b39e..8c639620b287 100644
--- a/arch/arm64/boot/dts/freescale/idt_imx8mq_evt-0_ibr210_evt-0.dtsi
+++ b/arch/arm64/boot/dts/freescale/idt_imx8mq_evt-0_ibr210_evt-0.dtsi
@@ -501,10 +501,10 @@ ov5640_mipi1_ep: endpoint {
 		};
 	};
 
-	temp@48 {
+	tcn75: tcn75@48 {
 		compatible = "microchip,tcn75";
 		reg = <0x48>;
-
+		#thermal-sensor-cells = <0>;
 		at-det-gpio = <&gpio4 20 GPIO_ACTIVE_LOW>;
 	};
 
@@ -1204,4 +1204,28 @@ map1 {
 			};
 		};
 	};
+
+	tcn75-thermal {
+		polling-delay-passive = <250>;
+		polling-delay = <2000>;
+		thermal-sensors = <&tcn75 0>;
+
+		trips {
+			tcn75_alert0: trip0 {
+				temperature = <80000>;
+				hysteresis = <2000>;
+				type = "passive";
+			};
+			tcn75_alert1: trip1 {
+				temperature = <85000>;
+				hysteresis = <2000>;
+				type = "passive";
+			};
+			tcn75-crit {
+				temperature = <90000>;
+				hysteresis = <2000>;
+				type = "critical";
+			};
+		};
+	};
 };
diff --git a/drivers/hwmon/lm75.c b/drivers/hwmon/lm75.c
index 5e6392294c03..dd0f9e44b442 100644
--- a/drivers/hwmon/lm75.c
+++ b/drivers/hwmon/lm75.c
@@ -17,6 +17,7 @@
 #include <linux/of.h>
 #include <linux/regmap.h>
 #include <linux/util_macros.h>
+#include <linux/thermal.h>
 #include "lm75.h"
 
 /*
@@ -107,6 +108,7 @@ struct lm75_data {
 	unsigned int			sample_time;	/* In ms */
 	enum lm75_type			kind;
 	const struct lm75_params	*params;
+	struct thermal_zone_device	*z;
 };
 
 /*-----------------------------------------------------------------------*/
@@ -493,6 +495,20 @@ static umode_t lm75_is_visible(const void *data, enum hwmon_sensor_types type,
 	return 0;
 }
 
+static int lm75_read_temp(void *dev, int *temp)
+{
+	struct lm75_data *data = dev;
+	unsigned int regval;
+	int ret;
+
+	ret = regmap_read(data->regmap, LM75_REG_TEMP, &regval);
+	if (ret < 0)
+		return ret;
+
+	*temp = lm75_reg_to_mc(regval, data->resolution);;
+	return 0;
+}
+
 static const struct hwmon_channel_info *lm75_info[] = {
 	HWMON_CHANNEL_INFO(chip,
 			   HWMON_C_REGISTER_TZ | HWMON_C_UPDATE_INTERVAL),
@@ -512,6 +528,10 @@ static const struct hwmon_chip_info lm75_chip_info = {
 	.info = lm75_info,
 };
 
+static const struct thermal_zone_of_device_ops lm75_sensor_ops = {
+	.get_temp = lm75_read_temp,
+};
+
 static bool lm75_is_writeable_reg(struct device *dev, unsigned int reg)
 {
 	return reg != LM75_REG_TEMP;
@@ -607,6 +627,13 @@ lm75_probe(struct i2c_client *client, const struct i2c_device_id *id)
 
 	dev_info(dev, "%s: sensor '%s'
", dev_name(hwmon_dev), client->name);
 
+	data->z = devm_thermal_zone_of_sensor_register(dev, 0,
+							 data,
+							 &lm75_sensor_ops);
+	if (IS_ERR(data->z)) {
+		data->z = NULL;
+	}
+
 	return 0;
 }
 
