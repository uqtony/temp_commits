C51 COMPILER V9.53.0.0   I2C                                                               06/07/2023 09:16:45 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\i2c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\C51\BIN\C51.EXE ..\User\i2c.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\N76E003_Drive
                    -r\inc) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Listings\i2c.lst) TABS(2) OBJECT(.\Objects\i2c.obj)

line level    source

   1          #include "include.h"
   2          
   3          bool   ack;
   4          u8     I2CADR = 0x76; 
   5          
   6          #define I2C_SCL P13
   7          #define I2C_SDA P14
   8          
   9          #define   SCL_H   I2C_SCL=1
  10          #define   SCL_L   I2C_SCL=0
  11          
  12          #define   SDA_H   I2C_SDA=1
  13          #define   SDA_L   I2C_SDA=0 
  14          
  15          #define I2C_SDA_READ  I2C_SDA
  16          
  17          
  18          
  19          
  20          
  21          static void I2C_Delay_us(u8 uscount)
  22          {
  23   1          u8 x;
  24   1          for(x=0; x<uscount; x++)
  25   1          {
  26   2              ;
  27   2          }   
  28   1      }
  29          
  30          static void Start_I2c(void)
  31          {
  32   1        SDA_H;   
  33   1        I2C_Delay_us(1);
  34   1        SCL_H;
  35   1        I2C_Delay_us(10); 
  36   1        SDA_L;    
  37   1        I2C_Delay_us(7);        
  38   1        SCL_L;   
  39   1        I2C_Delay_us(1);
  40   1      }
  41          
  42          static void Stop_I2c(void)
  43          {
  44   1        SDA_L;    
  45   1        I2C_Delay_us(2);
  46   1        SCL_H; 
  47   1        I2C_Delay_us(10);
  48   1        SDA_H;  
  49   1        I2C_Delay_us(10);
  50   1      }
  51          
  52          
  53          static void  I2C_SendByte(u8 c)
  54          {
C51 COMPILER V9.53.0.0   I2C                                                               06/07/2023 09:16:45 PAGE 2   

  55   1        u8 bit_Cnt;
  56   1      
  57   1        for(bit_Cnt=0; bit_Cnt<8; bit_Cnt++) 
  58   1        {
  59   2          if((c<<bit_Cnt) & 0x80)
  60   2          {
  61   3            SDA_H;   
  62   3          }
  63   2          else
  64   2          { 
  65   3            SDA_L;                
  66   3          }
  67   2          I2C_Delay_us(3);
  68   2          SCL_H;             
  69   2          I2C_Delay_us(4);         
  70   2          SCL_L; 
  71   2        }
  72   1      
  73   1        I2C_Delay_us(1);
  74   1        SDA_H;              
  75   1        I2C_Delay_us(3);  
  76   1        SCL_H;
  77   1        I2C_Delay_us(3);
  78   1      
  79   1        if(I2C_SDA_READ != 0)
  80   1        { 
  81   2          ack=0;
  82   2        }  
  83   1        else
  84   1        {
  85   2          ack=1;
  86   2        }  
  87   1        SCL_L;
  88   1        I2C_Delay_us(3);
  89   1      }
  90            
  91          static u8  RcvByte(void)
  92          {
  93   1        u8 retc;
  94   1        u8 bit_Cnt;
  95   1      
  96   1        retc=0; 
  97   1        SDA_H;              
  98   1        for (bit_Cnt=0; bit_Cnt<8; bit_Cnt++)
  99   1        {
 100   2          I2C_Delay_us(1);          
 101   2          SCL_L;                  
 102   2          I2C_Delay_us(4);
 103   2          SCL_H;            
 104   2          I2C_Delay_us(2);
 105   2          retc=retc<<1;
 106   2          if (I2C_SDA_READ != 0)
 107   2          {
 108   3            retc = retc+1;
 109   3          }         
 110   2          I2C_Delay_us(2);
 111   2        }
 112   1        SCL_L;    
 113   1        I2C_Delay_us(5);
 114   1        return   retc;
 115   1      }
 116          
C51 COMPILER V9.53.0.0   I2C                                                               06/07/2023 09:16:45 PAGE 3   

 117          static void Ack_I2c(bool a)
 118          {
 119   1        if (a == 0)
 120   1        {
 121   2          SDA_L;
 122   2        }    
 123   1        else
 124   1        { 
 125   2          SDA_H;
 126   2        }  
 127   1      
 128   1        I2C_Delay_us(8);     
 129   1        SCL_H;
 130   1        I2C_Delay_us(15);  
 131   1        SCL_L;                 
 132   1        I2C_Delay_us(8);   
 133   1      }
 134          
 135          static bool i2c_write_byte(u8 sla,u8 suba,u8 *s,u8 no)
 136          {
 137   1        u8 i;
 138   1      
 139   1        Start_I2c();  
 140   1        
 141   1        I2C_SendByte(sla);  
 142   1        
 143   1        if(ack==0)
 144   1        {
 145   2          Stop_I2c();
 146   2          return  FALSE;
 147   2        }
 148   1        I2C_SendByte(suba);            
 149   1        if(ack == 0)
 150   1        {
 151   2          Stop_I2c();
 152   2          return FALSE;
 153   2        }
 154   1      
 155   1        for(i=0;i<no;i++)
 156   1        {   
 157   2          I2C_SendByte(*s);          
 158   2          if(ack == 0)
 159   2          {
 160   3            Stop_I2c();
 161   3            return  FALSE;
 162   3          }
 163   2          s++;
 164   2        } 
 165   1        Stop_I2c();             
 166   1        return TRUE;
 167   1      }
 168          
 169          static bool i2c_read_byte(u8 sla,u8 suba,u8 *s,u8 no)
 170          {
 171   1        u8 i;
 172   1        Start_I2c();                 
 173   1        I2C_SendByte(sla);              
 174   1        if(ack==0)
 175   1        {
 176   2          Stop_I2c();
 177   2          *s = 0x00;
 178   2          return FALSE;
C51 COMPILER V9.53.0.0   I2C                                                               06/07/2023 09:16:45 PAGE 4   

 179   2        }
 180   1        I2C_SendByte(suba);             
 181   1        if (ack == 0)
 182   1        {
 183   2          Stop_I2c();
 184   2          *s = 0x00;
 185   2          return  FALSE;
 186   2        }
 187   1        Start_I2c();      
 188   1        I2C_SendByte(sla+1);
 189   1        if (ack == 0)
 190   1        {
 191   2          Stop_I2c();
 192   2          *s = 0x00;
 193   2          return  FALSE;
 194   2        }
 195   1        for (i=0; i<no-1; i++)
 196   1        {   
 197   2          *s= RcvByte();              
 198   2          Ack_I2c(0);               
 199   2          s++;
 200   2        } 
 201   1        *s = RcvByte();
 202   1        Ack_I2c(1);                 
 203   1        Stop_I2c();                 
 204   1        return  TRUE;
 205   1      }
 206          
 207          u8 HDMI_ReadI2C_Byte(u8 RegAddr)
 208          {
 209   1        u8  p_data=0;
 210   1        
 211   1        if (i2c_read_byte(I2CADR, RegAddr, &p_data,1) != FALSE)
 212   1        {
 213   2          return p_data;
 214   2        }
 215   1        return 0;
 216   1      }
 217          
 218          bool HDMI_ReadI2C_ByteN(u8 RegAddr,u8 *p_data,u8 N)
 219          {
 220   1        bool flag;
 221   1        
 222   1        flag = i2c_read_byte(I2CADR, RegAddr, p_data,N);
 223   1        
 224   1        return flag;
 225   1      }
 226          
 227          bool HDMI_WriteI2C_Byte(u8 RegAddr, u8 d)
 228          {
 229   1        bool flag;
 230   1        
 231   1        flag=i2c_write_byte(I2CADR, RegAddr,&d,1);
 232   1        
 233   1        //printf("\r\nlt9611_write(pdata, 0x%02bx, 0x%02bx);", RegAddr,d);
 234   1        return flag;
 235   1      }
 236          
 237          bool HDMI_WriteI2C_ByteN(u8 RegAddr, u8 *d,u8 N)
 238          {
 239   1        bool flag;
 240   1        
C51 COMPILER V9.53.0.0   I2C                                                               06/07/2023 09:16:45 PAGE 5   

 241   1        flag=i2c_write_byte(I2CADR, RegAddr,d,N) ;
 242   1        
 243   1        return flag;
 244   1      }
 245          
 246          
 247          //void I2cMasterChoice(u8 i2cchannnel)
 248          //{
 249          //  switch(i2cchannnel)
 250          //  {
 251          //    case LT8631UXConfig:
 252          //      
 253          //      I2CADR = LT8631UX_ADDR; 
 254          //      
 255          //      break;
 256          //      
 257          //    default:
 258          //      break;
 259          //  }
 260          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    552    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
