C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DRVMIPIRX
OBJECT MODULE PLACED IN ..\..\..\..\..\out\DrvMipiRx.obj
COMPILER INVOKED BY: C:\Keil_v5\c51\C51\BIN\C51.EXE ..\User\Driver\DrvMipiRx.c LARGE OPTIMIZE(8,SIZE) OPTIMIZE(8,SIZE) R
                    -EGFILE(..\..\..\..\..\out\LT9211C_MIPI DSI to LVDS test.ORC) BROWSE INCDIR(..\User\Driver;..\User\App;..\User\Ocm;..\Use
                    -r\Module) DEBUG OBJECTEXTEND PRINT(.\Listings\DrvMipiRx.lst) OBJECT(..\..\..\..\..\out\DrvMipiRx.obj)

line level    source

   1          /******************************************************************************
   2            * @project: LT9211C
   3            * @file: DrvMipiRx.c
   4            * @author: sxue
   5            * @company: LONTIUM COPYRIGHT and CONFIDENTIAL
   6            * @date: 2023.01.29
   7          /******************************************************************************/
   8          
   9          #include "include.h"
  10          
  11          #if ((LT9211C_MODE_SEL == MIPI_IN_LVDS_OUT)||(LT9211C_MODE_SEL == MIPI_IN_MIPI_OUT)||(LT9211C_MODE_SEL == 
             -MIPI_IN_TTL_OUT))
  12          
  13          StructPcrPara g_stPcrPara;
  14          SrtuctMipiRx_VidTiming_Get g_stMipiRxVidTiming_Get;
  15          
  16          //hfp    hs     hbp     hact     htotal   vfp   vs   vbp   vact    vtotal  framerate
  17          RDATA struct VideoTimingList resolution[]  = {
  18           {24,    96,    40,     640,     800,     33,   2,   10,   480,    525,   60},  //video_640x480_60Hz
  19           {16,    62,    60,     720,     858,     9,    6,   30,   480,    525,   60},  //video_720x480_60Hz
  20           {12,    64,    88,     720,     864,     5,    5,   39,   576,    625,   50},  //video_720x576_50Hz
  21           {48,    128,   88,     800,     1056,    1,    4,   23,   600,    628,   60},  //video_800x600_60Hz
  22           {110,   40,    220,    1280,    1650,    5,    5,   20,   720,    750,   30},  //video_1280x720_30Hz
  23           {440,   40,    220,    1280,    1980,    5,    5,   20,   720,    750,   50},  //video_1280x720_50Hz
  24           {110,   40,    220,    1280,    1650,    5,    5,   20,   720,    750,   60},  //video_1280x720_60Hz
  25           {24,    136,   160,    1024,    1344,    3,    6,   29,   768,    806,   60},  //video_1024x768_60Hz
  26           {26,    110,   110,    1366,    1592,    13,   6,   13,   768,    800,   60},  //video_1366x768_60Hz
  27           {110,   40,    220,    1280,    1650,    5,    5,   20,   720,    750,   30},  //video_1280x720_30Hz
  28           {48,    32,    80,     1920,    2080,    5,    5,   20,   720,    750,   60},  //video_1920x720_60Hz
  29           {48,    112,   248,    1280,    1688,    1,    3,   38,   1024,   1066,  60},  //video_1028x1024_60Hz
  30           {88,    44,    148,    1920,    2200,    4,    5,   36,   1080,   1125,  30},  //video_1920x1080_30Hz
  31           {88,    44,    148,    1920,    2200,    4,    5,   36,   1080,   1125,  60},  //video_1920x1080_60Hz
  32           {88,    44,    148,    1920,    2200,    4,    5,   36,   1080,   1125,  90},  //video_1920x1080_90Hz
  33          // {90,    44,    148,    1920,    2202,    14,    5,   36,   1080,   1135,  60},  
  34           {64,    192,   304,    1600,    2160,    1,    3,   46,   1200,   1250,  60},  //video_1600x1200_60Hz
  35           {48,    32,    80,     1920,    2080,    3,    6,   26,   1200,   1235,  60},  //video_1920x1200_60Hz
  36           {32,    48,    80,     2048,    2208,    6,    3,   28,   1280,   1317,  60},  //video_2048x1280_60Hz
  37           {50,    48,    80,     2304,    2482,    6,    3,   32,   1440,   1481,  60},  //video_2304x1440_60Hz
  38           {48,    32,    80,     2560,    2720,    3,    5,   33,   1440,   1481,  60},  //video_2560x1440_60Hz
  39           {1276,  88,    296,    3840,    5500,    8,    10,  72,   2160,   2250,  24},  //video_3840x2160_24Hz
  40           {1056,  88,    296,    3840,    5280,    8,    10,  72,   2160,   2250,  25},  //video_3840x2160_25Hz
  41           {176,   88,    296,    3840,    4400,    8,    10,  72,   2160,   2250,  30},  //video_3840x2160_30Hz
  42          
  43           };
  44           
  45          #define MIPIRX_FORMAT_CNT   0x0f
  46          RDATA char* g_szStrRxFormat[MIPIRX_FORMAT_CNT] = 
  47          {
  48              "",
  49              "DSI YUV422 10bit",
  50              "DSI YUV422 12bit",
  51              "YUV422 8bit",
  52              "RGB 10bit",
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 2   

  53              "RGB 12Bit",
  54              "YUV420 8bit",
  55              "RGB 565",
  56              "RGB 666",
  57              "DSI RGB 6L",
  58              "RGB 8Bit",
  59              "RAW8",
  60              "RAW10",
  61              "RAW12",
  62              "CSI YUV422 10",
  63          };
  64          
  65          void DRV_DesscPll_SdmCal(void)
  66          {
  67   1          HDMI_WriteI2C_Byte(0xff,0xd0);//     
  68   1          HDMI_WriteI2C_Byte(0x08,0x00);//sel mipi rx sdm  
  69   1      
  70   1          HDMI_WriteI2C_Byte(0x26,0x80 | ((u8)g_stPcrPara.Pcr_M)); //m
  71   1          HDMI_WriteI2C_Byte(0x2d,g_stPcrPara.Pcr_UpLimit); //PCR M overflow limit setting.
  72   1          HDMI_WriteI2C_Byte(0x31,g_stPcrPara.Pcr_DownLimit); //PCR M underflow limit setting. 
  73   1          
  74   1          HDMI_WriteI2C_Byte(0x27,(u8)(g_stPcrPara.Pcr_K >> 16)); //k
  75   1          HDMI_WriteI2C_Byte(0x28,(u8)(g_stPcrPara.Pcr_K >> 8)); //k
  76   1          HDMI_WriteI2C_Byte(0x29,(u8)(g_stPcrPara.Pcr_K)); //k  
  77   1          HDMI_WriteI2C_Byte(0x26,(HDMI_ReadI2C_Byte(0x26) & 0x7f));
  78   1         
  79   1      }
  80          
  81          void Drv_MipiRx_DesscPll_Set()
  82          {
  83   1          u8 ucdesscpll_pixck_div = 0;
  84   1      
  85   1          HDMI_WriteI2C_Byte(0xff,0x82);
  86   1          HDMI_WriteI2C_Byte(0x26,0x20); //[7:6]desscpll reference select Xtal clock as reference
  87   1                                         //[4]1'b0: dessc-pll power down
  88   1          HDMI_WriteI2C_Byte(0x27,0x40); //prediv = 0;
  89   1      
  90   1          LTLog(LOG_INFO,"Mipi Rx PixClk: %ld",g_stRxVidTiming.ulPclk_Khz);
  91   1          if (g_stRxVidTiming.ulPclk_Khz >= 352000)
  92   1          {
  93   2              HDMI_WriteI2C_Byte(0x2f,0x04);
  94   2              ucdesscpll_pixck_div = 2;
  95   2          }
  96   1          else if (g_stRxVidTiming.ulPclk_Khz >= 176000 && g_stRxVidTiming.ulPclk_Khz < 352000)
  97   1          {
  98   2              HDMI_WriteI2C_Byte(0x2f,0x04);
  99   2              ucdesscpll_pixck_div = 2;
 100   2          }
 101   1          else if (g_stRxVidTiming.ulPclk_Khz >= 88000 && g_stRxVidTiming.ulPclk_Khz < 176000)
 102   1          {
 103   2              HDMI_WriteI2C_Byte(0x2f,0x05);
 104   2              ucdesscpll_pixck_div = 4;
 105   2          }
 106   1          else if (g_stRxVidTiming.ulPclk_Khz >= 44000 && g_stRxVidTiming.ulPclk_Khz < 88000)
 107   1          {
 108   2              HDMI_WriteI2C_Byte(0x2f,0x06);
 109   2              ucdesscpll_pixck_div = 8;
 110   2          }
 111   1          else if (g_stRxVidTiming.ulPclk_Khz >= 22000 && g_stRxVidTiming.ulPclk_Khz < 44000)
 112   1          {
 113   2              HDMI_WriteI2C_Byte(0x2f,0x07);
 114   2              ucdesscpll_pixck_div = 16;
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 3   

 115   2          }
 116   1          else 
 117   1          {
 118   2              HDMI_WriteI2C_Byte(0x2f,0x07);
 119   2              ucdesscpll_pixck_div = 16;
 120   2              HDMI_WriteI2C_Byte(0x2c,0x01); //desscpll lowf pixck divsel: /2
 121   2          }
 122   1      
 123   1          g_stPcrPara.Pcr_M = (g_stRxVidTiming.ulPclk_Khz * ucdesscpll_pixck_div) / 25;
 124   1          g_stPcrPara.Pcr_K = g_stPcrPara.Pcr_M % 1000;
 125   1          g_stPcrPara.Pcr_M = g_stPcrPara.Pcr_M / 1000;
 126   1          
 127   1          g_stPcrPara.Pcr_UpLimit   = g_stPcrPara.Pcr_M + 1;
 128   1          g_stPcrPara.Pcr_DownLimit = g_stPcrPara.Pcr_M - 1;
 129   1      
 130   1          g_stPcrPara.Pcr_K <<= 14;
 131   1      
 132   1          DRV_DesscPll_SdmCal();
 133   1          HDMI_WriteI2C_Byte(0xff,0x81);        
 134   1          HDMI_WriteI2C_Byte(0x03,0xfe); //desscpll rst
 135   1          Ocm_Timer0_Delay1ms(1);
 136   1          HDMI_WriteI2C_Byte(0x03,0xff); //desscpll rst   
 137   1      }
 138          
 139          u8 Drv_MipiRx_PcrCali(void)
 140          {    
 141   1          u8 ucRtn = TRUE;
 142   1          u8 ucPcr_Cal_Cnt;
 143   1          u32 ulrdbyteclk  = 0;
 144   1          u8 i;
 145   1        
 146   1          HDMI_WriteI2C_Byte(0xff,0xd0);      
 147   1          HDMI_WriteI2C_Byte(0x0c,0x60);  //fifo position
 148   1              HDMI_WriteI2C_Byte(0x1c,0x60);  //fifo position
 149   1              HDMI_WriteI2C_Byte(0x24,0x70);  //pcr mode( de hs vs)
 150   1                              
 151   1              HDMI_WriteI2C_Byte(0x2d,0x30); //M up limit
 152   1              HDMI_WriteI2C_Byte(0x31,0x0a); //M down limit
 153   1      
 154   1              /*stage1 hs mode*/
 155   1              HDMI_WriteI2C_Byte(0x25,0xf0);  //line limit
 156   1              HDMI_WriteI2C_Byte(0x2a,0x30);  //step in limit
 157   1              HDMI_WriteI2C_Byte(0x21,0x4f);  //hs_step
 158   1              HDMI_WriteI2C_Byte(0x22,0x00); 
 159   1      
 160   1              /*stage2 hs mode*/
 161   1              HDMI_WriteI2C_Byte(0x1e,0x01);  //RGD_DIFF_SND[7:4],RGD_DIFF_FST[3:0]
 162   1              HDMI_WriteI2C_Byte(0x23,0x80);  //hs_step
 163   1          /*stage2 de mode*/
 164   1              HDMI_WriteI2C_Byte(0x0a,0x02); //de adjust pre line
 165   1              HDMI_WriteI2C_Byte(0x38,0x02); //de_threshold 1
 166   1              HDMI_WriteI2C_Byte(0x39,0x04); //de_threshold 2
 167   1              HDMI_WriteI2C_Byte(0x3a,0x08); //de_threshold 3
 168   1              HDMI_WriteI2C_Byte(0x3b,0x10); //de_threshold 4
 169   1                      
 170   1              HDMI_WriteI2C_Byte(0x3f,0x04); //de_step 1
 171   1              HDMI_WriteI2C_Byte(0x40,0x08); //de_step 2
 172   1              HDMI_WriteI2C_Byte(0x41,0x10); //de_step 3
 173   1              HDMI_WriteI2C_Byte(0x42,0x20); //de_step 4
 174   1      
 175   1              HDMI_WriteI2C_Byte(0x2b,0xa0); //stable out
 176   1              
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 4   

 177   1          HDMI_WriteI2C_Byte(0xff,0xd0);   //enable HW pcr_m
 178   1              
 179   1              HDMI_WriteI2C_Byte(0x26,0x97);
 180   1          HDMI_WriteI2C_Byte(0x26,0x17);
 181   1              HDMI_WriteI2C_Byte(0x27,0x0f);
 182   1      
 183   1              HDMI_WriteI2C_Byte(0xff,0x81);  //pcr reset
 184   1              HDMI_WriteI2C_Byte(0x20,0xbf); // mipi portB div issue
 185   1              HDMI_WriteI2C_Byte(0x20,0xff);
 186   1              Ocm_Timer0_Delay1ms(5);
 187   1              HDMI_WriteI2C_Byte(0x0B,0x6F);
 188   1              HDMI_WriteI2C_Byte(0x0B,0xFF);
 189   1          
 190   1          if (g_stRxVidTiming.ulPclk_Khz < 44000)
 191   1          {
 192   2              #if MIPIRX_CLK_BURST == ENABLED
              //        HDMI_WriteI2C_Byte(0x0a,0x42);
                      HDMI_WriteI2C_Byte(0x0c,0x40); //[7:0]rgd_vsync_dly(sram rd delay)
                      HDMI_WriteI2C_Byte(0x1b,0x00); //pcr wr dly[15:0]
                      HDMI_WriteI2C_Byte(0x1c,0x40); //pcr wr dly[7:0]
                      #else
 198   2              HDMI_WriteI2C_Byte(0x0c,0x60); //[7:0]rgd_vsync_dly(sram rd delay)
 199   2              HDMI_WriteI2C_Byte(0x1b,0x00); //pcr wr dly[15:0]
 200   2              HDMI_WriteI2C_Byte(0x1c,0x60); //pcr wr dly[7:0]
 201   2              #endif
 202   2          }
 203   1          else 
 204   1          {
 205   2              HDMI_WriteI2C_Byte(0x0c,0x40); //[7:0]rgd_vsync_dly(sram rd delay)
 206   2              HDMI_WriteI2C_Byte(0x1b,0x00); //pcr wr dly[15:0]
 207   2              HDMI_WriteI2C_Byte(0x1c,0x40); //pcr wr dly[7:0]
 208   2          }
 209   1          
 210   1          HDMI_WriteI2C_Byte(0xff,0x81);     
 211   1          HDMI_WriteI2C_Byte(0x09,0xdb);
 212   1          HDMI_WriteI2C_Byte(0x09,0xdf); //pcr rst
 213   1      
 214   1          HDMI_WriteI2C_Byte(0xff,0xd0);
 215   1          HDMI_WriteI2C_Byte(0x08,0x80);
 216   1          HDMI_WriteI2C_Byte(0x08,0x00);
 217   1          Ocm_Timer0_Delay1ms(10);
 218   1          ucPcr_Cal_Cnt = 0;
 219   1          
 220   1          do
 221   1          {     
 222   2              
 223   2              Ocm_Timer0_Delay1ms(500);
 224   2              ucPcr_Cal_Cnt++;
 225   2              LTLog(LOG_WARN,"PCR unstable M = 0x%02bx",(HDMI_ReadI2C_Byte(0x94)&0x7F));
 226   2          }while((ucPcr_Cal_Cnt < 50) && ((HDMI_ReadI2C_Byte(0x87) & 0x18) != 0x18));
 227   1      
 228   1          if((HDMI_ReadI2C_Byte(0x87) & 0x18) != 0x18)
 229   1          {
 230   2              LTLog(LOG_INFO,"LT9211C pcr unstable");
 231   2              ucRtn = FAIL;
 232   2          }
 233   1          
 234   1      //    for(i=0;i<30;i++)
 235   1      //    {
 236   1      //        Ocm_Timer0_Delay1ms(500);
 237   1      //      ulrdbyteclk = Drv_System_FmClkGet(AD_MLRXA_BYTE_CLK);
 238   1      //        ulrdbyteclk = ulrdbyteclk / 1000;
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 5   

 239   1      //       LTLog(LOG_DEBUG, "mipi input byteclk: %ldM", ulrdbyteclk);
 240   1      //        
 241   1      
 242   1      //         HDMI_WriteI2C_Byte(0xff,0x86);
 243   1      //         
 244   1      //        LTLog(LOG_WARN,"0x8668 = 0x%02bx",HDMI_ReadI2C_Byte(0x68));
 245   1      //        LTLog(LOG_WARN,"0x8669 = 0x%02bx",HDMI_ReadI2C_Byte(0x69));
 246   1      //        LTLog(LOG_WARN,"0x866a = 0x%02bx",HDMI_ReadI2C_Byte(0x6a));
 247   1      //        LTLog(LOG_WARN,"0x866b = 0x%02bx",HDMI_ReadI2C_Byte(0x6b));
 248   1      //        LTLog(LOG_WARN,"0x866c = 0x%02bx",HDMI_ReadI2C_Byte(0x6c));
 249   1      //    }
 250   1          return ucRtn;
 251   1      }
*** WARNING C280 IN LINE 144 OF ..\User\Driver\DrvMipiRx.c: 'i': unreferenced local variable
 252          
 253          u8 Drv_MipiRx_VidFmtUpdate()
 254          {
 255   1          u8 ucRxFmt;
 256   1          
 257   1          ucRxFmt = g_stMipiRxVidTiming_Get.ucFmt;
 258   1          HDMI_WriteI2C_Byte(0xff,0xd0);
 259   1          g_stMipiRxVidTiming_Get.ucFmt = (HDMI_ReadI2C_Byte(0x84) & 0x0f);
 260   1          
 261   1          if (ucRxFmt != g_stMipiRxVidTiming_Get.ucFmt)
 262   1          {
 263   2              return TRUE;
 264   2          }
 265   1          else
 266   1          {
 267   2              return FALSE;
 268   2          }
 269   1      }
 270          
 271          
 272          void Drv_MipiRx_HsSettleSet(void)
 273          {
 274   1      //    if((g_stMipiRxVidTiming_Get.ucLane0SetNum > 0x10) && (g_stMipiRxVidTiming_Get.ucLane0SetNum < 0x50))
 275   1      //    {
 276   1      //        LTLog(LOG_DEBUG, "Set Mipi Rx Settle: 0x%02bx", (g_stMipiRxVidTiming_Get.ucLane0SetNum - 5));
 277   1      //        HDMI_WriteI2C_Byte(0xff,0xd0);
 278   1      //        HDMI_WriteI2C_Byte(0x02,(g_stMipiRxVidTiming_Get.ucLane0SetNum - 5));
 279   1      //    }
 280   1      //    else
 281   1      //    {
 282   1              LTLog(LOG_DEBUG, "Set Mipi Rx Settle: 0x0e"); //mipi rx cts test need settle 0x0e
 283   1              HDMI_WriteI2C_Byte(0xff,0xd0);
 284   1              HDMI_WriteI2C_Byte(0x02,0x05);
 285   1      //    }
 286   1      }
 287          
 288          void Drv_MipiRx_SotGet()
 289          {
 290   1          HDMI_WriteI2C_Byte(0xff,0xd0);
 291   1          g_stMipiRxVidTiming_Get.ucLane0SetNum  = HDMI_ReadI2C_Byte(0x88);
 292   1          g_stMipiRxVidTiming_Get.ucLane0SotData = HDMI_ReadI2C_Byte(0x89);
 293   1          g_stMipiRxVidTiming_Get.ucLane1SetNum  = HDMI_ReadI2C_Byte(0x8a);
 294   1          g_stMipiRxVidTiming_Get.ucLane1SotData = HDMI_ReadI2C_Byte(0x8b);
 295   1          g_stMipiRxVidTiming_Get.ucLane2SetNum  = HDMI_ReadI2C_Byte(0x8c);
 296   1          g_stMipiRxVidTiming_Get.ucLane2SotData = HDMI_ReadI2C_Byte(0x8d);
 297   1          g_stMipiRxVidTiming_Get.ucLane3SetNum  = HDMI_ReadI2C_Byte(0x8e);
 298   1          g_stMipiRxVidTiming_Get.ucLane3SotData = HDMI_ReadI2C_Byte(0x8f);
 299   1      
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 6   

 300   1          LTLog(LOG_DEBUG,"Sot Num = 0x%02bx, 0x%02bx, 0x%02bx, 0x%02bx", g_stMipiRxVidTiming_Get.ucLane0SetNum,
             -g_stMipiRxVidTiming_Get.ucLane1SetNum,
 301   1                                                                          g_stMipiRxVidTiming_Get.ucLane2SetNum,
             -g_stMipiRxVidTiming_Get.ucLane3SetNum);
 302   1          LTLog(LOG_DEBUG,"Sot Dta = 0x%02bx, 0x%02bx, 0x%02bx, 0x%02bx", g_stMipiRxVidTiming_Get.ucLane0SotData
             -,g_stMipiRxVidTiming_Get.ucLane1SotData,
 303   1                                                                          g_stMipiRxVidTiming_Get.ucLane2SotData
             -,g_stMipiRxVidTiming_Get.ucLane3SotData); 
 304   1      }
 305          
 306          void Drv_MipiRx_HactGet()
 307          {
 308   1          HDMI_WriteI2C_Byte(0xff,0xd0);
 309   1          g_stMipiRxVidTiming_Get.usVact = (HDMI_ReadI2C_Byte(0x85) << 8) +HDMI_ReadI2C_Byte(0x86);
 310   1          g_stMipiRxVidTiming_Get.ucFmt  = (HDMI_ReadI2C_Byte(0x84) & 0x0f);
 311   1          g_stMipiRxVidTiming_Get.ucPa_Lpn = HDMI_ReadI2C_Byte(0x9c);
 312   1          g_stMipiRxVidTiming_Get.uswc = (HDMI_ReadI2C_Byte(0x82) << 8) + HDMI_ReadI2C_Byte(0x83); //
 313   1      
 314   1          switch (g_stMipiRxVidTiming_Get.ucFmt)
 315   1          {
 316   2              case 0x01: //DSI-YUV422-10bpc
 317   2              case 0x0e: //CSI-YUV422-10bpc
 318   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 2.5; //wc = hact * 20bpp/8
 319   2              break;
 320   2              case 0x02: //DSI-YUV422-12bpc
 321   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 3; //wc = hact * 24bpp/8
 322   2              break;
 323   2              case 0x03: //YUV422-8bpc
 324   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 2; //wc = hact * 16bpp/8
 325   2              break; 
 326   2              case 0x04: //RGB10bpc
 327   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 3.75; //wc = hact * 30bpp/8
 328   2              break;
 329   2              case 0x05: //RGB12bpc
 330   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 4.5; //wc = hact * 36bpp/8
 331   2              break;
 332   2              case 0x06: //YUV420-8bpc
 333   2              case 0x0a: //RGB8bpc
 334   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 3; //wc = hact * 24bpp/8
 335   2              break;
 336   2              case 0x07: //RGB565
 337   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 2; //wc = hact * 16bpp/8
 338   2              break;
 339   2              case 0x08: //RGB6bpc
 340   2              case 0x09: //RGB6bpc_losely
 341   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 2.25; //wc = hact * 18bpp/8
 342   2              break;
 343   2              case 0x0b: //RAW8
 344   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 1; //wc = hact * 8bpp/8
 345   2              break;
 346   2              case 0x0c: //RAW10
 347   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 1.25; //wc = hact * 10bpp/8
 348   2              break;
 349   2              case 0x0d: //RAW12
 350   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 1.5; //wc = hact * 12bpp/8
 351   2              break;
 352   2              default: 
 353   2                  g_stMipiRxVidTiming_Get.usHact = g_stMipiRxVidTiming_Get.uswc / 3; //wc = hact * 24bpp/8
 354   2              break;
 355   2          }
 356   1          
 357   1      }
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 7   

 358          
 359          u8 Drv_MipiRx_VidTiming_Get(void)
 360          {
 361   1          Drv_MipiRx_SotGet();
 362   1          Drv_MipiRx_HsSettleSet();
 363   1          Drv_MipiRx_HactGet();
 364   1          if((g_stMipiRxVidTiming_Get.usHact < 400) || (g_stMipiRxVidTiming_Get.usVact < 400))
 365   1          {
 366   2              LTLog(LOG_ERROR,"RX No Video Get");
 367   2              return FAIL;
 368   2          }
 369   1          else
 370   1          {
 371   2              LTLog(LOG_INFO,"hact = %d",g_stMipiRxVidTiming_Get.usHact);
 372   2              LTLog(LOG_INFO,"vact = %d",g_stMipiRxVidTiming_Get.usVact);    
 373   2              LTLog(LOG_INFO,"fmt = 0x%02bx", g_stMipiRxVidTiming_Get.ucFmt);
 374   2              LTLog(LOG_INFO,"pa_lpn = 0x%02bx", g_stMipiRxVidTiming_Get.ucPa_Lpn);
 375   2              return SUCCESS;
 376   2          }
 377   1      }
 378          
 379          u8 Drv_MipiRx_VidTiming_Sel()
 380          {       
 381   1          u8 rtn = FALSE;
 382   1          u8 uci;
 383   1          u8 ucResolutionnum = 0;
 384   1          
 385   1          ucResolutionnum = sizeof(resolution) / sizeof(resolution[0]);
 386   1          
 387   1          for (uci = 0; uci < ucResolutionnum; uci++)
 388   1          {
 389   2              if ((g_stMipiRxVidTiming_Get.usHact == resolution[uci].usHact ) && 
 390   2                  ( g_stMipiRxVidTiming_Get.usVact == resolution[uci].usVact ))
 391   2              {
 392   3                  g_stMipiRxVidTiming_Get.ucFrameRate = Drv_VidChk_FrmRt_Get();
 393   3                  LTLog(LOG_INFO,"FrameRate = %bd", g_stMipiRxVidTiming_Get.ucFrameRate);
 394   3                  if ((g_stMipiRxVidTiming_Get.ucFrameRate > (resolution[uci].ucFrameRate - 3)) && 
 395   3                     (g_stMipiRxVidTiming_Get.ucFrameRate < (resolution[uci].ucFrameRate + 3)))
 396   3                  {
 397   4                      g_stRxVidTiming.usVtotal = resolution[uci].usVtotal;
 398   4                      g_stRxVidTiming.usVact   = resolution[uci].usVact;
 399   4                      g_stRxVidTiming.usVs     = resolution[uci].usVs;
 400   4                      g_stRxVidTiming.usVfp    = resolution[uci].usVfp;
 401   4                      g_stRxVidTiming.usVbp    = resolution[uci].usVbp;
 402   4                      
 403   4                      g_stRxVidTiming.usHtotal = resolution[uci].usHtotal;
 404   4                      g_stRxVidTiming.usHact   = resolution[uci].usHact;
 405   4                      g_stRxVidTiming.usHs     = resolution[uci].usHs;
 406   4                      g_stRxVidTiming.usHfp    = resolution[uci].usHfp;
 407   4                      g_stRxVidTiming.usHbp    = resolution[uci].usHbp;
 408   4                      g_stRxVidTiming.ulPclk_Khz = (u32)((u32)(resolution[uci].usHtotal) * (resolution[uci].usVt
             -otal) * (resolution[uci].ucFrameRate) / 1000);
 409   4      
 410   4                      Drv_MipiRx_VidTiming_Set();
 411   4                      LTLog(LOG_INFO,"Video Timing Set %dx%d_%bd",g_stRxVidTiming.usHact,g_stRxVidTiming.usVact,
             -g_stMipiRxVidTiming_Get.ucFrameRate);
 412   4                      rtn = TRUE;
 413   4                      break;
 414   4                  }
 415   3              }
 416   2          }
 417   1          return rtn;
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 8   

 418   1       
 419   1      }
 420          
 421          void Drv_MipiRx_VidTiming_Set()
 422          {
 423   1          HDMI_WriteI2C_Byte(0xff,0xd0);
 424   1          HDMI_WriteI2C_Byte(0x0d,(u8)(g_stRxVidTiming.usVtotal >> 8));     //vtotal[15:8]
 425   1          HDMI_WriteI2C_Byte(0x0e,(u8)(g_stRxVidTiming.usVtotal));          //vtotal[7:0]
 426   1          HDMI_WriteI2C_Byte(0x0f,(u8)(g_stRxVidTiming.usVact >> 8));       //vactive[15:8]
 427   1          HDMI_WriteI2C_Byte(0x10,(u8)(g_stRxVidTiming.usVact));            //vactive[7:0]
 428   1          HDMI_WriteI2C_Byte(0x15,(u8)(g_stRxVidTiming.usVs));              //vs[7:0]
 429   1          HDMI_WriteI2C_Byte(0x17,(u8)(g_stRxVidTiming.usVfp >> 8));        //vfp[15:8]
 430   1          HDMI_WriteI2C_Byte(0x18,(u8)(g_stRxVidTiming.usVfp));             //vfp[7:0]    
 431   1      
 432   1          HDMI_WriteI2C_Byte(0x11,(u8)(g_stRxVidTiming.usHtotal >> 8));     //htotal[15:8]
 433   1          HDMI_WriteI2C_Byte(0x12,(u8)(g_stRxVidTiming.usHtotal));          //htotal[7:0]
 434   1          HDMI_WriteI2C_Byte(0x13,(u8)(g_stRxVidTiming.usHact >> 8));       //hactive[15:8]
 435   1          HDMI_WriteI2C_Byte(0x14,(u8)(g_stRxVidTiming.usHact));            //hactive[7:0]
 436   1          HDMI_WriteI2C_Byte(0x4c,(u8)(g_stRxVidTiming.usHs >> 8));         //hs[15:8]
 437   1          HDMI_WriteI2C_Byte(0x16,(u8)(g_stRxVidTiming.usHs));              //hs[7:0]
 438   1          HDMI_WriteI2C_Byte(0x19,(u8)(g_stRxVidTiming.usHfp >> 8));        //hfp[15:8]
 439   1          HDMI_WriteI2C_Byte(0x1a,(u8)(g_stRxVidTiming.usHfp));             //hfp[7:0]
 440   1      }
 441          
 442          u8 Drv_MipiRx_VidFmt_Get(IN u8 VidFmt)
 443          {
 444   1          u8 ucRxVidFmt;
 445   1          
 446   1          switch (VidFmt)
 447   1          {
 448   2              case 0x01: //DSI-YUV422-10bpc
 449   2                  ucRxVidFmt = YUV422_10bit;
 450   2              break;
 451   2              case 0x02: //DSI-YUV422-12bpc
 452   2                  ucRxVidFmt = YUV422_12bit;
 453   2              break;
 454   2              case 0x03: //YUV422-8bpc
 455   2                  ucRxVidFmt = YUV422_8bit;
 456   2              break;
 457   2              case 0x04: //RGB30bpp
 458   2                  ucRxVidFmt = RGB_10Bit;
 459   2              break;
 460   2              case 0x05: //RGB36bpp
 461   2                  ucRxVidFmt = RGB_12Bit;
 462   2              break;
 463   2              case 0x06: //YUV420-8bpc
 464   2                  ucRxVidFmt = YUV420_8bit;
 465   2              break;
 466   2              case 0x07: //RGB565
 467   2              break;
 468   2              case 0x08: //RGB666
 469   2                  ucRxVidFmt = RGB_6Bit;
 470   2              break;
 471   2              case 0x09: //DSI-RGB6L
 472   2              break;
 473   2              case 0x0a: //RGB888
 474   2                  ucRxVidFmt = RGB_8Bit;
 475   2              break;
 476   2              case 0x0b: //RAW8
 477   2              break;
 478   2              case 0x0c: //RAW10
 479   2              break;
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 9   

 480   2              case 0x0d: //RAW12
 481   2              break;
 482   2              case 0x0e: //CSI-YUV422-10
 483   2                  ucRxVidFmt = YUV422_10bit;
 484   2              break;
 485   2              default:
 486   2                  ucRxVidFmt = RGB_8Bit;
 487   2              break;    
 488   2          }
 489   1      
 490   1          LTLog(LOG_INFO,"MipiRx Input Format: %s",g_szStrRxFormat[VidFmt]);
 491   1          return ucRxVidFmt;
 492   1      }
 493          
 494          void Drv_MipiRx_InputSel()
 495          {
 496   1          HDMI_WriteI2C_Byte(0xff,0xd0);
 497   1          #if (MIPIRX_INPUT_SEL == MIPI_CSI)
                  HDMI_WriteI2C_Byte(0x04,0x10); //[4]1: CSI enable
                  HDMI_WriteI2C_Byte(0x21,0xc6); //[7](dsi: hsync_level(for pcr adj) = hsync_level; csi:hsync_level(for 
             -pcr adj) = de_level)
                  LTLog(LOG_INFO,"Mipi CSI Input");
                  #else 
 502   1          HDMI_WriteI2C_Byte(0x04,0x00); //[4]0: DSI enable
 503   1          HDMI_WriteI2C_Byte(0x21,0x46); //[7](dsi: hsync_level(for pcr adj) = hsync_level; csi:hsync_level(for 
             -pcr adj) = de_level)
 504   1          LTLog(LOG_INFO,"Mipi DSI Input");
 505   1          #endif
 506   1      }
 507          
 508          void Drv_MipiRx_LaneSet(void)
 509          {
 510   1          HDMI_WriteI2C_Byte(0xff,0x85);
 511   1          HDMI_WriteI2C_Byte(0x3f,0x08); //MLRX HS/LP control conmand enable
 512   1          HDMI_WriteI2C_Byte(0x40,0x04); //[2:0]pa_ch0_src_sel ch4 data
 513   1          HDMI_WriteI2C_Byte(0x41,0x03); //[2:0]pa_ch1_src_sel ch3 data
 514   1          HDMI_WriteI2C_Byte(0x42,0x02); //[2:0]pa_ch2_src_sel ch2 data
 515   1          HDMI_WriteI2C_Byte(0x43,0x01); //[2:0]pa_ch3_src_sel ch1 data
 516   1      
 517   1          HDMI_WriteI2C_Byte(0x45,0x04); //[2:0]pb_ch0_src_sel ch9 data
 518   1          HDMI_WriteI2C_Byte(0x46,0x03); //[2:0]pb_ch1_src_sel ch8 data
 519   1          HDMI_WriteI2C_Byte(0x47,0x02); //[2:0]pb_ch2_src_sel ch7 data
 520   1          HDMI_WriteI2C_Byte(0x48,0x01); //[2:0]pb_ch3_src_sel ch6 data
 521   1          
 522   1          HDMI_WriteI2C_Byte(0x44,0x00); //[6]mlrx port A output select port A;[2:0]pa_ch4_src_sel ch0 data
 523   1          HDMI_WriteI2C_Byte(0x49,0x00); //[6]mlrx port B output select port A;[2:0]pb_ch4_src_sel ch5 data
 524   1      
 525   1          #if MIPIRX_PORT_SEL == PORTB
                  HDMI_WriteI2C_Byte(0x44,0x40); //[6]mlrx port A output select port B;[2:0]pa_ch4_src_sel ch0 data
                  HDMI_WriteI2C_Byte(0x49,0x00); //[6]mlrx port B output select port B;[2:0]pb_ch4_src_sel ch5 data
                  #endif
 529   1      
 530   1      }
 531          
 532          void Drv_MipiRxClk_Sel(void)
 533          {
 534   1          /* CLK sel */
 535   1          HDMI_WriteI2C_Byte(0xff,0x85);
 536   1          HDMI_WriteI2C_Byte(0xe9,0x88); //sys clk sel from XTAL
 537   1          
 538   1          HDMI_WriteI2C_Byte(0xff,0x81);
 539   1          HDMI_WriteI2C_Byte(0x80,0x51); //[7:6]rx sram rd clk src sel ad dessc pcr clk
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 10  

 540   1                                         //[5:4]rx sram wr clk src sel mlrx bytr clk
 541   1                                         //[1:0]video check clk sel from desscpll pix clk
 542   1          #if MIPIRX_PORT_SEL == PORTA
 543   1          HDMI_WriteI2C_Byte(0x81,0x10); //[5]0: mlrx byte clock select from ad_mlrxa_byte_clk
 544   1                                         //[4]1: rx output pixel clock select from ad_desscpll_pix_clk
 545   1          #elif MIPIRX_PORT_SEL == PORTB
                  HDMI_WriteI2C_Byte(0x81,0x30); //[5]1: mlrx byte clock select from ad_mlrxb_byte_clk
                                                 //[4]1: rx output pixel clock select from ad_desscpll_pix_clk
                  #endif
 549   1          HDMI_WriteI2C_Byte(0xff,0x86);
 550   1          HDMI_WriteI2C_Byte(0x32,0x03); //video check frame cnt set: 3 frame
 551   1      }
 552          
 553          void Drv_MipiRx_PhyPowerOn(void)
 554          {
 555   1          HDMI_WriteI2C_Byte(0xff,0xd0);
 556   1          HDMI_WriteI2C_Byte(0x00,(HDMI_ReadI2C_Byte(0x00) | MIPIRX_LANE_NUM));    // 0: 4 Lane / 1: 1 Lane / 2 
             -: 2 Lane / 3: 3 Lane
 557   1      
 558   1          HDMI_WriteI2C_Byte(0xff,0x82);
 559   1          HDMI_WriteI2C_Byte(0x01,0x11); //MIPI RX portA & B disable
 560   1      
 561   1          #if MIPIRX_PORT_SEL == PORTA
 562   1          HDMI_WriteI2C_Byte(0x18,0x48); //portA clk delay select 0
 563   1          HDMI_WriteI2C_Byte(0x01,0x91); //MIPI RX portA enable
 564   1          HDMI_WriteI2C_Byte(0x02,0x00); //[5][1]:0 mipi mode, no swap
 565   1          HDMI_WriteI2C_Byte(0x03,0xEE); //port A & B eq current reference   
 566   1          HDMI_WriteI2C_Byte(0x09,0x21); //[3]0: select link clk from port-A, [1]0: mlrx_clk2pll disable
 567   1          HDMI_WriteI2C_Byte(0x04,0x44);
 568   1          HDMI_WriteI2C_Byte(0x05,0xc4); //port A clk lane eq sel
 569   1          HDMI_WriteI2C_Byte(0x06,0x44);
 570   1          HDMI_WriteI2C_Byte(0x13,0x0c); //MIPI port A clk lane rterm & high speed en
 571   1          
 572   1          #if MIPIRX_CLK_BURST == ENABLED
                  HDMI_WriteI2C_Byte(0x13,0x00); //MIPI port A clk lane rterm & high speed en
                  #endif
 575   1          LTLog(LOG_INFO,"MIPI Input PortA");
 576   1          #elif MIPIRX_PORT_SEL == PORTB
                  HDMI_WriteI2C_Byte(0x1A, 0x01); //portB clk  delay select 0
                  HDMI_WriteI2C_Byte(0x01,0x19); //MIPI RX portB enable
                  HDMI_WriteI2C_Byte(0x02,0x00); //[5][1]:0 mipi mode, no swap
                  HDMI_WriteI2C_Byte(0x03,0xEE); //port A & B eq current reference
                  HDMI_WriteI2C_Byte(0x06,0x44);
                  HDMI_WriteI2C_Byte(0x07,0x4c); //port B clk lane eq sel
                  HDMI_WriteI2C_Byte(0x08,0x44);
                  HDMI_WriteI2C_Byte(0x09,0x29); //[3]1: select link clk from port-B, [1]0: mlrx_clk2pll disable
                  HDMI_WriteI2C_Byte(0x14,0x03); //Port-B clk lane software enable
                  
                  #if MIPIRX_CLK_BURST == ENABLED
                  HDMI_WriteI2C_Byte(0x14,0x00); //MIPI port A clk lane rterm & high speed en
                  #endif
                  LTLog(LOG_INFO,"MIPI Input PortB");
                  #else
                  HDMI_WriteI2C_Byte(0x01,0x99); //MIPI RX portB enable
                  HDMI_WriteI2C_Byte(0x02,0x00); //[5][1]:0 mipi mode, no swap
                  HDMI_WriteI2C_Byte(0x03,0xee); //port A & B eq current reference 
                  HDMI_WriteI2C_Byte(0x09,0x29); //[3]1: select link clk from port-B, [1]0: mlrx_clk2pll disable
                  HDMI_WriteI2C_Byte(0x13,0x0c); //MIPI port A clk lane rterm & high speed en
                  HDMI_WriteI2C_Byte(0x14,0x03); //Port-B clk lane software enable
                  
                  #if MIPIRX_CLK_BURST == ENABLED
                  HDMI_WriteI2C_Byte(0x13,0x00); //MIPI port A clk lane rterm use hardware mode
C51 COMPILER V9.53.0.0   DRVMIPIRX                                                         06/30/2023 14:32:03 PAGE 11  

                  HDMI_WriteI2C_Byte(0x14,0x00); //Port-B clk lane use hardware mode
                  #endif
                  #endif
 604   1      
 605   1          HDMI_WriteI2C_Byte(0xff,0xd0);
 606   1          HDMI_WriteI2C_Byte(0x01,0x00); //mipi rx data lane term enable time: 39ns;
 607   1          HDMI_WriteI2C_Byte(0x02,0x0e); //mipi rx hs settle time defult set: 0x05;
 608   1          HDMI_WriteI2C_Byte(0x05,0x00); //mipi rx lk lane term enable time: 39ns;
 609   1          HDMI_WriteI2C_Byte(0x0a,0x59);
 610   1          HDMI_WriteI2C_Byte(0x0b,0x20);
 611   1          
 612   1          HDMI_WriteI2C_Byte(0xff,0x81);
 613   1          HDMI_WriteI2C_Byte(0x09,0xde); //mipi rx dphy reset
 614   1          HDMI_WriteI2C_Byte(0x09,0xdf); //mipi rx dphy release
 615   1      }
 616          
 617          
 618          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2985    ----
   CONSTANT SIZE    =   1021    ----
   XDATA SIZE       =     27      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
